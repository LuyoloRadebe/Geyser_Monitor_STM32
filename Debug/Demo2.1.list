
C:\Users\18301088\Desktop\Demo2.1\Debug\Demo2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  20000000  08003f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
  7 .bss          00000bcc  200000cc  200000cc  000200cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c98  20000c98  000200cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013f55  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027b8  00000000  00000000  00034051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000065dc  00000000  00000000  00036809  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007c8  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d98  00000000  00000000  0003d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d3b3  00000000  00000000  0003e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009345  00000000  00000000  0005b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a31bb  00000000  00000000  00064a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00107bfb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a0c  00000000  00000000  00107c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f14 	.word	0x08003f14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	08003f14 	.word	0x08003f14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_InitTick+0x24>)
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_InitTick+0x28>)
 8000a00:	681b      	ldr	r3, [r3, #0]
{
 8000a02:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000a08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000a0a:	0998      	lsrs	r0, r3, #6
 8000a0c:	f000 fe66 	bl	80016dc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000a10:	4621      	mov	r1, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 fe1e 	bl	8001658 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	20000060 	.word	0x20000060
 8000a24:	10624dd3 	.word	0x10624dd3

08000a28 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x20>)
{
 8000a2a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 fdfd 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a40:	f003 f888 	bl	8003b54 <HAL_MspInit>
}
 8000a44:	2000      	movs	r0, #0
 8000a46:	bd08      	pop	{r3, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a4c:	4a02      	ldr	r2, [pc, #8]	; (8000a58 <HAL_IncTick+0xc>)
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000012c 	.word	0x2000012c

08000a5c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <HAL_GetTick+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000012c 	.word	0x2000012c

08000a68 <HAL_ADC_LevelOutOfWindowCallback>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a70:	6802      	ldr	r2, [r0, #0]
{
 8000a72:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a74:	6893      	ldr	r3, [r2, #8]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	07c9      	lsls	r1, r1, #31
 8000a88:	d5f9      	bpl.n	8000a7e <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000a8a:	6891      	ldr	r1, [r2, #8]
 8000a8c:	f001 010d 	and.w	r1, r1, #13
 8000a90:	2901      	cmp	r1, #1
 8000a92:	d009      	beq.n	8000aa8 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000a96:	f042 0210 	orr.w	r2, r2, #16
 8000a9a:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000aa8:	6893      	ldr	r3, [r2, #8]
 8000aaa:	2103      	movs	r1, #3
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6093      	str	r3, [r2, #8]
 8000ab2:	6011      	str	r1, [r2, #0]
 8000ab4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000ab6:	f7ff ffd1 	bl	8000a5c <HAL_GetTick>
 8000aba:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	07db      	lsls	r3, r3, #31
 8000ac2:	d5dc      	bpl.n	8000a7e <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ac4:	f7ff ffca 	bl	8000a5c <HAL_GetTick>
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9f6      	bls.n	8000abc <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e7ce      	b.n	8000a80 <ADC_Disable+0x10>
 8000ae2:	bf00      	nop

08000ae4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000ae4:	6803      	ldr	r3, [r0, #0]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	f012 0f0c 	tst.w	r2, #12
 8000aec:	d032      	beq.n	8000b54 <ADC_ConversionStop+0x70>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000aee:	68da      	ldr	r2, [r3, #12]
{
 8000af0:	b570      	push	{r4, r5, r6, lr}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000af2:	0195      	lsls	r5, r2, #6
 8000af4:	4604      	mov	r4, r0
 8000af6:	d502      	bpl.n	8000afe <ADC_ConversionStop+0x1a>
 8000af8:	69c2      	ldr	r2, [r0, #28]
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	d03d      	beq.n	8000b7a <ADC_ConversionStop+0x96>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000afe:	2960      	cmp	r1, #96	; 0x60
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b00:	689a      	ldr	r2, [r3, #8]
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000b02:	d029      	beq.n	8000b58 <ADC_ConversionStop+0x74>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b04:	0755      	lsls	r5, r2, #29
 8000b06:	d502      	bpl.n	8000b0e <ADC_ConversionStop+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000b08:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b0a:	0790      	lsls	r0, r2, #30
 8000b0c:	d54b      	bpl.n	8000ba6 <ADC_ConversionStop+0xc2>
        hadc->Instance->CR |= ADC_CR_ADSTP;
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000b0e:	290c      	cmp	r1, #12
 8000b10:	d029      	beq.n	8000b66 <ADC_ConversionStop+0x82>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	0712      	lsls	r2, r2, #28
 8000b16:	d428      	bmi.n	8000b6a <ADC_ConversionStop+0x86>
        hadc->Instance->CR |= ADC_CR_JADSTP;
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8000b18:	2960      	cmp	r1, #96	; 0x60
 8000b1a:	d022      	beq.n	8000b62 <ADC_ConversionStop+0x7e>
 8000b1c:	296c      	cmp	r1, #108	; 0x6c
 8000b1e:	d122      	bne.n	8000b66 <ADC_ConversionStop+0x82>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000b20:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000b22:	f7ff ff9b 	bl	8000a5c <HAL_GetTick>
 8000b26:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000b28:	e004      	b.n	8000b34 <ADC_ConversionStop+0x50>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000b2a:	f7ff ff97 	bl	8000a5c <HAL_GetTick>
 8000b2e:	1b80      	subs	r0, r0, r6
 8000b30:	280b      	cmp	r0, #11
 8000b32:	d805      	bhi.n	8000b40 <ADC_ConversionStop+0x5c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	421d      	tst	r5, r3
 8000b3a:	d1f6      	bne.n	8000b2a <ADC_ConversionStop+0x46>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000b54:	2000      	movs	r0, #0
}
 8000b56:	4770      	bx	lr
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b58:	0715      	lsls	r5, r2, #28
 8000b5a:	d502      	bpl.n	8000b62 <ADC_ConversionStop+0x7e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000b5c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b5e:	0790      	lsls	r0, r2, #30
 8000b60:	d506      	bpl.n	8000b70 <ADC_ConversionStop+0x8c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000b62:	2508      	movs	r5, #8
        break;
 8000b64:	e7dd      	b.n	8000b22 <ADC_ConversionStop+0x3e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000b66:	2504      	movs	r5, #4
        break;
 8000b68:	e7db      	b.n	8000b22 <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000b6a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b6c:	0796      	lsls	r6, r2, #30
 8000b6e:	d4d3      	bmi.n	8000b18 <ADC_ConversionStop+0x34>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	f042 0220 	orr.w	r2, r2, #32
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	e7ce      	b.n	8000b18 <ADC_ConversionStop+0x34>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000b7a:	6982      	ldr	r2, [r0, #24]
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d1be      	bne.n	8000afe <ADC_ConversionStop+0x1a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	0650      	lsls	r0, r2, #25
 8000b84:	d406      	bmi.n	8000b94 <ADC_ConversionStop+0xb0>
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <ADC_ConversionStop+0xcc>)
 8000b88:	e001      	b.n	8000b8e <ADC_ConversionStop+0xaa>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8000b8a:	3a01      	subs	r2, #1
 8000b8c:	d0d8      	beq.n	8000b40 <ADC_ConversionStop+0x5c>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	0649      	lsls	r1, r1, #25
 8000b92:	d5fa      	bpl.n	8000b8a <ADC_ConversionStop+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	0756      	lsls	r6, r2, #29
 8000b9c:	d5e3      	bpl.n	8000b66 <ADC_ConversionStop+0x82>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000b9e:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000ba0:	0792      	lsls	r2, r2, #30
 8000ba2:	d4e0      	bmi.n	8000b66 <ADC_ConversionStop+0x82>
      ConversionGroup = ADC_REGULAR_GROUP;
 8000ba4:	210c      	movs	r1, #12
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	f042 0210 	orr.w	r2, r2, #16
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	e7ae      	b.n	8000b0e <ADC_ConversionStop+0x2a>
 8000bb0:	00099400 	.word	0x00099400

08000bb4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bb4:	6802      	ldr	r2, [r0, #0]
{
 8000bb6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bb8:	6893      	ldr	r3, [r2, #8]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d00d      	beq.n	8000bde <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000bc2:	6891      	ldr	r1, [r2, #8]
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <ADC_Enable+0x70>)
 8000bc6:	4219      	tst	r1, r3
 8000bc8:	d00e      	beq.n	8000be8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	07d9      	lsls	r1, r3, #31
 8000be2:	d5ee      	bpl.n	8000bc2 <ADC_Enable+0xe>
  return HAL_OK;
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000be8:	6893      	ldr	r3, [r2, #8]
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6093      	str	r3, [r2, #8]
 8000bf0:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 8000bf2:	f7ff ff33 	bl	8000a5c <HAL_GetTick>
 8000bf6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bf8:	e004      	b.n	8000c04 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000bfa:	f7ff ff2f 	bl	8000a5c <HAL_GetTick>
 8000bfe:	1b40      	subs	r0, r0, r5
 8000c00:	2802      	cmp	r0, #2
 8000c02:	d804      	bhi.n	8000c0e <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	07db      	lsls	r3, r3, #31
 8000c0a:	d5f6      	bpl.n	8000bfa <ADC_Enable+0x46>
 8000c0c:	e7ea      	b.n	8000be4 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000c1e:	2001      	movs	r0, #1
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
 8000c22:	bf00      	nop
 8000c24:	8000003f 	.word	0x8000003f

08000c28 <HAL_ADC_Init>:
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000c30:	2800      	cmp	r0, #0
 8000c32:	f000 809d 	beq.w	8000d70 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c38:	f013 0310 	ands.w	r3, r3, #16
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	d117      	bne.n	8000c70 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c40:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 8087 	beq.w	8000d56 <HAL_ADC_Init+0x12e>
 8000c48:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c4a:	6891      	ldr	r1, [r2, #8]
 8000c4c:	00c9      	lsls	r1, r1, #3
 8000c4e:	d576      	bpl.n	8000d3e <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c50:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c52:	008f      	lsls	r7, r1, #2
 8000c54:	d473      	bmi.n	8000d3e <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000c58:	06ce      	lsls	r6, r1, #27
 8000c5a:	d400      	bmi.n	8000c5e <HAL_ADC_Init+0x36>
 8000c5c:	b163      	cbz	r3, 8000c78 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c60:	f023 0312 	bic.w	r3, r3, #18
 8000c64:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8000c68:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000c6c:	b017      	add	sp, #92	; 0x5c
 8000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c72:	06db      	lsls	r3, r3, #27
 8000c74:	d4f3      	bmi.n	8000c5e <HAL_ADC_Init+0x36>
 8000c76:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c78:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000c7a:	f010 0004 	ands.w	r0, r0, #4
 8000c7e:	d1ee      	bne.n	8000c5e <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000c80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000c82:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c86:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c8e:	bf08      	it	eq
 8000c90:	4b65      	ldreq	r3, [pc, #404]	; (8000e28 <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8000c92:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c94:	bf18      	it	ne
 8000c96:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 8000c9a:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c9c:	6893      	ldr	r3, [r2, #8]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	f000 809c 	beq.w	8000de0 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ca8:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000caa:	688b      	ldr	r3, [r1, #8]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d060      	beq.n	8000d76 <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cb4:	495d      	ldr	r1, [pc, #372]	; (8000e2c <HAL_ADC_Init+0x204>)
 8000cb6:	6865      	ldr	r5, [r4, #4]
 8000cb8:	688b      	ldr	r3, [r1, #8]
 8000cba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cbe:	432b      	orrs	r3, r5
 8000cc0:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000cc2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000cc4:	68e1      	ldr	r1, [r4, #12]
 8000cc6:	68a3      	ldr	r3, [r4, #8]
 8000cc8:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000ccc:	2f01      	cmp	r7, #1
 8000cce:	ea43 0301 	orr.w	r3, r3, r1
 8000cd2:	bf18      	it	ne
 8000cd4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8000cd8:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cdc:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000cde:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce2:	f000 8086 	beq.w	8000df2 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d002      	beq.n	8000cf2 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cf2:	6893      	ldr	r3, [r2, #8]
 8000cf4:	f013 0f0c 	tst.w	r3, #12
 8000cf8:	d10b      	bne.n	8000d12 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cfa:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cfe:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d00:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000d04:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d06:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000d0a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d0e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000d10:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000d12:	68d5      	ldr	r5, [r2, #12]
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d16:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000d18:	402b      	ands	r3, r5
 8000d1a:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d1c:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000d1e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d20:	d06f      	beq.n	8000e02 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d24:	f023 030f 	bic.w	r3, r3, #15
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000d3a:	b017      	add	sp, #92	; 0x5c
 8000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8000d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d40:	f023 0312 	bic.w	r3, r3, #18
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d54:	e783      	b.n	8000c5e <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d58:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d5a:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000d5c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000d60:	f002 ff36 	bl	8003bd0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d64:	6822      	ldr	r2, [r4, #0]
 8000d66:	6893      	ldr	r3, [r2, #8]
 8000d68:	00de      	lsls	r6, r3, #3
 8000d6a:	d508      	bpl.n	8000d7e <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6c:	462b      	mov	r3, r5
 8000d6e:	e76c      	b.n	8000c4a <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000d70:	2001      	movs	r0, #1
}
 8000d72:	b017      	add	sp, #92	; 0x5c
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d76:	680b      	ldr	r3, [r1, #0]
 8000d78:	07d9      	lsls	r1, r3, #31
 8000d7a:	d4a2      	bmi.n	8000cc2 <HAL_ADC_Init+0x9a>
 8000d7c:	e79a      	b.n	8000cb4 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f7ff fe76 	bl	8000a70 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d84:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 8000d86:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d88:	06d0      	lsls	r0, r2, #27
 8000d8a:	f53f af5d 	bmi.w	8000c48 <HAL_ADC_Init+0x20>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f af5a 	bne.w	8000c48 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8000d94:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d96:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d98:	4926      	ldr	r1, [pc, #152]	; (8000e34 <HAL_ADC_Init+0x20c>)
 8000d9a:	4d27      	ldr	r5, [pc, #156]	; (8000e38 <HAL_ADC_Init+0x210>)
 8000d9c:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8000da2:	f020 0002 	bic.w	r0, r0, #2
 8000da6:	f040 0002 	orr.w	r0, r0, #2
 8000daa:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dac:	6890      	ldr	r0, [r2, #8]
 8000dae:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8000db2:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000db4:	fba5 0101 	umull	r0, r1, r5, r1
 8000db8:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000dba:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dbc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000dc0:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000dc2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000dc6:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc8:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000dca:	9900      	ldr	r1, [sp, #0]
 8000dcc:	2900      	cmp	r1, #0
 8000dce:	f43f af3c 	beq.w	8000c4a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8000dd2:	9900      	ldr	r1, [sp, #0]
 8000dd4:	3901      	subs	r1, #1
 8000dd6:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000dd8:	9900      	ldr	r1, [sp, #0]
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d1f9      	bne.n	8000dd2 <HAL_ADC_Init+0x1aa>
 8000dde:	e734      	b.n	8000c4a <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000de0:	6813      	ldr	r3, [r2, #0]
 8000de2:	07dd      	lsls	r5, r3, #31
 8000de4:	f53f af6d 	bmi.w	8000cc2 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000de8:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dea:	2900      	cmp	r1, #0
 8000dec:	f43f af62 	beq.w	8000cb4 <HAL_ADC_Init+0x8c>
 8000df0:	e75b      	b.n	8000caa <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df2:	b976      	cbnz	r6, 8000e12 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000df6:	3b01      	subs	r3, #1
 8000df8:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 8000dfc:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 8000e00:	e771      	b.n	8000ce6 <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e04:	6a23      	ldr	r3, [r4, #32]
 8000e06:	f021 010f 	bic.w	r1, r1, #15
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	e78b      	b.n	8000d2a <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8000e12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64a3      	str	r3, [r4, #72]	; 0x48
 8000e26:	e75e      	b.n	8000ce6 <HAL_ADC_Init+0xbe>
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	50000300 	.word	0x50000300
 8000e30:	fff0c007 	.word	0xfff0c007
 8000e34:	20000060 	.word	0x20000060
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <HAL_ADC_Start_IT>:
{
 8000e3c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	689c      	ldr	r4, [r3, #8]
 8000e42:	f014 0404 	ands.w	r4, r4, #4
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_Start_IT+0x10>
    tmp_hal_status = HAL_BUSY;
 8000e48:	2002      	movs	r0, #2
}
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8000e4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	4605      	mov	r5, r0
 8000e54:	d0f8      	beq.n	8000e48 <HAL_ADC_Start_IT+0xc>
 8000e56:	2301      	movs	r3, #1
 8000e58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000e5c:	f7ff feaa 	bl	8000bb4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d14b      	bne.n	8000efc <HAL_ADC_Start_IT+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 8000e64:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e66:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <HAL_ADC_Start_IT+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8000e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e74:	646b      	str	r3, [r5, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e76:	6893      	ldr	r3, [r2, #8]
 8000e78:	f013 0f1f 	tst.w	r3, #31
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	d140      	bne.n	8000f02 <HAL_ADC_Start_IT+0xc6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e80:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000e86:	646a      	str	r2, [r5, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	0192      	lsls	r2, r2, #6
 8000e8c:	d505      	bpl.n	8000e9a <HAL_ADC_Start_IT+0x5e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e8e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e90:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e98:	646a      	str	r2, [r5, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e9a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea0:	bf1c      	itt	ne
 8000ea2:	6caa      	ldrne	r2, [r5, #72]	; 0x48
 8000ea4:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	64aa      	str	r2, [r5, #72]	; 0x48
      switch(hadc->Init.EOCSelection)
 8000eaa:	696a      	ldr	r2, [r5, #20]
      __HAL_UNLOCK(hadc);
 8000eac:	2400      	movs	r4, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eae:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 8000eb0:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
      switch(hadc->Init.EOCSelection)
 8000eb4:	2a08      	cmp	r2, #8
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb6:	6019      	str	r1, [r3, #0]
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eb8:	685a      	ldr	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 8000eba:	d132      	bne.n	8000f22 <HAL_ADC_Start_IT+0xe6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ebc:	f022 0204 	bic.w	r2, r2, #4
 8000ec0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	f042 0208 	orr.w	r2, r2, #8
 8000ec8:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000eca:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000ecc:	2a01      	cmp	r2, #1
 8000ece:	d02c      	beq.n	8000f2a <HAL_ADC_Start_IT+0xee>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_ADC_Start_IT+0xf8>)
 8000ed2:	6891      	ldr	r1, [r2, #8]
 8000ed4:	06c9      	lsls	r1, r1, #27
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_ADC_Start_IT+0xb6>
 8000ed8:	6891      	ldr	r1, [r2, #8]
 8000eda:	f001 011f 	and.w	r1, r1, #31
 8000ede:	2905      	cmp	r1, #5
 8000ee0:	d007      	beq.n	8000ef2 <HAL_ADC_Start_IT+0xb6>
 8000ee2:	6892      	ldr	r2, [r2, #8]
 8000ee4:	f002 021f 	and.w	r2, r2, #31
 8000ee8:	2a09      	cmp	r2, #9
 8000eea:	d002      	beq.n	8000ef2 <HAL_ADC_Start_IT+0xb6>
 8000eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef0:	d1ab      	bne.n	8000e4a <HAL_ADC_Start_IT+0xe>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	f042 0204 	orr.w	r2, r2, #4
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8000efc:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d0bb      	beq.n	8000e80 <HAL_ADC_Start_IT+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f08:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f0a:	490b      	ldr	r1, [pc, #44]	; (8000f38 <HAL_ADC_Start_IT+0xfc>)
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f0c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f10:	428b      	cmp	r3, r1
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f12:	646a      	str	r2, [r5, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f14:	d1c1      	bne.n	8000e9a <HAL_ADC_Start_IT+0x5e>
 8000f16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f1a:	68d2      	ldr	r2, [r2, #12]
 8000f1c:	0194      	lsls	r4, r2, #6
 8000f1e:	d5bc      	bpl.n	8000e9a <HAL_ADC_Start_IT+0x5e>
 8000f20:	e7b5      	b.n	8000e8e <HAL_ADC_Start_IT+0x52>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f22:	f042 020c 	orr.w	r2, r2, #12
 8000f26:	605a      	str	r2, [r3, #4]
          break;
 8000f28:	e7cf      	b.n	8000eca <HAL_ADC_Start_IT+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	f022 0210 	bic.w	r2, r2, #16
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	e7cd      	b.n	8000ed0 <HAL_ADC_Start_IT+0x94>
 8000f34:	50000300 	.word	0x50000300
 8000f38:	50000100 	.word	0x50000100

08000f3c <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000f3c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000f40:	2a01      	cmp	r2, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_Stop_IT+0xc>
 8000f44:	2002      	movs	r0, #2
 8000f46:	4770      	bx	lr
 8000f48:	2301      	movs	r3, #1
{
 8000f4a:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000f4c:	216c      	movs	r1, #108	; 0x6c
  __HAL_LOCK(hadc);
 8000f4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000f52:	4604      	mov	r4, r0
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000f54:	f7ff fdc6 	bl	8000ae4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000f58:	b118      	cbz	r0, 8000f62 <HAL_ADC_Stop_IT+0x26>
  __HAL_UNLOCK(hadc);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000f60:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f62:	6822      	ldr	r2, [r4, #0]
 8000f64:	6853      	ldr	r3, [r2, #4]
 8000f66:	f023 031c 	bic.w	r3, r3, #28
 8000f6a:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fd7f 	bl	8000a70 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d1f1      	bne.n	8000f5a <HAL_ADC_Stop_IT+0x1e>
      ADC_STATE_CLR_SET(hadc->State,
 8000f76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6463      	str	r3, [r4, #68]	; 0x44
 8000f86:	e7e8      	b.n	8000f5a <HAL_ADC_Stop_IT+0x1e>

08000f88 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_ADCEx_InjectedConvCpltCallback>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	0752      	lsls	r2, r2, #29
{
 8000fa6:	b510      	push	{r4, lr}
 8000fa8:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000faa:	d522      	bpl.n	8000ff2 <HAL_ADC_IRQHandler+0x52>
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	0750      	lsls	r0, r2, #29
 8000fb0:	d51f      	bpl.n	8000ff2 <HAL_ADC_IRQHandler+0x52>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fb4:	06d0      	lsls	r0, r2, #27
 8000fb6:	d403      	bmi.n	8000fc0 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fbe:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fc0:	4a97      	ldr	r2, [pc, #604]	; (8001220 <HAL_ADC_IRQHandler+0x280>)
 8000fc2:	6891      	ldr	r1, [r2, #8]
 8000fc4:	06c9      	lsls	r1, r1, #27
 8000fc6:	f000 80cd 	beq.w	8001164 <HAL_ADC_IRQHandler+0x1c4>
 8000fca:	6891      	ldr	r1, [r2, #8]
 8000fcc:	f001 011f 	and.w	r1, r1, #31
 8000fd0:	2905      	cmp	r1, #5
 8000fd2:	f000 80c7 	beq.w	8001164 <HAL_ADC_IRQHandler+0x1c4>
 8000fd6:	6892      	ldr	r2, [r2, #8]
 8000fd8:	f002 021f 	and.w	r2, r2, #31
 8000fdc:	2a09      	cmp	r2, #9
 8000fde:	f000 80c1 	beq.w	8001164 <HAL_ADC_IRQHandler+0x1c4>
 8000fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe6:	f000 80bd 	beq.w	8001164 <HAL_ADC_IRQHandler+0x1c4>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fee:	68d1      	ldr	r1, [r2, #12]
 8000ff0:	e0b9      	b.n	8001166 <HAL_ADC_IRQHandler+0x1c6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ff2:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000ff4:	0711      	lsls	r1, r2, #28
 8000ff6:	d447      	bmi.n	8001088 <HAL_ADC_IRQHandler+0xe8>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	0691      	lsls	r1, r2, #26
 8000ffc:	d51b      	bpl.n	8001036 <HAL_ADC_IRQHandler+0x96>
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	0692      	lsls	r2, r2, #26
 8001002:	d518      	bpl.n	8001036 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001004:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001006:	4986      	ldr	r1, [pc, #536]	; (8001220 <HAL_ADC_IRQHandler+0x280>)
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800100c:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800100e:	688a      	ldr	r2, [r1, #8]
 8001010:	06d2      	lsls	r2, r2, #27
 8001012:	d066      	beq.n	80010e2 <HAL_ADC_IRQHandler+0x142>
 8001014:	688a      	ldr	r2, [r1, #8]
 8001016:	f002 021f 	and.w	r2, r2, #31
 800101a:	2a05      	cmp	r2, #5
 800101c:	d061      	beq.n	80010e2 <HAL_ADC_IRQHandler+0x142>
 800101e:	688a      	ldr	r2, [r1, #8]
 8001020:	f002 021f 	and.w	r2, r2, #31
 8001024:	2a09      	cmp	r2, #9
 8001026:	d05c      	beq.n	80010e2 <HAL_ADC_IRQHandler+0x142>
 8001028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800102c:	d059      	beq.n	80010e2 <HAL_ADC_IRQHandler+0x142>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800102e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001032:	68d1      	ldr	r1, [r2, #12]
 8001034:	e056      	b.n	80010e4 <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001036:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001038:	0650      	lsls	r0, r2, #25
 800103a:	d421      	bmi.n	8001080 <HAL_ADC_IRQHandler+0xe0>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	0612      	lsls	r2, r2, #24
 8001040:	d503      	bpl.n	800104a <HAL_ADC_IRQHandler+0xaa>
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	0610      	lsls	r0, r2, #24
 8001046:	f100 80bc 	bmi.w	80011c2 <HAL_ADC_IRQHandler+0x222>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	05d1      	lsls	r1, r2, #23
 800104e:	d503      	bpl.n	8001058 <HAL_ADC_IRQHandler+0xb8>
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	05d2      	lsls	r2, r2, #23
 8001054:	f100 80c0 	bmi.w	80011d8 <HAL_ADC_IRQHandler+0x238>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	0590      	lsls	r0, r2, #22
 800105c:	d503      	bpl.n	8001066 <HAL_ADC_IRQHandler+0xc6>
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	0591      	lsls	r1, r2, #22
 8001062:	f100 80a2 	bmi.w	80011aa <HAL_ADC_IRQHandler+0x20a>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	06d2      	lsls	r2, r2, #27
 800106a:	d502      	bpl.n	8001072 <HAL_ADC_IRQHandler+0xd2>
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	06d0      	lsls	r0, r2, #27
 8001070:	d40e      	bmi.n	8001090 <HAL_ADC_IRQHandler+0xf0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	0551      	lsls	r1, r2, #21
 8001076:	d502      	bpl.n	800107e <HAL_ADC_IRQHandler+0xde>
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	0552      	lsls	r2, r2, #21
 800107c:	d422      	bmi.n	80010c4 <HAL_ADC_IRQHandler+0x124>
 800107e:	bd10      	pop	{r4, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	0651      	lsls	r1, r2, #25
 8001084:	d5da      	bpl.n	800103c <HAL_ADC_IRQHandler+0x9c>
 8001086:	e7bd      	b.n	8001004 <HAL_ADC_IRQHandler+0x64>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	0712      	lsls	r2, r2, #28
 800108c:	d5b4      	bpl.n	8000ff8 <HAL_ADC_IRQHandler+0x58>
 800108e:	e790      	b.n	8000fb2 <HAL_ADC_IRQHandler+0x12>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001090:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001092:	2a01      	cmp	r2, #1
 8001094:	d007      	beq.n	80010a6 <HAL_ADC_IRQHandler+0x106>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001096:	4a62      	ldr	r2, [pc, #392]	; (8001220 <HAL_ADC_IRQHandler+0x280>)
 8001098:	6891      	ldr	r1, [r2, #8]
 800109a:	06c9      	lsls	r1, r1, #27
 800109c:	f040 80a8 	bne.w	80011f0 <HAL_ADC_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	07d0      	lsls	r0, r2, #31
 80010a4:	d50b      	bpl.n	80010be <HAL_ADC_IRQHandler+0x11e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80010a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff fcd8 	bl	8000a6c <HAL_ADC_ErrorCallback>
 80010bc:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010be:	2210      	movs	r2, #16
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e7d6      	b.n	8001072 <HAL_ADC_IRQHandler+0xd2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ca:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010d2:	f042 0208 	orr.w	r2, r2, #8
 80010d6:	64a2      	str	r2, [r4, #72]	; 0x48
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010d8:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010da:	6019      	str	r1, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010dc:	f7ff ff5a 	bl	8000f94 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80010e0:	bd10      	pop	{r4, pc}
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010e2:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80010e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80010ea:	d007      	beq.n	80010fc <HAL_ADC_IRQHandler+0x15c>
 80010ec:	0188      	lsls	r0, r1, #6
 80010ee:	d432      	bmi.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010f0:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80010f2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80010f6:	d12e      	bne.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010f8:	048a      	lsls	r2, r1, #18
 80010fa:	d42c      	bmi.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	0650      	lsls	r0, r2, #25
 8001100:	d529      	bpl.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001102:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_ADC_IRQHandler+0x280>)
 8001104:	6891      	ldr	r1, [r2, #8]
 8001106:	06c9      	lsls	r1, r1, #27
 8001108:	d010      	beq.n	800112c <HAL_ADC_IRQHandler+0x18c>
 800110a:	6891      	ldr	r1, [r2, #8]
 800110c:	f001 011f 	and.w	r1, r1, #31
 8001110:	2906      	cmp	r1, #6
 8001112:	d00b      	beq.n	800112c <HAL_ADC_IRQHandler+0x18c>
 8001114:	6892      	ldr	r2, [r2, #8]
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2a07      	cmp	r2, #7
 800111c:	d006      	beq.n	800112c <HAL_ADC_IRQHandler+0x18c>
 800111e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001122:	d003      	beq.n	800112c <HAL_ADC_IRQHandler+0x18c>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001124:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001128:	68d2      	ldr	r2, [r2, #12]
 800112a:	e000      	b.n	800112e <HAL_ADC_IRQHandler+0x18e>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800112c:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800112e:	0292      	lsls	r2, r2, #10
 8001130:	d411      	bmi.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	0710      	lsls	r0, r2, #28
 8001136:	d461      	bmi.n	80011fc <HAL_ADC_IRQHandler+0x25c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800113e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001140:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001146:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001148:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800114a:	05d9      	lsls	r1, r3, #23
 800114c:	d403      	bmi.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800114e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff ff1a 	bl	8000f90 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	2260      	movs	r2, #96	; 0x60
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e76b      	b.n	800103c <HAL_ADC_IRQHandler+0x9c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001164:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800116c:	d116      	bne.n	800119c <HAL_ADC_IRQHandler+0x1fc>
 800116e:	0488      	lsls	r0, r1, #18
 8001170:	d414      	bmi.n	800119c <HAL_ADC_IRQHandler+0x1fc>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	0711      	lsls	r1, r2, #28
 8001176:	d511      	bpl.n	800119c <HAL_ADC_IRQHandler+0x1fc>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	0752      	lsls	r2, r2, #29
 800117c:	d447      	bmi.n	800120e <HAL_ADC_IRQHandler+0x26e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	f022 020c 	bic.w	r2, r2, #12
 8001184:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001186:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800118c:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001190:	04d8      	lsls	r0, r3, #19
 8001192:	d403      	bmi.n	800119c <HAL_ADC_IRQHandler+0x1fc>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001194:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800119c:	4620      	mov	r0, r4
 800119e:	f001 ff49 	bl	8003034 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	220c      	movs	r2, #12
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e726      	b.n	8000ff8 <HAL_ADC_IRQHandler+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80011aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fef2 	bl	8000f9c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e751      	b.n	8001066 <HAL_ADC_IRQHandler+0xc6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fc4c 	bl	8000a68 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e738      	b.n	800104a <HAL_ADC_IRQHandler+0xaa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80011d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fed9 	bl	8000f98 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e733      	b.n	8001058 <HAL_ADC_IRQHandler+0xb8>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80011f0:	6892      	ldr	r2, [r2, #8]
 80011f2:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80011f6:	f47f af56 	bne.w	80010a6 <HAL_ADC_IRQHandler+0x106>
 80011fa:	e760      	b.n	80010be <HAL_ADC_IRQHandler+0x11e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001204:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	64a3      	str	r3, [r4, #72]	; 0x48
 800120c:	e7a3      	b.n	8001156 <HAL_ADC_IRQHandler+0x1b6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64a3      	str	r3, [r4, #72]	; 0x48
 800121e:	e7bd      	b.n	800119c <HAL_ADC_IRQHandler+0x1fc>
 8001220:	50000300 	.word	0x50000300

08001224 <HAL_ADC_ConfigChannel>:
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4603      	mov	r3, r0
 8001228:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 800122a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 800122e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001230:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001232:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 8001234:	d047      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001236:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001238:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800123a:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 800123c:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800123e:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8001240:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001244:	d508      	bpl.n	8001258 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001254:	b017      	add	sp, #92	; 0x5c
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8001258:	6848      	ldr	r0, [r1, #4]
 800125a:	2804      	cmp	r0, #4
 800125c:	d936      	bls.n	80012cc <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 800125e:	2809      	cmp	r0, #9
 8001260:	d871      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 8001262:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001266:	0040      	lsls	r0, r0, #1
 8001268:	381e      	subs	r0, #30
 800126a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800126c:	680d      	ldr	r5, [r1, #0]
 800126e:	271f      	movs	r7, #31
 8001270:	4087      	lsls	r7, r0
 8001272:	ea26 0607 	bic.w	r6, r6, r7
 8001276:	fa05 f000 	lsl.w	r0, r5, r0
 800127a:	4330      	orrs	r0, r6
 800127c:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800127e:	6890      	ldr	r0, [r2, #8]
 8001280:	f010 0f0c 	tst.w	r0, #12
 8001284:	d133      	bne.n	80012ee <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001286:	2d09      	cmp	r5, #9
 8001288:	d94f      	bls.n	800132a <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800128a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800128e:	3f1e      	subs	r7, #30
 8001290:	6990      	ldr	r0, [r2, #24]
 8001292:	688e      	ldr	r6, [r1, #8]
 8001294:	f04f 0e07 	mov.w	lr, #7
 8001298:	fa0e fe07 	lsl.w	lr, lr, r7
 800129c:	ea20 000e 	bic.w	r0, r0, lr
 80012a0:	40be      	lsls	r6, r7
 80012a2:	4330      	orrs	r0, r6
 80012a4:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012a6:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80012a8:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012aa:	694f      	ldr	r7, [r1, #20]
 80012ac:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80012b0:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 80012b2:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012b4:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80012b8:	2e03      	cmp	r6, #3
 80012ba:	f200 80cf 	bhi.w	800145c <HAL_ADC_ConfigChannel+0x238>
 80012be:	e8df f006 	tbb	[pc, r6]
 80012c2:	747e      	.short	0x747e
 80012c4:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 80012c6:	2002      	movs	r0, #2
}
 80012c8:	b017      	add	sp, #92	; 0x5c
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80012cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80012d0:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80012d2:	680d      	ldr	r5, [r1, #0]
 80012d4:	0040      	lsls	r0, r0, #1
 80012d6:	271f      	movs	r7, #31
 80012d8:	4087      	lsls	r7, r0
 80012da:	ea26 0607 	bic.w	r6, r6, r7
 80012de:	fa05 f000 	lsl.w	r0, r5, r0
 80012e2:	4330      	orrs	r0, r6
 80012e4:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012e6:	6890      	ldr	r0, [r2, #8]
 80012e8:	f010 0f0c 	tst.w	r0, #12
 80012ec:	d0cb      	beq.n	8001286 <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012ee:	6890      	ldr	r0, [r2, #8]
 80012f0:	f000 0003 	and.w	r0, r0, #3
 80012f4:	2801      	cmp	r0, #1
 80012f6:	d014      	beq.n	8001322 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012f8:	2c01      	cmp	r4, #1
 80012fa:	f000 8093 	beq.w	8001424 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012fe:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001302:	2001      	movs	r0, #1
 8001304:	40a8      	lsls	r0, r5
 8001306:	ea21 0100 	bic.w	r1, r1, r0
 800130a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800130e:	2d10      	cmp	r5, #16
 8001310:	f000 8083 	beq.w	800141a <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001314:	2d11      	cmp	r5, #17
 8001316:	f000 809c 	beq.w	8001452 <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800131a:	2d12      	cmp	r5, #18
 800131c:	d059      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001320:	e795      	b.n	800124e <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001322:	6810      	ldr	r0, [r2, #0]
 8001324:	07c0      	lsls	r0, r0, #31
 8001326:	d5e7      	bpl.n	80012f8 <HAL_ADC_ConfigChannel+0xd4>
 8001328:	e7f9      	b.n	800131e <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800132a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800132e:	6950      	ldr	r0, [r2, #20]
 8001330:	688e      	ldr	r6, [r1, #8]
 8001332:	2707      	movs	r7, #7
 8001334:	fa07 f70e 	lsl.w	r7, r7, lr
 8001338:	ea20 0007 	bic.w	r0, r0, r7
 800133c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001340:	4330      	orrs	r0, r6
 8001342:	6150      	str	r0, [r2, #20]
 8001344:	e7af      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 8001346:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001348:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800134c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001350:	d80b      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001352:	383c      	subs	r0, #60	; 0x3c
 8001354:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001356:	680d      	ldr	r5, [r1, #0]
 8001358:	271f      	movs	r7, #31
 800135a:	4087      	lsls	r7, r0
 800135c:	ea26 0607 	bic.w	r6, r6, r7
 8001360:	fa05 f000 	lsl.w	r0, r5, r0
 8001364:	4330      	orrs	r0, r6
 8001366:	6390      	str	r0, [r2, #56]	; 0x38
 8001368:	e789      	b.n	800127e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800136a:	385a      	subs	r0, #90	; 0x5a
 800136c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800136e:	680d      	ldr	r5, [r1, #0]
 8001370:	271f      	movs	r7, #31
 8001372:	4087      	lsls	r7, r0
 8001374:	ea26 0607 	bic.w	r6, r6, r7
 8001378:	fa05 f000 	lsl.w	r0, r5, r0
 800137c:	4330      	orrs	r0, r6
 800137e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001380:	e77d      	b.n	800127e <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001382:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8001384:	4e6d      	ldr	r6, [pc, #436]	; (800153c <HAL_ADC_ConfigChannel+0x318>)
 8001386:	403e      	ands	r6, r7
 8001388:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800138c:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001390:	4338      	orrs	r0, r7
 8001392:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8001394:	e7ab      	b.n	80012ee <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001396:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8001398:	4e68      	ldr	r6, [pc, #416]	; (800153c <HAL_ADC_ConfigChannel+0x318>)
 800139a:	403e      	ands	r6, r7
 800139c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80013a0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80013a4:	4338      	orrs	r0, r7
 80013a6:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80013a8:	e7a1      	b.n	80012ee <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013aa:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80013ac:	4e63      	ldr	r6, [pc, #396]	; (800153c <HAL_ADC_ConfigChannel+0x318>)
 80013ae:	403e      	ands	r6, r7
 80013b0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80013b4:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80013b8:	4338      	orrs	r0, r7
 80013ba:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80013bc:	e797      	b.n	80012ee <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013be:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80013c0:	4e5e      	ldr	r6, [pc, #376]	; (800153c <HAL_ADC_ConfigChannel+0x318>)
 80013c2:	403e      	ands	r6, r7
 80013c4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80013c8:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80013cc:	4338      	orrs	r0, r7
 80013ce:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 80013d0:	e78d      	b.n	80012ee <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80013d2:	495b      	ldr	r1, [pc, #364]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
 80013d4:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013d6:	024c      	lsls	r4, r1, #9
 80013d8:	d4a1      	bmi.n	800131e <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80013de:	bf0c      	ite	eq
 80013e0:	4958      	ldreq	r1, [pc, #352]	; (8001544 <HAL_ADC_ConfigChannel+0x320>)
 80013e2:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 80013e6:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013e8:	6891      	ldr	r1, [r2, #8]
 80013ea:	f001 0103 	and.w	r1, r1, #3
 80013ee:	2901      	cmp	r1, #1
 80013f0:	d05d      	beq.n	80014ae <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f2:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013f4:	6881      	ldr	r1, [r0, #8]
 80013f6:	f001 0103 	and.w	r1, r1, #3
 80013fa:	2901      	cmp	r1, #1
 80013fc:	d05e      	beq.n	80014bc <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013fe:	2d10      	cmp	r5, #16
 8001400:	d074      	beq.n	80014ec <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001402:	2d11      	cmp	r5, #17
 8001404:	f000 808f 	beq.w	8001526 <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001408:	2d12      	cmp	r5, #18
 800140a:	d188      	bne.n	800131e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800140c:	494c      	ldr	r1, [pc, #304]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
 800140e:	688a      	ldr	r2, [r1, #8]
 8001410:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001414:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001416:	2000      	movs	r0, #0
 8001418:	e719      	b.n	800124e <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800141a:	4949      	ldr	r1, [pc, #292]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
 800141c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800141e:	020f      	lsls	r7, r1, #8
 8001420:	d5db      	bpl.n	80013da <HAL_ADC_ConfigChannel+0x1b6>
 8001422:	e77c      	b.n	800131e <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001424:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8001428:	40ac      	lsls	r4, r5
 800142a:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800142c:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800142e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001432:	d92e      	bls.n	8001492 <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001434:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001438:	688e      	ldr	r6, [r1, #8]
 800143a:	6994      	ldr	r4, [r2, #24]
 800143c:	f1a0 011b 	sub.w	r1, r0, #27
 8001440:	2707      	movs	r7, #7
 8001442:	408f      	lsls	r7, r1
 8001444:	fa06 f001 	lsl.w	r0, r6, r1
 8001448:	ea24 0107 	bic.w	r1, r4, r7
 800144c:	4301      	orrs	r1, r0
 800144e:	6191      	str	r1, [r2, #24]
 8001450:	e75d      	b.n	800130e <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001452:	493b      	ldr	r1, [pc, #236]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
 8001454:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001456:	01ce      	lsls	r6, r1, #7
 8001458:	d5bf      	bpl.n	80013da <HAL_ADC_ConfigChannel+0x1b6>
 800145a:	e760      	b.n	800131e <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800145c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800145e:	06a8      	lsls	r0, r5, #26
 8001460:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001464:	4286      	cmp	r6, r0
 8001466:	d037      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001468:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800146a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800146e:	42b0      	cmp	r0, r6
 8001470:	d02d      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001472:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001474:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001478:	42b0      	cmp	r0, r6
 800147a:	d032      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800147c:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 800147e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001482:	42b0      	cmp	r0, r6
 8001484:	f47f af33 	bne.w	80012ee <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001488:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800148a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800148e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001490:	e72d      	b.n	80012ee <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001492:	1c68      	adds	r0, r5, #1
 8001494:	688e      	ldr	r6, [r1, #8]
 8001496:	6954      	ldr	r4, [r2, #20]
 8001498:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800149c:	2707      	movs	r7, #7
 800149e:	408f      	lsls	r7, r1
 80014a0:	fa06 f001 	lsl.w	r0, r6, r1
 80014a4:	ea24 0107 	bic.w	r1, r4, r7
 80014a8:	4301      	orrs	r1, r0
 80014aa:	6151      	str	r1, [r2, #20]
 80014ac:	e732      	b.n	8001314 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014ae:	6811      	ldr	r1, [r2, #0]
 80014b0:	07c8      	lsls	r0, r1, #31
 80014b2:	d406      	bmi.n	80014c2 <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014b4:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d0a1      	beq.n	80013fe <HAL_ADC_ConfigChannel+0x1da>
 80014ba:	e79b      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014bc:	6801      	ldr	r1, [r0, #0]
 80014be:	07c9      	lsls	r1, r1, #31
 80014c0:	d59d      	bpl.n	80013fe <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e6bf      	b.n	800124e <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014ce:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80014d0:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014d4:	6656      	str	r6, [r2, #100]	; 0x64
 80014d6:	e7cc      	b.n	8001472 <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014d8:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80014da:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014de:	6616      	str	r6, [r2, #96]	; 0x60
 80014e0:	e7c2      	b.n	8001468 <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014e2:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80014e4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80014e8:	6696      	str	r6, [r2, #104]	; 0x68
 80014ea:	e7c7      	b.n	800147c <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ec:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80014f0:	f47f af15 	bne.w	800131e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014f4:	4912      	ldr	r1, [pc, #72]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f6:	4c14      	ldr	r4, [pc, #80]	; (8001548 <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014f8:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001500:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001502:	220a      	movs	r2, #10
 8001504:	6821      	ldr	r1, [r4, #0]
 8001506:	fbb1 f1f0 	udiv	r1, r1, r0
 800150a:	fb02 f201 	mul.w	r2, r2, r1
 800150e:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001510:	9a00      	ldr	r2, [sp, #0]
 8001512:	2a00      	cmp	r2, #0
 8001514:	f43f af03 	beq.w	800131e <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8001518:	9a00      	ldr	r2, [sp, #0]
 800151a:	3a01      	subs	r2, #1
 800151c:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800151e:	9a00      	ldr	r2, [sp, #0]
 8001520:	2a00      	cmp	r2, #0
 8001522:	d1f9      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x2f4>
 8001524:	e6fb      	b.n	800131e <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001526:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800152a:	f47f aef8 	bne.w	800131e <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800152e:	4904      	ldr	r1, [pc, #16]	; (8001540 <HAL_ADC_ConfigChannel+0x31c>)
 8001530:	688a      	ldr	r2, [r1, #8]
 8001532:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001536:	608a      	str	r2, [r1, #8]
 8001538:	e6f1      	b.n	800131e <HAL_ADC_ConfigChannel+0xfa>
 800153a:	bf00      	nop
 800153c:	83fff000 	.word	0x83fff000
 8001540:	50000300 	.word	0x50000300
 8001544:	50000100 	.word	0x50000100
 8001548:	20000060 	.word	0x20000060
 800154c:	000f4240 	.word	0x000f4240

08001550 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001550:	4603      	mov	r3, r0
 8001552:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001554:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8001556:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800155a:	4834      	ldr	r0, [pc, #208]	; (800162c <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800155c:	680d      	ldr	r5, [r1, #0]
 800155e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001562:	bf18      	it	ne
 8001564:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8001568:	2a01      	cmp	r2, #1
 800156a:	d035      	beq.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800156c:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hadc);
 800156e:	2601      	movs	r6, #1
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001570:	0757      	lsls	r7, r2, #29
  __HAL_LOCK(hadc);
 8001572:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001576:	d508      	bpl.n	800158a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001580:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return tmp_hal_status;
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800158a:	6882      	ldr	r2, [r0, #8]
 800158c:	0756      	lsls	r6, r2, #29
 800158e:	d4f3      	bmi.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001590:	b325      	cbz	r5, 80015dc <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001592:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8001630 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8001596:	684f      	ldr	r7, [r1, #4]
 8001598:	f8de 6008 	ldr.w	r6, [lr, #8]
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	f426 4660 	bic.w	r6, r6, #57344	; 0xe000
 80015a2:	ea47 3242 	orr.w	r2, r7, r2, lsl #13
 80015a6:	4332      	orrs	r2, r6
 80015a8:	f8ce 2008 	str.w	r2, [lr, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015ac:	68a2      	ldr	r2, [r4, #8]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	2a01      	cmp	r2, #1
 80015b4:	d02e      	beq.n	8001614 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015b6:	6882      	ldr	r2, [r0, #8]
 80015b8:	f002 0203 	and.w	r2, r2, #3
 80015bc:	2a01      	cmp	r2, #1
 80015be:	d031      	beq.n	8001624 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80015c2:	6889      	ldr	r1, [r1, #8]
 80015c4:	6882      	ldr	r2, [r0, #8]
 80015c6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80015ca:	430d      	orrs	r5, r1
 80015cc:	f022 020f 	bic.w	r2, r2, #15
 80015d0:	4315      	orrs	r5, r2
 80015d2:	6085      	str	r5, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d4:	2000      	movs	r0, #0
 80015d6:	e7d4      	b.n	8001582 <HAL_ADCEx_MultiModeConfigChannel+0x32>
  __HAL_LOCK(hadc);
 80015d8:	2002      	movs	r0, #2
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80015dc:	4914      	ldr	r1, [pc, #80]	; (8001630 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80015de:	688a      	ldr	r2, [r1, #8]
 80015e0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015e4:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015e6:	68a2      	ldr	r2, [r4, #8]
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	2a01      	cmp	r2, #1
 80015ee:	d00d      	beq.n	800160c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015f0:	6882      	ldr	r2, [r0, #8]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	d010      	beq.n	800161c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80015fc:	688a      	ldr	r2, [r1, #8]
 80015fe:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001602:	f022 020f 	bic.w	r2, r2, #15
 8001606:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2000      	movs	r0, #0
 800160a:	e7ba      	b.n	8001582 <HAL_ADCEx_MultiModeConfigChannel+0x32>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	07d1      	lsls	r1, r2, #31
 8001610:	d4e0      	bmi.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8001612:	e7ed      	b.n	80015f0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001614:	6822      	ldr	r2, [r4, #0]
 8001616:	07d4      	lsls	r4, r2, #31
 8001618:	d5cd      	bpl.n	80015b6 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 800161a:	e7db      	b.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x84>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800161c:	6802      	ldr	r2, [r0, #0]
 800161e:	07d2      	lsls	r2, r2, #31
 8001620:	d4d8      	bmi.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8001622:	e7ea      	b.n	80015fa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001624:	6802      	ldr	r2, [r0, #0]
 8001626:	07d0      	lsls	r0, r2, #31
 8001628:	d4d4      	bmi.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 800162a:	e7c9      	b.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800162c:	50000100 	.word	0x50000100
 8001630:	50000300 	.word	0x50000300

08001634 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001636:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001638:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800163c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800163e:	0200      	lsls	r0, r0, #8
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800164c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800164e:	60d3      	str	r3, [r2, #12]
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165a:	b470      	push	{r4, r5, r6}
 800165c:	68dc      	ldr	r4, [r3, #12]
 800165e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001662:	f1c4 0607 	rsb	r6, r4, #7
 8001666:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001668:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	bf28      	it	cs
 800166e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001670:	2b06      	cmp	r3, #6
 8001672:	d917      	bls.n	80016a4 <HAL_NVIC_SetPriority+0x4c>
 8001674:	3c03      	subs	r4, #3
 8001676:	2501      	movs	r5, #1
 8001678:	40a5      	lsls	r5, r4
 800167a:	3d01      	subs	r5, #1
 800167c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167e:	2301      	movs	r3, #1
 8001680:	40b3      	lsls	r3, r6
 8001682:	3b01      	subs	r3, #1
 8001684:	4019      	ands	r1, r3
 8001686:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001688:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800168e:	db0c      	blt.n	80016aa <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001698:	0109      	lsls	r1, r1, #4
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016a0:	bc70      	pop	{r4, r5, r6}
 80016a2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a4:	2200      	movs	r2, #0
 80016a6:	4614      	mov	r4, r2
 80016a8:	e7e9      	b.n	800167e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_NVIC_SetPriority+0x68>)
 80016ac:	f000 000f 	and.w	r0, r0, #15
 80016b0:	0109      	lsls	r1, r1, #4
 80016b2:	4403      	add	r3, r0
 80016b4:	b2c9      	uxtb	r1, r1
 80016b6:	7619      	strb	r1, [r3, #24]
 80016b8:	bc70      	pop	{r4, r5, r6}
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	e000ecfc 	.word	0xe000ecfc

080016c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016c4:	f000 011f 	and.w	r1, r0, #31
 80016c8:	2301      	movs	r3, #1
 80016ca:	0940      	lsrs	r0, r0, #5
 80016cc:	4a02      	ldr	r2, [pc, #8]	; (80016d8 <HAL_NVIC_EnableIRQ+0x14>)
 80016ce:	408b      	lsls	r3, r1
 80016d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	3801      	subs	r0, #1
 80016de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016e2:	d20e      	bcs.n	8001702 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	4c08      	ldr	r4, [pc, #32]	; (800170c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	20f0      	movs	r0, #240	; 0xf0
 80016ee:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80016fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001712:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001714:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001716:	bf0c      	ite	eq
 8001718:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800171c:	f023 0304 	bicne.w	r3, r3, #4
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4770      	bx	lr
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001728:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800172a:	f001 fc2b 	bl	8002f84 <HAL_SYSTICK_Callback>
 800172e:	bd08      	pop	{r3, pc}

08001730 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001730:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001734:	2a02      	cmp	r2, #2
{  
 8001736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001738:	d003      	beq.n	8001742 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173a:	2204      	movs	r2, #4
 800173c:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001742:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001744:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001746:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001748:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800174a:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800174c:	f024 040e 	bic.w	r4, r4, #14
 8001750:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001752:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001754:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001756:	f024 0401 	bic.w	r4, r4, #1
 800175a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800175c:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 8001760:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001762:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001768:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800176c:	b116      	cbz	r6, 8001774 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 800176e:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	4620      	mov	r0, r4
 8001772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001774:	4630      	mov	r0, r6
    } 
  }
  return status;
}
 8001776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	2900      	cmp	r1, #0
 800177e:	f000 80d9 	beq.w	8001934 <HAL_GPIO_Init+0x1bc>
{
 8001782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001786:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001948 <HAL_GPIO_Init+0x1d0>
{
 800178a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 800178c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800178e:	f04f 0801 	mov.w	r8, #1
 8001792:	e079      	b.n	8001888 <HAL_GPIO_Init+0x110>
 8001794:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001798:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800179a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	fa03 f309 	lsl.w	r3, r3, r9
 80017a2:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a8:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ac:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b0:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b4:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80017bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017be:	f240 8098 	bls.w	80018f2 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 80017c2:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c8:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ca:	fa02 f209 	lsl.w	r2, r2, r9
 80017ce:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d0:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 80017d2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d4:	d554      	bpl.n	8001880 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_GPIO_Init+0x1c0>)
 80017d8:	4a57      	ldr	r2, [pc, #348]	; (8001938 <HAL_GPIO_Init+0x1c0>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	6993      	ldr	r3, [r2, #24]
 80017e4:	f025 0603 	bic.w	r6, r5, #3
 80017e8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80017f4:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80017f6:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80017fc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f04f 090f 	mov.w	r9, #15
 8001804:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001808:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800180c:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001810:	f000 8086 	beq.w	8001920 <HAL_GPIO_Init+0x1a8>
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x1c4>)
 8001816:	4290      	cmp	r0, r2
 8001818:	f000 8084 	beq.w	8001924 <HAL_GPIO_Init+0x1ac>
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x1c8>)
 800181e:	4290      	cmp	r0, r2
 8001820:	f000 8083 	beq.w	800192a <HAL_GPIO_Init+0x1b2>
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_GPIO_Init+0x1cc>)
 8001826:	4290      	cmp	r0, r2
 8001828:	bf0b      	itete	eq
 800182a:	f04f 0903 	moveq.w	r9, #3
 800182e:	2205      	movne	r2, #5
 8001830:	fa09 f303 	lsleq.w	r3, r9, r3
 8001834:	fa02 f303 	lslne.w	r3, r2, r3
 8001838:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800183c:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 800183e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001842:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001844:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001846:	bf54      	ite	pl
 8001848:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800184a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 800184c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001850:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001856:	bf54      	ite	pl
 8001858:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800185a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 800185c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001860:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001866:	bf54      	ite	pl
 8001868:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800186a:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 800186c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001870:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001876:	bf54      	ite	pl
 8001878:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800187a:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 800187c:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001880:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001882:	fa31 f305 	lsrs.w	r3, r1, r5
 8001886:	d048      	beq.n	800191a <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001888:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 800188c:	ea12 0701 	ands.w	r7, r2, r1
 8001890:	d0f6      	beq.n	8001880 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001892:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001896:	f024 0a10 	bic.w	sl, r4, #16
 800189a:	f1ba 0f02 	cmp.w	sl, #2
 800189e:	f47f af79 	bne.w	8001794 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 80018a2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80018a6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80018ae:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f04f 0a0f 	mov.w	sl, #15
 80018b8:	fa0a fb03 	lsl.w	fp, sl, r3
 80018bc:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80018c4:	fa06 f303 	lsl.w	r3, r6, r3
 80018c8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80018cc:	f8c9 3020 	str.w	r3, [r9, #32]
 80018d0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80018d6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018da:	fa03 f309 	lsl.w	r3, r3, r9
 80018de:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e4:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e8:	fa06 f609 	lsl.w	r6, r6, r9
 80018ec:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80018f0:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80018f2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f4:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80018fc:	fa06 f609 	lsl.w	r6, r6, r9
 8001900:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001904:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001906:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800190a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001912:	40ae      	lsls	r6, r5
 8001914:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8001916:	6046      	str	r6, [r0, #4]
 8001918:	e753      	b.n	80017c2 <HAL_GPIO_Init+0x4a>
  }
}
 800191a:	b003      	add	sp, #12
 800191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001920:	2300      	movs	r3, #0
 8001922:	e789      	b.n	8001838 <HAL_GPIO_Init+0xc0>
 8001924:	fa08 f303 	lsl.w	r3, r8, r3
 8001928:	e786      	b.n	8001838 <HAL_GPIO_Init+0xc0>
 800192a:	f04f 0902 	mov.w	r9, #2
 800192e:	fa09 f303 	lsl.w	r3, r9, r3
 8001932:	e781      	b.n	8001838 <HAL_GPIO_Init+0xc0>
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800
 8001944:	48000c00 	.word	0x48000c00
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	6903      	ldr	r3, [r0, #16]
 800194e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001950:	bf14      	ite	ne
 8001952:	2001      	movne	r0, #1
 8001954:	2000      	moveq	r0, #0
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	b90a      	cbnz	r2, 800195e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	6281      	str	r1, [r0, #40]	; 0x28
 800195c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195e:	6181      	str	r1, [r0, #24]
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001968:	6803      	ldr	r3, [r0, #0]
 800196a:	07d9      	lsls	r1, r3, #31
{
 800196c:	b083      	sub	sp, #12
 800196e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001970:	d543      	bpl.n	80019fa <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001972:	49c0      	ldr	r1, [pc, #768]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001974:	684a      	ldr	r2, [r1, #4]
 8001976:	f002 020c 	and.w	r2, r2, #12
 800197a:	2a04      	cmp	r2, #4
 800197c:	f000 8184 	beq.w	8001c88 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001980:	684a      	ldr	r2, [r1, #4]
 8001982:	f002 020c 	and.w	r2, r2, #12
 8001986:	2a08      	cmp	r2, #8
 8001988:	f000 817a 	beq.w	8001c80 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	f000 823d 	beq.w	8001e10 <HAL_RCC_OscConfig+0x4ac>
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 81a1 	beq.w	8001cde <HAL_RCC_OscConfig+0x37a>
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	f000 8297 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x56e>
 80019a4:	4bb3      	ldr	r3, [pc, #716]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019b4:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b6:	4daf      	ldr	r5, [pc, #700]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019b8:	68a2      	ldr	r2, [r4, #8]
 80019ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019bc:	f023 030f 	bic.w	r3, r3, #15
 80019c0:	4313      	orrs	r3, r2
 80019c2:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f84a 	bl	8000a5c <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80019cc:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	2601      	movs	r6, #1
 80019d0:	e005      	b.n	80019de <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff f843 	bl	8000a5c <HAL_GetTick>
 80019d6:	1bc0      	subs	r0, r0, r7
 80019d8:	2864      	cmp	r0, #100	; 0x64
 80019da:	f200 81b9 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 80019de:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	682a      	ldr	r2, [r5, #0]
 80019e4:	fa98 f3a8 	rbit	r3, r8
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa06 f303 	lsl.w	r3, r6, r3
 80019f4:	4213      	tst	r3, r2
 80019f6:	d0ec      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6e>
 80019f8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	079f      	lsls	r7, r3, #30
 80019fc:	d542      	bpl.n	8001a84 <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019fe:	4a9d      	ldr	r2, [pc, #628]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a00:	6851      	ldr	r1, [r2, #4]
 8001a02:	f011 0f0c 	tst.w	r1, #12
 8001a06:	f000 80f7 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a0a:	6851      	ldr	r1, [r2, #4]
 8001a0c:	f001 010c 	and.w	r1, r1, #12
 8001a10:	2908      	cmp	r1, #8
 8001a12:	f000 80ed 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	f000 81d3 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x460>
 8001a1e:	2201      	movs	r2, #1
 8001a20:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8001a34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a36:	f7ff f811 	bl	8000a5c <HAL_GetTick>
 8001a3a:	f04f 0802 	mov.w	r8, #2
 8001a3e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4d8c      	ldr	r5, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a42:	e005      	b.n	8001a50 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff f80a 	bl	8000a5c <HAL_GetTick>
 8001a48:	1bc0      	subs	r0, r0, r7
 8001a4a:	2802      	cmp	r0, #2
 8001a4c:	f200 8180 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001a50:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	682a      	ldr	r2, [r5, #0]
 8001a56:	fa98 f3a8 	rbit	r3, r8
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	fa06 f303 	lsl.w	r3, r6, r3
 8001a66:	4213      	tst	r3, r2
 8001a68:	d0ec      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	6829      	ldr	r1, [r5, #0]
 8001a6c:	22f8      	movs	r2, #248	; 0xf8
 8001a6e:	fa92 f2a2 	rbit	r2, r2
 8001a72:	6963      	ldr	r3, [r4, #20]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	602b      	str	r3, [r5, #0]
 8001a82:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	071d      	lsls	r5, r3, #28
 8001a86:	d44f      	bmi.n	8001b28 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	0758      	lsls	r0, r3, #29
 8001a8a:	d57b      	bpl.n	8001b84 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	00d1      	lsls	r1, r2, #3
 8001a92:	f100 8110 	bmi.w	8001cb6 <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	69da      	ldr	r2, [r3, #28]
 8001a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aa8:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4d72      	ldr	r5, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x314>)
 8001aae:	682b      	ldr	r3, [r5, #0]
 8001ab0:	05da      	lsls	r2, r3, #23
 8001ab2:	f140 813d 	bpl.w	8001d30 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab6:	68e3      	ldr	r3, [r4, #12]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f000 81af 	beq.w	8001e1c <HAL_RCC_OscConfig+0x4b8>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8154 	beq.w	8001d6c <HAL_RCC_OscConfig+0x408>
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	f000 820f 	beq.w	8001eec <HAL_RCC_OscConfig+0x588>
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	621a      	str	r2, [r3, #32]
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7fe ffbe 	bl	8000a5c <HAL_GetTick>
 8001ae0:	f04f 0902 	mov.w	r9, #2
 8001ae4:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	4e63      	ldr	r6, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ae8:	2501      	movs	r5, #1
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
 8001aec:	fa99 f3a9 	rbit	r3, r9
 8001af0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001af2:	fa99 f3a9 	rbit	r3, r9
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa05 f303 	lsl.w	r3, r5, r3
 8001b02:	4213      	tst	r3, r2
 8001b04:	f040 8128 	bne.w	8001d58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe ffa8 	bl	8000a5c <HAL_GetTick>
 8001b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b10:	1bc0      	subs	r0, r0, r7
 8001b12:	4298      	cmp	r0, r3
 8001b14:	f200 811c 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001b18:	fa99 f3a9 	rbit	r3, r9
 8001b1c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0e3      	beq.n	8001aec <HAL_RCC_OscConfig+0x188>
 8001b24:	6a32      	ldr	r2, [r6, #32]
 8001b26:	e7e4      	b.n	8001af2 <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b28:	69a2      	ldr	r2, [r4, #24]
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d07b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x2c2>
 8001b2e:	2201      	movs	r2, #1
 8001b30:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001b34:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4e4f      	ldr	r6, [pc, #316]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8001b38:	fab1 f181 	clz	r1, r1
 8001b3c:	440b      	add	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b40:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8001b42:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b44:	f7fe ff8a 	bl	8000a5c <HAL_GetTick>
 8001b48:	f04f 0802 	mov.w	r8, #2
 8001b4c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7fe ff84 	bl	8000a5c <HAL_GetTick>
 8001b54:	1bc0      	subs	r0, r0, r7
 8001b56:	2802      	cmp	r0, #2
 8001b58:	f200 80fa 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	fa98 f3a8 	rbit	r3, r8
 8001b60:	fa98 f3a8 	rbit	r3, r8
 8001b64:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001b6a:	fa98 f3a8 	rbit	r3, r8
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	fa05 f303 	lsl.w	r3, r5, r3
 8001b7a:	4213      	tst	r3, r2
 8001b7c:	d0e8      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
 8001b7e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b80:	0758      	lsls	r0, r3, #29
 8001b82:	d483      	bmi.n	8001a8c <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	69e3      	ldr	r3, [r4, #28]
 8001b86:	b37b      	cbz	r3, 8001be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4d3a      	ldr	r5, [pc, #232]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001b8a:	686a      	ldr	r2, [r5, #4]
 8001b8c:	f002 020c 	and.w	r2, r2, #12
 8001b90:	2a08      	cmp	r2, #8
 8001b92:	d044      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b9a:	f000 8145 	beq.w	8001e28 <HAL_RCC_OscConfig+0x4c4>
 8001b9e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001baa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff52 	bl	8000a5c <HAL_GetTick>
 8001bb8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001bbc:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	2601      	movs	r6, #1
 8001bc0:	e005      	b.n	8001bce <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7fe ff4b 	bl	8000a5c <HAL_GetTick>
 8001bc6:	1bc0      	subs	r0, r0, r7
 8001bc8:	2802      	cmp	r0, #2
 8001bca:	f200 80c1 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001bce:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	682a      	ldr	r2, [r5, #0]
 8001bd4:	fa94 f3a4 	rbit	r3, r4
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa06 f303 	lsl.w	r3, r6, r3
 8001be4:	4213      	tst	r3, r2
 8001be6:	d1ec      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
}
 8001bea:	b003      	add	sp, #12
 8001bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf0:	6852      	ldr	r2, [r2, #4]
 8001bf2:	03d6      	lsls	r6, r2, #15
 8001bf4:	f53f af0f 	bmi.w	8001a16 <HAL_RCC_OscConfig+0xb2>
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	491d      	ldr	r1, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001c00:	6808      	ldr	r0, [r1, #0]
 8001c02:	fa92 f2a2 	rbit	r2, r2
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	f002 021f 	and.w	r2, r2, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	4202      	tst	r2, r0
 8001c16:	d051      	beq.n	8001cbc <HAL_RCC_OscConfig+0x358>
 8001c18:	6922      	ldr	r2, [r4, #16]
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d04e      	beq.n	8001cbc <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
}
 8001c20:	b003      	add	sp, #12
 8001c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c26:	2501      	movs	r5, #1
 8001c28:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	4e11      	ldr	r6, [pc, #68]	; (8001c74 <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 8001c30:	fab1 f181 	clz	r1, r1
 8001c34:	440b      	add	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f04f 0802 	mov.w	r8, #2
 8001c3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ff0d 	bl	8000a5c <HAL_GetTick>
 8001c42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e004      	b.n	8001c50 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c46:	f7fe ff09 	bl	8000a5c <HAL_GetTick>
 8001c4a:	1bc0      	subs	r0, r0, r7
 8001c4c:	2802      	cmp	r0, #2
 8001c4e:	d87f      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001c50:	fa98 f3a8 	rbit	r3, r8
 8001c54:	fa98 f3a8 	rbit	r3, r8
 8001c58:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001c5e:	fa98 f3a8 	rbit	r3, r8
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa05 f303 	lsl.w	r3, r5, r3
 8001c6e:	4213      	tst	r3, r2
 8001c70:	d1e9      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2e2>
 8001c72:	e784      	b.n	8001b7e <HAL_RCC_OscConfig+0x21a>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c80:	684a      	ldr	r2, [r1, #4]
 8001c82:	03d2      	lsls	r2, r2, #15
 8001c84:	f57f ae82 	bpl.w	800198c <HAL_RCC_OscConfig+0x28>
 8001c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	499a      	ldr	r1, [pc, #616]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001c92:	6808      	ldr	r0, [r1, #0]
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4202      	tst	r2, r0
 8001ca8:	f43f aea7 	beq.w	80019fa <HAL_RCC_OscConfig+0x96>
 8001cac:	6862      	ldr	r2, [r4, #4]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	f47f aea3 	bne.w	80019fa <HAL_RCC_OscConfig+0x96>
 8001cb4:	e7b3      	b.n	8001c1e <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	f04f 0800 	mov.w	r8, #0
 8001cba:	e6f7      	b.n	8001aac <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4d8f      	ldr	r5, [pc, #572]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001cbe:	21f8      	movs	r1, #248	; 0xf8
 8001cc0:	6828      	ldr	r0, [r5, #0]
 8001cc2:	fa91 f1a1 	rbit	r1, r1
 8001cc6:	6962      	ldr	r2, [r4, #20]
 8001cc8:	fab1 f181 	clz	r1, r1
 8001ccc:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001cd0:	408a      	lsls	r2, r1
 8001cd2:	4302      	orrs	r2, r0
 8001cd4:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	071d      	lsls	r5, r3, #28
 8001cd8:	f57f aed6 	bpl.w	8001a88 <HAL_RCC_OscConfig+0x124>
 8001cdc:	e724      	b.n	8001b28 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	4d87      	ldr	r5, [pc, #540]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	602b      	str	r3, [r5, #0]
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001cf2:	68a2      	ldr	r2, [r4, #8]
 8001cf4:	f023 030f 	bic.w	r3, r3, #15
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001cfc:	f7fe feae 	bl	8000a5c <HAL_GetTick>
 8001d00:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001d04:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	2601      	movs	r6, #1
 8001d08:	e004      	b.n	8001d14 <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0a:	f7fe fea7 	bl	8000a5c <HAL_GetTick>
 8001d0e:	1bc0      	subs	r0, r0, r7
 8001d10:	2864      	cmp	r0, #100	; 0x64
 8001d12:	d81d      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001d14:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d18:	682a      	ldr	r2, [r5, #0]
 8001d1a:	fa98 f3a8 	rbit	r3, r8
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa06 f303 	lsl.w	r3, r6, r3
 8001d2a:	4213      	tst	r3, r2
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3a6>
 8001d2e:	e663      	b.n	80019f8 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d38:	f7fe fe90 	bl	8000a5c <HAL_GetTick>
 8001d3c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	f53f aeb8 	bmi.w	8001ab6 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7fe fe89 	bl	8000a5c <HAL_GetTick>
 8001d4a:	1b80      	subs	r0, r0, r6
 8001d4c:	2864      	cmp	r0, #100	; 0x64
 8001d4e:	d9f6      	bls.n	8001d3e <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 8001d50:	2003      	movs	r0, #3
}
 8001d52:	b003      	add	sp, #12
 8001d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	f43f af12 	beq.w	8001b84 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4a66      	ldr	r2, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001d62:	69d3      	ldr	r3, [r2, #28]
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	e70b      	b.n	8001b84 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	4d63      	ldr	r5, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001d6e:	6a2b      	ldr	r3, [r5, #32]
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	622b      	str	r3, [r5, #32]
 8001d76:	6a2b      	ldr	r3, [r5, #32]
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001d7e:	f7fe fe6d 	bl	8000a5c <HAL_GetTick>
 8001d82:	f04f 0902 	mov.w	r9, #2
 8001d86:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	2601      	movs	r6, #1
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0x450>
 8001d8c:	fa99 f3a9 	rbit	r3, r9
 8001d90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d92:	fa99 f3a9 	rbit	r3, r9
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa06 f303 	lsl.w	r3, r6, r3
 8001da2:	4213      	tst	r3, r2
 8001da4:	d0d8      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe fe59 	bl	8000a5c <HAL_GetTick>
 8001daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dae:	1bc0      	subs	r0, r0, r7
 8001db0:	4298      	cmp	r0, r3
 8001db2:	d8cd      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001db4:	fa99 f3a9 	rbit	r3, r9
 8001db8:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0e5      	beq.n	8001d8c <HAL_RCC_OscConfig+0x428>
 8001dc0:	6a2a      	ldr	r2, [r5, #32]
 8001dc2:	e7e6      	b.n	8001d92 <HAL_RCC_OscConfig+0x42e>
 8001dc4:	2501      	movs	r5, #1
 8001dc6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f04f 0802 	mov.w	r8, #2
 8001ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7fe fe3d 	bl	8000a5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4e46      	ldr	r6, [pc, #280]	; (8001efc <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8001de4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e004      	b.n	8001df2 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe fe38 	bl	8000a5c <HAL_GetTick>
 8001dec:	1bc0      	subs	r0, r0, r7
 8001dee:	2802      	cmp	r0, #2
 8001df0:	d8ae      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001df2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	6832      	ldr	r2, [r6, #0]
 8001df8:	fa98 f3a8 	rbit	r3, r8
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa05 f303 	lsl.w	r3, r5, r3
 8001e08:	4213      	tst	r3, r2
 8001e0a:	d1ed      	bne.n	8001de8 <HAL_RCC_OscConfig+0x484>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	e639      	b.n	8001a84 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e10:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e5cc      	b.n	80019b6 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_RCC_OscConfig+0x598>)
 8001e1e:	6a13      	ldr	r3, [r2, #32]
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	e659      	b.n	8001adc <HAL_RCC_OscConfig+0x178>
 8001e28:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fe0d 	bl	8000a5c <HAL_GetTick>
 8001e42:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001e46:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	2601      	movs	r6, #1
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fe06 	bl	8000a5c <HAL_GetTick>
 8001e50:	1bc0      	subs	r0, r0, r7
 8001e52:	2802      	cmp	r0, #2
 8001e54:	f63f af7c 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001e58:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	682a      	ldr	r2, [r5, #0]
 8001e5e:	fa98 f3a8 	rbit	r3, r8
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	fa06 f303 	lsl.w	r3, r6, r3
 8001e6e:	4213      	tst	r3, r2
 8001e70:	d1ec      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	686a      	ldr	r2, [r5, #4]
 8001e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e76:	6a21      	ldr	r1, [r4, #32]
 8001e78:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	606b      	str	r3, [r5, #4]
 8001e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e86:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001e9c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fddd 	bl	8000a5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea2:	4e16      	ldr	r6, [pc, #88]	; (8001efc <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8001ea4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fdd7 	bl	8000a5c <HAL_GetTick>
 8001eae:	1bc0      	subs	r0, r0, r7
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	f63f af4d 	bhi.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001eb6:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eba:	6832      	ldr	r2, [r6, #0]
 8001ebc:	fa94 f3a4 	rbit	r3, r4
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa05 f303 	lsl.w	r3, r5, r3
 8001ecc:	4213      	tst	r3, r2
 8001ece:	d0ec      	beq.n	8001eaa <HAL_RCC_OscConfig+0x546>
 8001ed0:	e68a      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ed6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e564      	b.n	80019b6 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	e5ef      	b.n	8001adc <HAL_RCC_OscConfig+0x178>
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f02:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	f003 010c 	and.w	r1, r3, #12
 8001f08:	2908      	cmp	r1, #8
 8001f0a:	d121      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x50>
 8001f0c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001f10:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f14:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001f18:	fab1 f181 	clz	r1, r1
 8001f1c:	fa20 f101 	lsr.w	r1, r0, r1
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f24:	5c40      	ldrb	r0, [r0, r1]
 8001f26:	210f      	movs	r1, #15
 8001f28:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f2c:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f2e:	fab1 f181 	clz	r1, r1
 8001f32:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001f36:	bf4c      	ite	mi
 8001f38:	4b08      	ldrmi	r3, [pc, #32]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001f3a:	4b09      	ldrpl	r3, [pc, #36]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f3c:	fa22 f201 	lsr.w	r2, r2, r1
 8001f40:	4908      	ldr	r1, [pc, #32]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x64>)
 8001f42:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001f44:	bf48      	it	mi
 8001f46:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001f4a:	fb03 f000 	mul.w	r0, r3, r0
 8001f4e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003f2c 	.word	0x08003f2c
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	003d0900 	.word	0x003d0900
 8001f64:	08003f3c 	.word	0x08003f3c

08001f68 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f68:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <HAL_RCC_ClockConfig+0x180>)
 8001f6a:	6813      	ldr	r3, [r2, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	428b      	cmp	r3, r1
 8001f72:	d20b      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f023 0307 	bic.w	r3, r3, #7
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4299      	cmp	r1, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
}
 8001f8a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	6803      	ldr	r3, [r0, #0]
{
 8001f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f92:	079c      	lsls	r4, r3, #30
 8001f94:	d506      	bpl.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f96:	4c55      	ldr	r4, [pc, #340]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 8001f98:	6885      	ldr	r5, [r0, #8]
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fa0:	432a      	orrs	r2, r5
 8001fa2:	6062      	str	r2, [r4, #4]
 8001fa4:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	07d9      	lsls	r1, r3, #31
 8001fa8:	4606      	mov	r6, r0
 8001faa:	d531      	bpl.n	8002010 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	6842      	ldr	r2, [r0, #4]
 8001fae:	2a01      	cmp	r2, #1
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb4:	2a02      	cmp	r2, #2
 8001fb6:	bf0c      	ite	eq
 8001fb8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001fbc:	2302      	movne	r3, #2
 8001fbe:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	494a      	ldr	r1, [pc, #296]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 8001fc4:	6808      	ldr	r0, [r1, #0]
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4203      	tst	r3, r0
 8001fda:	d029      	beq.n	8002030 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4d43      	ldr	r5, [pc, #268]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 8001fde:	686b      	ldr	r3, [r5, #4]
 8001fe0:	f023 0303 	bic.w	r3, r3, #3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fd38 	bl	8000a5c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	6873      	ldr	r3, [r6, #4]
 8001fee:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001ff0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	d023      	beq.n	8002040 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_ClockConfig+0xa0>
 8001ffc:	e058      	b.n	80020b0 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f7fe fd2d 	bl	8000a5c <HAL_GetTick>
 8002002:	1bc0      	subs	r0, r0, r7
 8002004:	4540      	cmp	r0, r8
 8002006:	d859      	bhi.n	80020bc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002008:	686b      	ldr	r3, [r5, #4]
 800200a:	f013 0f0c 	tst.w	r3, #12
 800200e:	d1f6      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <HAL_RCC_ClockConfig+0x180>)
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	429c      	cmp	r4, r3
 800201a:	d217      	bcs.n	800204c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f023 0307 	bic.w	r3, r3, #7
 8002022:	4323      	orrs	r3, r4
 8002024:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	429c      	cmp	r4, r3
 800202e:	d00d      	beq.n	800204c <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe fd11 	bl	8000a5c <HAL_GetTick>
 800203a:	1bc0      	subs	r0, r0, r7
 800203c:	4540      	cmp	r0, r8
 800203e:	d83d      	bhi.n	80020bc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	686b      	ldr	r3, [r5, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d1f5      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
 800204a:	e7e1      	b.n	8002010 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	075a      	lsls	r2, r3, #29
 8002050:	d506      	bpl.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002052:	4926      	ldr	r1, [pc, #152]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 8002054:	68f0      	ldr	r0, [r6, #12]
 8002056:	684a      	ldr	r2, [r1, #4]
 8002058:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800205c:	4302      	orrs	r2, r0
 800205e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	071b      	lsls	r3, r3, #28
 8002062:	d507      	bpl.n	8002074 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 8002066:	6931      	ldr	r1, [r6, #16]
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800206e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002072:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002074:	f7ff ff44 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 800207a:	4601      	mov	r1, r0
 800207c:	22f0      	movs	r2, #240	; 0xf0
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	40d3      	lsrs	r3, r2
 800208e:	4818      	ldr	r0, [pc, #96]	; (80020f0 <HAL_RCC_ClockConfig+0x188>)
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_RCC_ClockConfig+0x18c>)
 8002092:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002094:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002096:	fa21 f303 	lsr.w	r3, r1, r3
 800209a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800209c:	f7fe fcae 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 80020a0:	2000      	movs	r0, #0
}
 80020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fcd9 	bl	8000a5c <HAL_GetTick>
 80020aa:	1bc0      	subs	r0, r0, r7
 80020ac:	4540      	cmp	r0, r8
 80020ae:	d805      	bhi.n	80020bc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	686b      	ldr	r3, [r5, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d1f5      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x13e>
 80020ba:	e7a9      	b.n	8002010 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 80020bc:	2003      	movs	r0, #3
 80020be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <HAL_RCC_ClockConfig+0x184>)
 80020cc:	6809      	ldr	r1, [r1, #0]
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	420b      	tst	r3, r1
 80020e0:	f47f af7c 	bne.w	8001fdc <HAL_RCC_ClockConfig+0x74>
 80020e4:	e7a4      	b.n	8002030 <HAL_RCC_ClockConfig+0xc8>
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08003f50 	.word	0x08003f50
 80020f4:	20000060 	.word	0x20000060

080020f8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80020f8:	4b01      	ldr	r3, [pc, #4]	; (8002100 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000060 	.word	0x20000060

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002118:	40d3      	lsrs	r3, r2
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	6810      	ldr	r0, [r2, #0]
}    
 8002122:	40d8      	lsrs	r0, r3
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	08003f60 	.word	0x08003f60
 8002130:	20000060 	.word	0x20000060

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002148:	40d3      	lsrs	r3, r2
 800214a:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	6810      	ldr	r0, [r2, #0]
} 
 8002152:	40d8      	lsrs	r0, r3
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	08003f60 	.word	0x08003f60
 8002160:	20000060 	.word	0x20000060

08002164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002168:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	03c5      	lsls	r5, r0, #15
{
 800216e:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002170:	d538      	bpl.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	00d1      	lsls	r1, r2, #3
 8002178:	d567      	bpl.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4d59      	ldr	r5, [pc, #356]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8002180:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	d570      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002186:	4d55      	ldr	r5, [pc, #340]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002188:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800218a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800218e:	d01f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002190:	6861      	ldr	r1, [r4, #4]
 8002192:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002196:	4293      	cmp	r3, r2
 8002198:	d01b      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219a:	6a29      	ldr	r1, [r5, #32]
 800219c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80021a4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a8:	4f4e      	ldr	r7, [pc, #312]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	443a      	add	r2, r7
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	f04f 0e01 	mov.w	lr, #1
 80021b6:	f8c2 e000 	str.w	lr, [r2]
 80021ba:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	443b      	add	r3, r7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021c8:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ca:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80021cc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021ce:	d461      	bmi.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80021d0:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021d2:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021d4:	6a13      	ldr	r3, [r2, #32]
 80021d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021da:	430b      	orrs	r3, r1
 80021dc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021de:	2e00      	cmp	r6, #0
 80021e0:	d153      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x126>
 80021e2:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e4:	07c5      	lsls	r5, r0, #31
 80021e6:	d506      	bpl.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021ea:	68a1      	ldr	r1, [r4, #8]
 80021ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	0681      	lsls	r1, r0, #26
 80021f8:	d506      	bpl.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fa:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021fc:	68e1      	ldr	r1, [r4, #12]
 80021fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002200:	f023 0310 	bic.w	r3, r3, #16
 8002204:	430b      	orrs	r3, r1
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002208:	0602      	lsls	r2, r0, #24
 800220a:	d506      	bpl.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800220c:	4a33      	ldr	r2, [pc, #204]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800220e:	6921      	ldr	r1, [r4, #16]
 8002210:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002212:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002216:	430b      	orrs	r3, r1
 8002218:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800221a:	04c3      	lsls	r3, r0, #19
 800221c:	d40d      	bmi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800221e:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8002222:	d007      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002226:	69a1      	ldr	r1, [r4, #24]
 8002228:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800222a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800222e:	430b      	orrs	r3, r1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002232:	2000      	movs	r0, #0
}
 8002234:	b003      	add	sp, #12
 8002236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800223a:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800223c:	6961      	ldr	r1, [r4, #20]
 800223e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002244:	430b      	orrs	r3, r1
 8002246:	6313      	str	r3, [r2, #48]	; 0x30
 8002248:	e7e9      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4d24      	ldr	r5, [pc, #144]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002252:	61da      	str	r2, [r3, #28]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 8002262:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	d48e      	bmi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002270:	f7fe fbf4 	bl	8000a5c <HAL_GetTick>
 8002274:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	05db      	lsls	r3, r3, #23
 800227a:	d484      	bmi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fbee 	bl	8000a5c <HAL_GetTick>
 8002280:	1bc0      	subs	r0, r0, r7
 8002282:	2864      	cmp	r0, #100	; 0x64
 8002284:	d9f7      	bls.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002286:	2003      	movs	r0, #3
 8002288:	e7d4      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	69d3      	ldr	r3, [r2, #28]
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	e7a6      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8002296:	f7fe fbe1 	bl	8000a5c <HAL_GetTick>
 800229a:	f04f 0902 	mov.w	r9, #2
 800229e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	e014      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022a2:	fa99 f3a9 	rbit	r3, r9
 80022a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80022a8:	fa99 f3a9 	rbit	r3, r9
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa07 f303 	lsl.w	r3, r7, r3
 80022b8:	4213      	tst	r3, r2
 80022ba:	d189      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe fbce 	bl	8000a5c <HAL_GetTick>
 80022c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c4:	eba0 0008 	sub.w	r0, r0, r8
 80022c8:	4298      	cmp	r0, r3
 80022ca:	d8dc      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80022cc:	fa99 f3a9 	rbit	r3, r9
 80022d0:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0e4      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80022d8:	6a2a      	ldr	r2, [r5, #32]
 80022da:	e7e5      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	10908100 	.word	0x10908100

080022e8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80022e8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2002      	movs	r0, #2
  }
}
 80022f2:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80022f4:	b349      	cbz	r1, 800234a <HAL_UART_Receive_IT+0x62>
 80022f6:	b342      	cbz	r2, 800234a <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 80022f8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d0f7      	beq.n	80022f0 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8002300:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002302:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8002308:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 800230c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002310:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8002314:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002318:	d027      	beq.n	800236a <HAL_UART_Receive_IT+0x82>
 800231a:	b9c3      	cbnz	r3, 800234e <HAL_UART_Receive_IT+0x66>
 800231c:	6903      	ldr	r3, [r0, #16]
 800231e:	b303      	cbz	r3, 8002362 <HAL_UART_Receive_IT+0x7a>
 8002320:	237f      	movs	r3, #127	; 0x7f
 8002322:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002326:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232a:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8002334:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002338:	f041 0101 	orr.w	r1, r1, #1
 800233c:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800233e:	6811      	ldr	r1, [r2, #0]
 8002340:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8002344:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002346:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002348:	4770      	bx	lr
      return HAL_ERROR;
 800234a:	2001      	movs	r0, #1
 800234c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800234e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002352:	d1e8      	bne.n	8002326 <HAL_UART_Receive_IT+0x3e>
 8002354:	6903      	ldr	r3, [r0, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0e2      	beq.n	8002320 <HAL_UART_Receive_IT+0x38>
 800235a:	233f      	movs	r3, #63	; 0x3f
 800235c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002360:	e7e1      	b.n	8002326 <HAL_UART_Receive_IT+0x3e>
 8002362:	23ff      	movs	r3, #255	; 0xff
 8002364:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002368:	e7dd      	b.n	8002326 <HAL_UART_Receive_IT+0x3e>
 800236a:	6903      	ldr	r3, [r0, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f8      	bne.n	8002362 <HAL_UART_Receive_IT+0x7a>
 8002370:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002374:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002378:	e7d5      	b.n	8002326 <HAL_UART_Receive_IT+0x3e>
 800237a:	bf00      	nop

0800237c <HAL_UART_TxCpltCallback>:
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <HAL_UART_RxCpltCallback>:
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop

08002384 <HAL_UART_ErrorCallback>:
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002388:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800238a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800238c:	2200      	movs	r2, #0
 800238e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8002392:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8002394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002398:	f7ff fff4 	bl	8002384 <HAL_UART_ErrorCallback>
 800239c:	bd08      	pop	{r3, pc}
 800239e:	bf00      	nop

080023a0 <UART_SetConfig>:
{
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a2:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a4:	6907      	ldr	r7, [r0, #16]
 80023a6:	6883      	ldr	r3, [r0, #8]
 80023a8:	6946      	ldr	r6, [r0, #20]
 80023aa:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023ac:	4a62      	ldr	r2, [pc, #392]	; (8002538 <UART_SetConfig+0x198>)
{
 80023ae:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b0:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023b2:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023b4:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b6:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023b8:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023ba:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023bc:	4313      	orrs	r3, r2
 80023be:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c0:	6862      	ldr	r2, [r4, #4]
 80023c2:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023c4:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	485d      	ldr	r0, [pc, #372]	; (800253c <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023cc:	4332      	orrs	r2, r6
 80023ce:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023d0:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023d2:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023d4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80023d8:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023da:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023dc:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023de:	d01b      	beq.n	8002418 <UART_SetConfig+0x78>
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <UART_SetConfig+0x1a0>)
 80023e2:	429c      	cmp	r4, r3
 80023e4:	d00a      	beq.n	80023fc <UART_SetConfig+0x5c>
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	429c      	cmp	r4, r3
 80023ec:	d006      	beq.n	80023fc <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80023f2:	d158      	bne.n	80024a6 <UART_SetConfig+0x106>
 80023f4:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80023f8:	60e3      	str	r3, [r4, #12]
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002400:	d053      	beq.n	80024aa <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002402:	f7ff fe7f 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8002406:	686b      	ldr	r3, [r5, #4]
 8002408:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800240c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002410:	b280      	uxth	r0, r0
 8002412:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002414:	2000      	movs	r0, #0
        break;
 8002416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <UART_SetConfig+0x1a4>)
 800241a:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <UART_SetConfig+0x1a8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002422:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	d051      	beq.n	80024ce <UART_SetConfig+0x12e>
    switch (clocksource)
 800242a:	2b08      	cmp	r3, #8
 800242c:	d83b      	bhi.n	80024a6 <UART_SetConfig+0x106>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <UART_SetConfig+0x94>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002403 	.word	0x08002403
 8002438:	080024a1 	.word	0x080024a1
 800243c:	08002487 	.word	0x08002487
 8002440:	080024a7 	.word	0x080024a7
 8002444:	0800246f 	.word	0x0800246f
 8002448:	080024a7 	.word	0x080024a7
 800244c:	080024a7 	.word	0x080024a7
 8002450:	080024a7 	.word	0x080024a7
 8002454:	08002459 	.word	0x08002459
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002458:	686a      	ldr	r2, [r5, #4]
 800245a:	4938      	ldr	r1, [pc, #224]	; (800253c <UART_SetConfig+0x19c>)
 800245c:	0853      	lsrs	r3, r2, #1
 800245e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002462:	fbb3 f3f2 	udiv	r3, r3, r2
 8002466:	b29b      	uxth	r3, r3
 8002468:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800246a:	2000      	movs	r0, #0
        break;
 800246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800246e:	f7ff fd47 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8002472:	686b      	ldr	r3, [r5, #4]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <UART_SetConfig+0x19c>)
 8002476:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800247a:	fbb0 f0f3 	udiv	r0, r0, r3
 800247e:	b280      	uxth	r0, r0
 8002480:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002482:	2000      	movs	r0, #0
        break;
 8002484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002486:	686a      	ldr	r2, [r5, #4]
 8002488:	492c      	ldr	r1, [pc, #176]	; (800253c <UART_SetConfig+0x19c>)
 800248a:	0853      	lsrs	r3, r2, #1
 800248c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002490:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002494:	fbb3 f3f2 	udiv	r3, r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800249c:	2000      	movs	r0, #0
        break;
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024a0:	f7ff fe48 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 80024a4:	e7e5      	b.n	8002472 <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 80024a6:	2001      	movs	r0, #1
  return ret;
 80024a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024aa:	f7ff fe2b 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024ae:	686a      	ldr	r2, [r5, #4]
 80024b0:	682c      	ldr	r4, [r5, #0]
 80024b2:	0853      	lsrs	r3, r2, #1
 80024b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80024b8:	fbb0 f0f2 	udiv	r0, r0, r2
 80024bc:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80024c0:	f020 000f 	bic.w	r0, r0, #15
 80024c4:	4303      	orrs	r3, r0
 80024c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c8:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80024ca:	60e3      	str	r3, [r4, #12]
 80024cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d890      	bhi.n	80023f4 <UART_SetConfig+0x54>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <UART_SetConfig+0x138>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024ab 	.word	0x080024ab
 80024dc:	080024fd 	.word	0x080024fd
 80024e0:	08002525 	.word	0x08002525
 80024e4:	080023f5 	.word	0x080023f5
 80024e8:	0800251f 	.word	0x0800251f
 80024ec:	080023f5 	.word	0x080023f5
 80024f0:	080023f5 	.word	0x080023f5
 80024f4:	080023f5 	.word	0x080023f5
 80024f8:	08002503 	.word	0x08002503
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024fc:	f7ff fe1a 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002500:	e7d5      	b.n	80024ae <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002502:	686b      	ldr	r3, [r5, #4]
 8002504:	085a      	lsrs	r2, r3, #1
 8002506:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8002512:	f022 020f 	bic.w	r2, r2, #15
 8002516:	4313      	orrs	r3, r2
 8002518:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800251a:	2000      	movs	r0, #0
        break;
 800251c:	e76c      	b.n	80023f8 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800251e:	f7ff fcef 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8002522:	e7c4      	b.n	80024ae <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002524:	686a      	ldr	r2, [r5, #4]
 8002526:	0853      	lsrs	r3, r2, #1
 8002528:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800252c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002530:	fbb3 f2f2 	udiv	r2, r3, r2
 8002534:	e7eb      	b.n	800250e <UART_SetConfig+0x16e>
 8002536:	bf00      	nop
 8002538:	efff69f3 	.word	0xefff69f3
 800253c:	40013800 	.word	0x40013800
 8002540:	40004400 	.word	0x40004400
 8002544:	40021000 	.word	0x40021000
 8002548:	08003f4c 	.word	0x08003f4c

0800254c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800254c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800254e:	07da      	lsls	r2, r3, #31
{
 8002550:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002552:	d506      	bpl.n	8002562 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002554:	6801      	ldr	r1, [r0, #0]
 8002556:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002558:	684a      	ldr	r2, [r1, #4]
 800255a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800255e:	4322      	orrs	r2, r4
 8002560:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002562:	079c      	lsls	r4, r3, #30
 8002564:	d506      	bpl.n	8002574 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002566:	6801      	ldr	r1, [r0, #0]
 8002568:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800256a:	684a      	ldr	r2, [r1, #4]
 800256c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002570:	4322      	orrs	r2, r4
 8002572:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002574:	0759      	lsls	r1, r3, #29
 8002576:	d506      	bpl.n	8002586 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002578:	6801      	ldr	r1, [r0, #0]
 800257a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800257c:	684a      	ldr	r2, [r1, #4]
 800257e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002582:	4322      	orrs	r2, r4
 8002584:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002586:	071a      	lsls	r2, r3, #28
 8002588:	d506      	bpl.n	8002598 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800258a:	6801      	ldr	r1, [r0, #0]
 800258c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800258e:	684a      	ldr	r2, [r1, #4]
 8002590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002594:	4322      	orrs	r2, r4
 8002596:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002598:	06dc      	lsls	r4, r3, #27
 800259a:	d506      	bpl.n	80025aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800259c:	6801      	ldr	r1, [r0, #0]
 800259e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025a0:	688a      	ldr	r2, [r1, #8]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a6:	4322      	orrs	r2, r4
 80025a8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025aa:	0699      	lsls	r1, r3, #26
 80025ac:	d506      	bpl.n	80025bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025ae:	6801      	ldr	r1, [r0, #0]
 80025b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80025b2:	688a      	ldr	r2, [r1, #8]
 80025b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b8:	4322      	orrs	r2, r4
 80025ba:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025bc:	065a      	lsls	r2, r3, #25
 80025be:	d509      	bpl.n	80025d4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025c0:	6801      	ldr	r1, [r0, #0]
 80025c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80025c4:	684a      	ldr	r2, [r1, #4]
 80025c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80025ca:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025d0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025d2:	d00b      	beq.n	80025ec <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	d506      	bpl.n	80025e6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025d8:	6802      	ldr	r2, [r0, #0]
 80025da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025dc:	6853      	ldr	r3, [r2, #4]
 80025de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025e2:	430b      	orrs	r3, r1
 80025e4:	6053      	str	r3, [r2, #4]
}
 80025e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ec:	684a      	ldr	r2, [r1, #4]
 80025ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80025f0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80025f4:	4322      	orrs	r2, r4
 80025f6:	604a      	str	r2, [r1, #4]
 80025f8:	e7ec      	b.n	80025d4 <UART_AdvFeatureConfig+0x88>
 80025fa:	bf00      	nop

080025fc <UART_WaitOnFlagUntilTimeout>:
{
 80025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002600:	9d08      	ldr	r5, [sp, #32]
 8002602:	4680      	mov	r8, r0
 8002604:	460f      	mov	r7, r1
 8002606:	4616      	mov	r6, r2
 8002608:	4699      	mov	r9, r3
 800260a:	f8d8 4000 	ldr.w	r4, [r8]
 800260e:	e001      	b.n	8002614 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8002610:	1c6b      	adds	r3, r5, #1
 8002612:	d10a      	bne.n	800262a <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002614:	69e0      	ldr	r0, [r4, #28]
 8002616:	ea37 0300 	bics.w	r3, r7, r0
 800261a:	bf0c      	ite	eq
 800261c:	2001      	moveq	r0, #1
 800261e:	2000      	movne	r0, #0
 8002620:	42b0      	cmp	r0, r6
 8002622:	d0f5      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8002624:	2000      	movs	r0, #0
}
 8002626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800262a:	b13d      	cbz	r5, 800263c <UART_WaitOnFlagUntilTimeout+0x40>
 800262c:	f7fe fa16 	bl	8000a5c <HAL_GetTick>
 8002630:	eba0 0009 	sub.w	r0, r0, r9
 8002634:	4285      	cmp	r5, r0
 8002636:	d2e8      	bcs.n	800260a <UART_WaitOnFlagUntilTimeout+0xe>
 8002638:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002642:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002644:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002646:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002648:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 800264c:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264e:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8002650:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002652:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8002656:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800265a:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 800265e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002662:	bf00      	nop

08002664 <HAL_UART_Transmit>:
{
 8002664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002668:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800266a:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 800266e:	2920      	cmp	r1, #32
{
 8002670:	b084      	sub	sp, #16
  if(huart->gState == HAL_UART_STATE_READY)
 8002672:	d003      	beq.n	800267c <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8002674:	2002      	movs	r0, #2
}
 8002676:	b004      	add	sp, #16
 8002678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((pData == NULL ) || (Size == 0U))
 800267c:	b395      	cbz	r5, 80026e4 <HAL_UART_Transmit+0x80>
 800267e:	b38a      	cbz	r2, 80026e4 <HAL_UART_Transmit+0x80>
 8002680:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002682:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002686:	2b01      	cmp	r3, #1
 8002688:	4604      	mov	r4, r0
 800268a:	d0f3      	beq.n	8002674 <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268c:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 800268e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002690:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	66e0      	str	r0, [r4, #108]	; 0x6c
    __HAL_LOCK(huart);
 8002694:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002698:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800269c:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800269e:	f7fe f9dd 	bl	8000a5c <HAL_GetTick>
    huart->TxXferSize = Size;
 80026a2:	9a03      	ldr	r2, [sp, #12]
 80026a4:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80026a8:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 80026aa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80026ae:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
 80026b2:	b2b6      	uxth	r6, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	4643      	mov	r3, r8
 80026b6:	2200      	movs	r2, #0
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	4620      	mov	r0, r4
    while(huart->TxXferCount > 0U)
 80026bc:	b306      	cbz	r6, 8002700 <HAL_UART_Transmit+0x9c>
      huart->TxXferCount--;
 80026be:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c2:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80026c4:	3e01      	subs	r6, #1
 80026c6:	b2b6      	uxth	r6, r6
 80026c8:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026cc:	f7ff ff96 	bl	80025fc <UART_WaitOnFlagUntilTimeout>
 80026d0:	b9a0      	cbnz	r0, 80026fc <HAL_UART_Transmit+0x98>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d2:	68a3      	ldr	r3, [r4, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d006      	beq.n	80026e8 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	782a      	ldrb	r2, [r5, #0]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
 80026e0:	3501      	adds	r5, #1
 80026e2:	e7e4      	b.n	80026ae <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
 80026e6:	e7c6      	b.n	8002676 <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e8:	6923      	ldr	r3, [r4, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f5      	bne.n	80026da <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026ee:	f835 3b02 	ldrh.w	r3, [r5], #2
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80026fa:	e7d8      	b.n	80026ae <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 80026fc:	2003      	movs	r0, #3
 80026fe:	e7ba      	b.n	8002676 <HAL_UART_Transmit+0x12>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002700:	9700      	str	r7, [sp, #0]
 8002702:	4632      	mov	r2, r6
 8002704:	2140      	movs	r1, #64	; 0x40
 8002706:	f7ff ff79 	bl	80025fc <UART_WaitOnFlagUntilTimeout>
 800270a:	2800      	cmp	r0, #0
 800270c:	d1f6      	bne.n	80026fc <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_READY;
 800270e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002710:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8002714:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8002718:	e7ad      	b.n	8002676 <HAL_UART_Transmit+0x12>
 800271a:	bf00      	nop

0800271c <UART_CheckIdleState>:
{
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	2500      	movs	r5, #0
{
 8002722:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002726:	f7fe f999 	bl	8000a5c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8002730:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002732:	d40c      	bmi.n	800274e <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	075b      	lsls	r3, r3, #29
 8002738:	d417      	bmi.n	800276a <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 800273a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800273c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800273e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002742:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002746:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800274a:	b002      	add	sp, #8
 800274c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800274e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	462a      	mov	r2, r5
 8002756:	4603      	mov	r3, r0
 8002758:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff ff4d 	bl	80025fc <UART_WaitOnFlagUntilTimeout>
 8002762:	b180      	cbz	r0, 8002786 <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8002764:	2003      	movs	r0, #3
}
 8002766:	b002      	add	sp, #8
 8002768:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800276a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	4633      	mov	r3, r6
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff ff3f 	bl	80025fc <UART_WaitOnFlagUntilTimeout>
 800277e:	2800      	cmp	r0, #0
 8002780:	d0db      	beq.n	800273a <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8002782:	2003      	movs	r0, #3
 8002784:	e7ef      	b.n	8002766 <UART_CheckIdleState+0x4a>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	e7d4      	b.n	8002734 <UART_CheckIdleState+0x18>
 800278a:	bf00      	nop

0800278c <HAL_UART_Init>:
  if(huart == NULL)
 800278c:	b390      	cbz	r0, 80027f4 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 800278e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002792:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002794:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002798:	4604      	mov	r4, r0
 800279a:	b303      	cbz	r3, 80027de <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 800279c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800279e:	2324      	movs	r3, #36	; 0x24
 80027a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fdf7 	bl	80023a0 <UART_SetConfig>
 80027b2:	2801      	cmp	r0, #1
 80027b4:	d018      	beq.n	80027e8 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027b8:	b9c3      	cbnz	r3, 80027ec <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80027d2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80027da:	f7ff bf9f 	b.w	800271c <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 80027de:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80027e2:	f001 fa29 	bl	8003c38 <HAL_UART_MspInit>
 80027e6:	e7d9      	b.n	800279c <HAL_UART_Init+0x10>
}
 80027e8:	2001      	movs	r0, #1
 80027ea:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fead 	bl	800254c <UART_AdvFeatureConfig>
 80027f2:	e7e2      	b.n	80027ba <HAL_UART_Init+0x2e>
}
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027f8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027fc:	2b21      	cmp	r3, #33	; 0x21
 80027fe:	d001      	beq.n	8002804 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002800:	2002      	movs	r0, #2
  }
}
 8002802:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002804:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002808:	b29b      	uxth	r3, r3
 800280a:	b18b      	cbz	r3, 8002830 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	6883      	ldr	r3, [r0, #8]
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d018      	beq.n	8002846 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002814:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002816:	6802      	ldr	r2, [r0, #0]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002820:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002824:	3b01      	subs	r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002838:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002840:	4618      	mov	r0, r3
 8002842:	6011      	str	r1, [r2, #0]
 8002844:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	6903      	ldr	r3, [r0, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e3      	bne.n	8002814 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800284c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002858:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800285a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800285c:	e7e0      	b.n	8002820 <UART_Transmit_IT+0x28>
 800285e:	bf00      	nop

08002860 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002860:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002862:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002866:	2b22      	cmp	r3, #34	; 0x22
 8002868:	d006      	beq.n	8002878 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800286a:	6802      	ldr	r2, [r0, #0]
 800286c:	6993      	ldr	r3, [r2, #24]
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002874:	2002      	movs	r0, #2
 8002876:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002878:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800287c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 800287e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002882:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002886:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002888:	d01d      	beq.n	80028c6 <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800288a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800288c:	400b      	ands	r3, r1
 800288e:	1c51      	adds	r1, r2, #1
 8002890:	6541      	str	r1, [r0, #84]	; 0x54
 8002892:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8002894:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002898:	3c01      	subs	r4, #1
 800289a:	b2a4      	uxth	r4, r4
 800289c:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80028a0:	b10c      	cbz	r4, 80028a6 <UART_Receive_IT+0x46>
    return HAL_OK;
 80028a2:	2000      	movs	r0, #0
  }
}
 80028a4:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80028ae:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b0:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80028b2:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	f021 0101 	bic.w	r1, r1, #1
 80028b8:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80028ba:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80028be:	f7ff fd5f 	bl	8002380 <HAL_UART_RxCpltCallback>
 80028c2:	4620      	mov	r0, r4
 80028c4:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	6902      	ldr	r2, [r0, #16]
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d1de      	bne.n	800288a <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80028cc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80028ce:	400b      	ands	r3, r1
 80028d0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80028d4:	6542      	str	r2, [r0, #84]	; 0x54
 80028d6:	e7dd      	b.n	8002894 <UART_Receive_IT+0x34>

080028d8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028dc:	6819      	ldr	r1, [r3, #0]
{
 80028de:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80028e0:	0715      	lsls	r5, r2, #28
{
 80028e2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80028e4:	d110      	bne.n	8002908 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e6:	0696      	lsls	r6, r2, #26
 80028e8:	d45b      	bmi.n	80029a2 <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 80028ea:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80028ec:	02d5      	lsls	r5, r2, #11
 80028ee:	d501      	bpl.n	80028f4 <HAL_UART_IRQHandler+0x1c>
 80028f0:	0240      	lsls	r0, r0, #9
 80028f2:	d47f      	bmi.n	80029f4 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f4:	0616      	lsls	r6, r2, #24
 80028f6:	d502      	bpl.n	80028fe <HAL_UART_IRQHandler+0x26>
 80028f8:	060d      	lsls	r5, r1, #24
 80028fa:	f100 808c 	bmi.w	8002a16 <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028fe:	0650      	lsls	r0, r2, #25
 8002900:	d501      	bpl.n	8002906 <HAL_UART_IRQHandler+0x2e>
 8002902:	064a      	lsls	r2, r1, #25
 8002904:	d464      	bmi.n	80029d0 <HAL_UART_IRQHandler+0xf8>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8002908:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800290a:	f010 0501 	ands.w	r5, r0, #1
 800290e:	d04e      	beq.n	80029ae <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002910:	07d6      	lsls	r6, r2, #31
 8002912:	d507      	bpl.n	8002924 <HAL_UART_IRQHandler+0x4c>
 8002914:	05c8      	lsls	r0, r1, #23
 8002916:	d505      	bpl.n	8002924 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002918:	2001      	movs	r0, #1
 800291a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800291c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800291e:	f040 0001 	orr.w	r0, r0, #1
 8002922:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002924:	0796      	lsls	r6, r2, #30
 8002926:	d548      	bpl.n	80029ba <HAL_UART_IRQHandler+0xe2>
 8002928:	b13d      	cbz	r5, 800293a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800292a:	2002      	movs	r0, #2
 800292c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800292e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002930:	f040 0004 	orr.w	r0, r0, #4
 8002934:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002936:	0750      	lsls	r0, r2, #29
 8002938:	d443      	bmi.n	80029c2 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800293a:	0710      	lsls	r0, r2, #28
 800293c:	d503      	bpl.n	8002946 <HAL_UART_IRQHandler+0x6e>
 800293e:	068e      	lsls	r6, r1, #26
 8002940:	d451      	bmi.n	80029e6 <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002942:	2d00      	cmp	r5, #0
 8002944:	d14f      	bne.n	80029e6 <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002946:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002948:	2800      	cmp	r0, #0
 800294a:	d0dc      	beq.n	8002906 <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800294c:	0690      	lsls	r0, r2, #26
 800294e:	d501      	bpl.n	8002954 <HAL_UART_IRQHandler+0x7c>
 8002950:	0689      	lsls	r1, r1, #26
 8002952:	d465      	bmi.n	8002a20 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002954:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002956:	0712      	lsls	r2, r2, #28
 8002958:	d403      	bmi.n	8002962 <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800295a:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800295c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002960:	d063      	beq.n	8002a2a <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002968:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800296c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002974:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	0656      	lsls	r6, r2, #25
 800297c:	d547      	bpl.n	8002a0e <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800297e:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002980:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002988:	2800      	cmp	r0, #0
 800298a:	d040      	beq.n	8002a0e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_UART_IRQHandler+0x15c>)
 800298e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002990:	f7fe fece 	bl	8001730 <HAL_DMA_Abort_IT>
 8002994:	2800      	cmp	r0, #0
 8002996:	d0b6      	beq.n	8002906 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002998:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029a0:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a2:	068d      	lsls	r5, r1, #26
 80029a4:	d5a1      	bpl.n	80028ea <HAL_UART_IRQHandler+0x12>
}
 80029a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80029aa:	f7ff bf59 	b.w	8002860 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80029ae:	f411 7f90 	tst.w	r1, #288	; 0x120
 80029b2:	d09b      	beq.n	80028ec <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029b4:	07d6      	lsls	r6, r2, #31
 80029b6:	d5b5      	bpl.n	8002924 <HAL_UART_IRQHandler+0x4c>
 80029b8:	e7ac      	b.n	8002914 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ba:	0756      	lsls	r6, r2, #29
 80029bc:	d5bd      	bpl.n	800293a <HAL_UART_IRQHandler+0x62>
 80029be:	2d00      	cmp	r5, #0
 80029c0:	d0bb      	beq.n	800293a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80029c2:	2004      	movs	r0, #4
 80029c4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80029c8:	f040 0002 	orr.w	r0, r0, #2
 80029cc:	66e0      	str	r0, [r4, #108]	; 0x6c
 80029ce:	e7b4      	b.n	800293a <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029d0:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80029d2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d8:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80029da:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80029dc:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80029e0:	f7ff fccc 	bl	800237c <HAL_UART_TxCpltCallback>
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80029e6:	2008      	movs	r0, #8
 80029e8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80029ec:	f040 0008 	orr.w	r0, r0, #8
 80029f0:	66e0      	str	r0, [r4, #108]	; 0x6c
 80029f2:	e7a8      	b.n	8002946 <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 80029f4:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029f6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80029fa:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80029fc:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 80029fe:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002a02:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8002a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002a0a:	f000 b815 	b.w	8002a38 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff fcb8 	bl	8002384 <HAL_UART_ErrorCallback>
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8002a16:	4620      	mov	r0, r4
}
 8002a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002a1c:	f7ff beec 	b.w	80027f8 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff ff1d 	bl	8002860 <UART_Receive_IT>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	e794      	b.n	8002954 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff fcaa 	bl	8002384 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	08002389 	.word	0x08002389

08002a38 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <Int2String.part.0>:
	if (maxlen == 0)
		return 0;

	int numwritten = 0;

	if (val < 0)
 8002a3c:	2900      	cmp	r1, #0
uint8_t Int2String(char* output_string, int32_t val, uint8_t maxlen)
 8002a3e:	b4f0      	push	{r4, r5, r6, r7}
	if (val < 0)
 8002a40:	db26      	blt.n	8002a90 <Int2String.part.0+0x54>
	int numwritten = 0;
 8002a42:	2600      	movs	r6, #0
		val = -val;
		numwritten = 1;
	}

	uint8_t digits = 0;
	if (val < 10)
 8002a44:	2909      	cmp	r1, #9
 8002a46:	dd07      	ble.n	8002a58 <Int2String.part.0+0x1c>
		digits = 1;
	else if (val < 100)
 8002a48:	2963      	cmp	r1, #99	; 0x63
 8002a4a:	dc1c      	bgt.n	8002a86 <Int2String.part.0+0x4a>
		digits = 2;
 8002a4c:	2702      	movs	r7, #2
	else if (val < 10000)
		digits = 4;
	else
		digits = 5;

	if (digits > maxlen)
 8002a4e:	42ba      	cmp	r2, r7
 8002a50:	d205      	bcs.n	8002a5e <Int2String.part.0+0x22>
		return 0; // error - not enough space in output string!
 8002a52:	2000      	movs	r0, #0
		writepos--;
		numwritten++;
	}

	return numwritten;
}
 8002a54:	bcf0      	pop	{r4, r5, r6, r7}
 8002a56:	4770      	bx	lr
		digits = 1;
 8002a58:	2701      	movs	r7, #1
	if (digits > maxlen)
 8002a5a:	42ba      	cmp	r2, r7
 8002a5c:	d3f9      	bcc.n	8002a52 <Int2String.part.0+0x16>
		output_string[writepos-1] = (char) ((val % 10) + 48);
 8002a5e:	4d14      	ldr	r5, [pc, #80]	; (8002ab0 <Int2String.part.0+0x74>)
 8002a60:	19c2      	adds	r2, r0, r7
 8002a62:	fb85 3401 	smull	r3, r4, r5, r1
 8002a66:	17cb      	asrs	r3, r1, #31
 8002a68:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8002a6c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8002a70:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
 8002a74:	3130      	adds	r1, #48	; 0x30
 8002a76:	f802 1d01 	strb.w	r1, [r2, #-1]!
	while (writepos > 0)
 8002a7a:	4282      	cmp	r2, r0
		val /= 10;
 8002a7c:	4619      	mov	r1, r3
	while (writepos > 0)
 8002a7e:	d1f0      	bne.n	8002a62 <Int2String.part.0+0x26>
	return numwritten;
 8002a80:	19f0      	adds	r0, r6, r7
}
 8002a82:	bcf0      	pop	{r4, r5, r6, r7}
 8002a84:	4770      	bx	lr
	else if (val < 1000)
 8002a86:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002a8a:	da09      	bge.n	8002aa0 <Int2String.part.0+0x64>
		digits = 3;
 8002a8c:	2703      	movs	r7, #3
 8002a8e:	e7e4      	b.n	8002a5a <Int2String.part.0+0x1e>
		maxlen--;
 8002a90:	3a01      	subs	r2, #1
		output_string[0] = '-';
 8002a92:	232d      	movs	r3, #45	; 0x2d
		maxlen--;
 8002a94:	b2d2      	uxtb	r2, r2
		val = -val;
 8002a96:	4249      	negs	r1, r1
		output_string[0] = '-';
 8002a98:	f800 3b01 	strb.w	r3, [r0], #1
		numwritten = 1;
 8002a9c:	2601      	movs	r6, #1
 8002a9e:	e7d1      	b.n	8002a44 <Int2String.part.0+0x8>
	else if (val < 10000)
 8002aa0:	f242 770f 	movw	r7, #9999	; 0x270f
		digits = 5;
 8002aa4:	42b9      	cmp	r1, r7
 8002aa6:	bfd4      	ite	le
 8002aa8:	2704      	movle	r7, #4
 8002aaa:	2705      	movgt	r7, #5
 8002aac:	e7d5      	b.n	8002a5a <Int2String.part.0+0x1e>
 8002aae:	bf00      	nop
 8002ab0:	66666667 	.word	0x66666667

08002ab4 <SystemClock_Config>:
{
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ab8:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aba:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002abc:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002abe:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ac0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac4:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002ac8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002aca:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002acc:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ace:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ad0:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad2:	f7fe ff47 	bl	8001964 <HAL_RCC_OscConfig>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ad6:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ade:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae0:	9200      	str	r2, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae4:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae8:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aea:	f7ff fa3d 	bl	8001f68 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002aee:	2281      	movs	r2, #129	; 0x81
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV128;
 8002af0:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002af6:	9205      	str	r2, [sp, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV128;
 8002af8:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002afa:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002afc:	f7ff fb32 	bl	8002164 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b00:	f7ff fafa 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <SystemClock_Config+0x74>)
 8002b06:	fba3 3000 	umull	r3, r0, r3, r0
 8002b0a:	0980      	lsrs	r0, r0, #6
 8002b0c:	f7fe fde6 	bl	80016dc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b10:	2004      	movs	r0, #4
 8002b12:	f7fe fdfd 	bl	8001710 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b16:	4622      	mov	r2, r4
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	f7fe fd9b 	bl	8001658 <HAL_NVIC_SetPriority>
}
 8002b22:	b017      	add	sp, #92	; 0x5c
 8002b24:	bd30      	pop	{r4, r5, pc}
 8002b26:	bf00      	nop
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <Disable_Digits>:
{
 8002b2c:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET); //1
 8002b2e:	4c0c      	ldr	r4, [pc, #48]	; (8002b60 <Disable_Digits+0x34>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	4620      	mov	r0, r4
 8002b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b38:	f7fe ff0e 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET); //2
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2110      	movs	r1, #16
 8002b42:	f7fe ff09 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET); //3
 8002b46:	4620      	mov	r0, r4
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	f7fe ff04 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET); //4
 8002b50:	4620      	mov	r0, r4
 8002b52:	2201      	movs	r2, #1
 8002b54:	2108      	movs	r1, #8
}
 8002b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET); //4
 8002b5a:	f7fe befd 	b.w	8001958 <HAL_GPIO_WritePin>
 8002b5e:	bf00      	nop
 8002b60:	48000400 	.word	0x48000400

08002b64 <set_all>:
{
 8002b64:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 8002b66:	2201      	movs	r2, #1
 8002b68:	2120      	movs	r1, #32
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f7fe fef3 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002b72:	2201      	movs	r2, #1
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7a:	f7fe feed 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b86:	f7fe fee7 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <set_all+0x5c>)
 8002b90:	f7fe fee2 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002b94:	2201      	movs	r2, #1
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <set_all+0x60>)
 8002b9a:	f7fe fedd 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba8:	f7fe fed6 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002bba:	f7fe becd 	b.w	8001958 <HAL_GPIO_WritePin>
 8002bbe:	bf00      	nop
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	48000800 	.word	0x48000800

08002bc8 <reset_all>:
{
 8002bc8:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2120      	movs	r1, #32
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd2:	f7fe fec1 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bde:	f7fe febb 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 8002be2:	2200      	movs	r2, #0
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bea:	f7fe feb5 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET); //4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2140      	movs	r1, #64	; 0x40
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <reset_all+0x5c>)
 8002bf4:	f7fe feb0 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET); //5
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	480a      	ldr	r0, [pc, #40]	; (8002c28 <reset_all+0x60>)
 8002bfe:	f7fe feab 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET); //6
 8002c02:	2200      	movs	r2, #0
 8002c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0c:	f7fe fea4 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); //7
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); //7
 8002c1e:	f7fe be9b 	b.w	8001958 <HAL_GPIO_WritePin>
 8002c22:	bf00      	nop
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800

08002c2c <Digit_Maker>:
{
 8002c2c:	b508      	push	{r3, lr}
	switch (digit)
 8002c2e:	2809      	cmp	r0, #9
 8002c30:	d814      	bhi.n	8002c5c <Digit_Maker+0x30>
 8002c32:	e8df f000 	tbb	[pc, r0]
 8002c36:	051d      	.short	0x051d
 8002c38:	523e3827 	.word	0x523e3827
 8002c3c:	156b6259 	.word	0x156b6259
		set_all();
 8002c40:	f7ff ff90 	bl	8002b64 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 8002c44:	2200      	movs	r2, #0
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4c:	f7fe fe84 	bl	8001958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 8002c50:	2200      	movs	r2, #0
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c58:	f7fe fe7e 	bl	8001958 <HAL_GPIO_WritePin>
}
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	bd08      	pop	{r3, pc}
		reset_all();
 8002c60:	f7ff ffb2 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002c64:	2201      	movs	r2, #1
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	482a      	ldr	r0, [pc, #168]	; (8002d14 <Digit_Maker+0xe8>)
 8002c6a:	f7fe fe75 	bl	8001958 <HAL_GPIO_WritePin>
		break;
 8002c6e:	e7f5      	b.n	8002c5c <Digit_Maker+0x30>
		reset_all();
 8002c70:	f7ff ffaa 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 8002c74:	2201      	movs	r2, #1
 8002c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f7fe fe6b 	bl	8001958 <HAL_GPIO_WritePin>
		break;
 8002c82:	e7eb      	b.n	8002c5c <Digit_Maker+0x30>
		reset_all();
 8002c84:	f7ff ffa0 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002c90:	f7fe fe62 	bl	8001958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002c94:	2201      	movs	r2, #1
 8002c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f7fe fe5b 	bl	8001958 <HAL_GPIO_WritePin>
}
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	bd08      	pop	{r3, pc}
		reset_all();
 8002ca6:	f7ff ff8f 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002caa:	2201      	movs	r2, #1
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	4819      	ldr	r0, [pc, #100]	; (8002d14 <Digit_Maker+0xe8>)
 8002cb0:	e7ee      	b.n	8002c90 <Digit_Maker+0x64>
		reset_all();
 8002cb2:	f7ff ff89 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2120      	movs	r1, #32
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f7fe fe4b 	bl	8001958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8002cc2:	4815      	ldr	r0, [pc, #84]	; (8002d18 <Digit_Maker+0xec>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2140      	movs	r1, #64	; 0x40
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002cc8:	f7fe fe46 	bl	8001958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	4810      	ldr	r0, [pc, #64]	; (8002d14 <Digit_Maker+0xe8>)
 8002cd2:	f7fe fe41 	bl	8001958 <HAL_GPIO_WritePin>
}
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	bd08      	pop	{r3, pc}
		reset_all();
 8002cda:	f7ff ff75 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce6:	e7ef      	b.n	8002cc8 <Digit_Maker+0x9c>
		reset_all();
 8002ce8:	f7ff ff6e 	bl	8002bc8 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002cec:	2201      	movs	r2, #1
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f7fe fe30 	bl	8001958 <HAL_GPIO_WritePin>
		break;
 8002cf8:	e7b0      	b.n	8002c5c <Digit_Maker+0x30>
		set_all();
 8002cfa:	f7ff ff33 	bl	8002b64 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2120      	movs	r1, #32
 8002d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d06:	f7fe fe27 	bl	8001958 <HAL_GPIO_WritePin>
 8002d0a:	e79b      	b.n	8002c44 <Digit_Maker+0x18>
		reset_all();
 8002d0c:	f7ff ff5c 	bl	8002bc8 <reset_all>
		break;
 8002d10:	e7a4      	b.n	8002c5c <Digit_Maker+0x30>
 8002d12:	bf00      	nop
 8002d14:	48000800 	.word	0x48000800
 8002d18:	48000400 	.word	0x48000400

08002d1c <Number_Display>:
{
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	b085      	sub	sp, #20
 8002d22:	4693      	mov	fp, r2
	int d3cplt = 0;
 8002d24:	f04f 0800 	mov.w	r8, #0
 8002d28:	4c6f      	ldr	r4, [pc, #444]	; (8002ee8 <Number_Display+0x1cc>)
 8002d2a:	4e70      	ldr	r6, [pc, #448]	; (8002eec <Number_Display+0x1d0>)
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8002d2c:	4f70      	ldr	r7, [pc, #448]	; (8002ef0 <Number_Display+0x1d4>)
	int d1cplt = 0;
 8002d2e:	f8cd b004 	str.w	fp, [sp, #4]
{
 8002d32:	4689      	mov	r9, r1
 8002d34:	9303      	str	r3, [sp, #12]
	int d2cplt = 0;
 8002d36:	46c2      	mov	sl, r8
	int d1cplt = 0;
 8002d38:	4642      	mov	r2, r8
 8002d3a:	4683      	mov	fp, r0
		if(d1==0)
 8002d3c:	f1bb 0f00 	cmp.w	fp, #0
 8002d40:	d02b      	beq.n	8002d9a <Number_Display+0x7e>
	if (LEDmsecFlag==1 && d1cplt==0)
 8002d42:	7825      	ldrb	r5, [r4, #0]
 8002d44:	b2ed      	uxtb	r5, r5
 8002d46:	2d01      	cmp	r5, #1
 8002d48:	d048      	beq.n	8002ddc <Number_Display+0xc0>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002d4a:	7821      	ldrb	r1, [r4, #0]
 8002d4c:	2901      	cmp	r1, #1
 8002d4e:	d067      	beq.n	8002e20 <Number_Display+0x104>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002d50:	7821      	ldrb	r1, [r4, #0]
 8002d52:	2901      	cmp	r1, #1
 8002d54:	d179      	bne.n	8002e4a <Number_Display+0x12e>
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d165      	bne.n	8002e26 <Number_Display+0x10a>
 8002d5a:	f1ba 0f00 	cmp.w	sl, #0
 8002d5e:	d02c      	beq.n	8002dba <Number_Display+0x9e>
 8002d60:	f1b8 0f00 	cmp.w	r8, #0
 8002d64:	d10b      	bne.n	8002d7e <Number_Display+0x62>
		LEDmsecFlag = 0;
 8002d66:	f884 8000 	strb.w	r8, [r4]
		Disable_Digits();
 8002d6a:	f7ff fedf 	bl	8002b2c <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8002d6e:	4638      	mov	r0, r7
 8002d70:	4642      	mov	r2, r8
 8002d72:	2120      	movs	r1, #32
 8002d74:	f7fe fdf0 	bl	8001958 <HAL_GPIO_WritePin>
				Digit_Maker(d3);
 8002d78:	9801      	ldr	r0, [sp, #4]
 8002d7a:	f7ff ff57 	bl	8002c2c <Digit_Maker>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002d7e:	7822      	ldrb	r2, [r4, #0]
 8002d80:	2a01      	cmp	r2, #1
 8002d82:	f000 80a0 	beq.w	8002ec6 <Number_Display+0x1aa>
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8002d86:	7831      	ldrb	r1, [r6, #0]
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002d88:	f04f 0801 	mov.w	r8, #1
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8002d8c:	2901      	cmp	r1, #1
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002d8e:	46c2      	mov	sl, r8
 8002d90:	4642      	mov	r2, r8
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8002d92:	d11c      	bne.n	8002dce <Number_Display+0xb2>
}
 8002d94:	b005      	add	sp, #20
 8002d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da0:	4638      	mov	r0, r7
 8002da2:	f7fe fdd9 	bl	8001958 <HAL_GPIO_WritePin>
			if(d2==0)
 8002da6:	f1b9 0f00 	cmp.w	r9, #0
 8002daa:	d03e      	beq.n	8002e2a <Number_Display+0x10e>
	if (LEDmsecFlag==1 && d1cplt==0)
 8002dac:	7822      	ldrb	r2, [r4, #0]
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002dae:	7822      	ldrb	r2, [r4, #0]
 8002db0:	2a01      	cmp	r2, #1
 8002db2:	d025      	beq.n	8002e00 <Number_Display+0xe4>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002db4:	7822      	ldrb	r2, [r4, #0]
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	d0cf      	beq.n	8002d5a <Number_Display+0x3e>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002dba:	7822      	ldrb	r2, [r4, #0]
 8002dbc:	2a01      	cmp	r2, #1
 8002dbe:	d102      	bne.n	8002dc6 <Number_Display+0xaa>
 8002dc0:	f1ba 0f00 	cmp.w	sl, #0
 8002dc4:	d125      	bne.n	8002e12 <Number_Display+0xf6>
 8002dc6:	2201      	movs	r2, #1
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8002dc8:	7831      	ldrb	r1, [r6, #0]
 8002dca:	2901      	cmp	r1, #1
 8002dcc:	d0e2      	beq.n	8002d94 <Number_Display+0x78>
 8002dce:	4949      	ldr	r1, [pc, #292]	; (8002ef4 <Number_Display+0x1d8>)
 8002dd0:	7809      	ldrb	r1, [r1, #0]
 8002dd2:	2901      	cmp	r1, #1
 8002dd4:	d1b2      	bne.n	8002d3c <Number_Display+0x20>
}
 8002dd6:	b005      	add	sp, #20
 8002dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (LEDmsecFlag==1 && d1cplt==0)
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d1e6      	bne.n	8002dae <Number_Display+0x92>
		LEDmsecFlag = 0;
 8002de0:	7022      	strb	r2, [r4, #0]
 8002de2:	9202      	str	r2, [sp, #8]
		Disable_Digits();
 8002de4:	f7ff fea2 	bl	8002b2c <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8002de8:	9a02      	ldr	r2, [sp, #8]
 8002dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dee:	4638      	mov	r0, r7
 8002df0:	f7fe fdb2 	bl	8001958 <HAL_GPIO_WritePin>
				Digit_Maker(d1);
 8002df4:	4658      	mov	r0, fp
 8002df6:	f7ff ff19 	bl	8002c2c <Digit_Maker>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002dfa:	7822      	ldrb	r2, [r4, #0]
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	d1d9      	bne.n	8002db4 <Number_Display+0x98>
 8002e00:	f1ba 0f00 	cmp.w	sl, #0
 8002e04:	d03d      	beq.n	8002e82 <Number_Display+0x166>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002e06:	7822      	ldrb	r2, [r4, #0]
 8002e08:	2a01      	cmp	r2, #1
 8002e0a:	d0a9      	beq.n	8002d60 <Number_Display+0x44>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002e0c:	7822      	ldrb	r2, [r4, #0]
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d102      	bne.n	8002e18 <Number_Display+0xfc>
 8002e12:	f1b8 0f00 	cmp.w	r8, #0
 8002e16:	d156      	bne.n	8002ec6 <Number_Display+0x1aa>
 8002e18:	f04f 0a01 	mov.w	sl, #1
 8002e1c:	4652      	mov	r2, sl
 8002e1e:	e7d3      	b.n	8002dc8 <Number_Display+0xac>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002e20:	2a01      	cmp	r2, #1
 8002e22:	d03b      	beq.n	8002e9c <Number_Display+0x180>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002e24:	7821      	ldrb	r1, [r4, #0]
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002e26:	7821      	ldrb	r1, [r4, #0]
 8002e28:	e7ce      	b.n	8002dc8 <Number_Display+0xac>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f7fe fd92 	bl	8001958 <HAL_GPIO_WritePin>
				if(d3==0)
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	b173      	cbz	r3, 8002e56 <Number_Display+0x13a>
	if (LEDmsecFlag==1 && d1cplt==0)
 8002e38:	7822      	ldrb	r2, [r4, #0]
 8002e3a:	2a01      	cmp	r2, #1
 8002e3c:	d017      	beq.n	8002e6e <Number_Display+0x152>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002e3e:	7822      	ldrb	r2, [r4, #0]
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002e40:	7822      	ldrb	r2, [r4, #0]
 8002e42:	2a01      	cmp	r2, #1
 8002e44:	d08c      	beq.n	8002d60 <Number_Display+0x44>
			d1cplt = 1;
 8002e46:	2201      	movs	r2, #1
				d2cplt = 1;
 8002e48:	4692      	mov	sl, r2
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002e4a:	7821      	ldrb	r1, [r4, #0]
 8002e4c:	2901      	cmp	r1, #1
 8002e4e:	d1bb      	bne.n	8002dc8 <Number_Display+0xac>
 8002e50:	2a01      	cmp	r2, #1
 8002e52:	d1b9      	bne.n	8002dc8 <Number_Display+0xac>
 8002e54:	e7b4      	b.n	8002dc0 <Number_Display+0xa4>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8002e56:	2201      	movs	r2, #1
 8002e58:	2120      	movs	r1, #32
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f7fe fd7c 	bl	8001958 <HAL_GPIO_WritePin>
	if (LEDmsecFlag==1 && d1cplt==0)
 8002e60:	f894 8000 	ldrb.w	r8, [r4]
 8002e64:	fa5f f888 	uxtb.w	r8, r8
 8002e68:	f1b8 0f01 	cmp.w	r8, #1
 8002e6c:	d122      	bne.n	8002eb4 <Number_Display+0x198>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002e6e:	7822      	ldrb	r2, [r4, #0]
 8002e70:	2a01      	cmp	r2, #1
 8002e72:	d0c8      	beq.n	8002e06 <Number_Display+0xea>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002e74:	7822      	ldrb	r2, [r4, #0]
 8002e76:	2a01      	cmp	r2, #1
 8002e78:	f43f af72 	beq.w	8002d60 <Number_Display+0x44>
 8002e7c:	f04f 0a01 	mov.w	sl, #1
 8002e80:	e79b      	b.n	8002dba <Number_Display+0x9e>
		LEDmsecFlag = 0;
 8002e82:	2500      	movs	r5, #0
 8002e84:	7025      	strb	r5, [r4, #0]
		Disable_Digits();
 8002e86:	f7ff fe51 	bl	8002b2c <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8002e8a:	4638      	mov	r0, r7
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	2110      	movs	r1, #16
 8002e90:	f7fe fd62 	bl	8001958 <HAL_GPIO_WritePin>
				Digit_Maker(d2);
 8002e94:	4648      	mov	r0, r9
 8002e96:	f7ff fec9 	bl	8002c2c <Digit_Maker>
 8002e9a:	e7b4      	b.n	8002e06 <Number_Display+0xea>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002e9c:	f1ba 0f00 	cmp.w	sl, #0
 8002ea0:	d0ef      	beq.n	8002e82 <Number_Display+0x166>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002ea2:	7822      	ldrb	r2, [r4, #0]
 8002ea4:	2a01      	cmp	r2, #1
 8002ea6:	f43f af5b 	beq.w	8002d60 <Number_Display+0x44>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002eaa:	7822      	ldrb	r2, [r4, #0]
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	d087      	beq.n	8002dc0 <Number_Display+0xa4>
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	e789      	b.n	8002dc8 <Number_Display+0xac>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8002eb4:	7822      	ldrb	r2, [r4, #0]
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002eb6:	7822      	ldrb	r2, [r4, #0]
 8002eb8:	2a01      	cmp	r2, #1
 8002eba:	f43f af60 	beq.w	8002d7e <Number_Display+0x62>
			d1cplt = 1;
 8002ebe:	2201      	movs	r2, #1
				d2cplt = 1;
 8002ec0:	4692      	mov	sl, r2
					d3cplt = 1;
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	e7c1      	b.n	8002e4a <Number_Display+0x12e>
		LEDmsecFlag = 0;
 8002ec6:	2500      	movs	r5, #0
 8002ec8:	7025      	strb	r5, [r4, #0]
		Disable_Digits();
 8002eca:	f7ff fe2f 	bl	8002b2c <Disable_Digits>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8002ece:	462a      	mov	r2, r5
 8002ed0:	2108      	movs	r1, #8
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f7fe fd40 	bl	8001958 <HAL_GPIO_WritePin>
		Digit_Maker(d4);
 8002ed8:	9803      	ldr	r0, [sp, #12]
		d1cplt = 0;
 8002eda:	9502      	str	r5, [sp, #8]
		d3cplt = 0;
 8002edc:	46a8      	mov	r8, r5
		Digit_Maker(d4);
 8002ede:	f7ff fea5 	bl	8002c2c <Digit_Maker>
		d2cplt = 0;
 8002ee2:	46aa      	mov	sl, r5
 8002ee4:	9a02      	ldr	r2, [sp, #8]
 8002ee6:	e76f      	b.n	8002dc8 <Number_Display+0xac>
 8002ee8:	200000f6 	.word	0x200000f6
 8002eec:	20000ac0 	.word	0x20000ac0
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	200000e8 	.word	0x200000e8

08002ef8 <Number_Maker>:
	if (number < 0)
 8002ef8:	2800      	cmp	r0, #0
{
 8002efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		number = number * minus;
 8002efc:	bfb8      	it	lt
 8002efe:	4240      	neglt	r0, r0
	digit4 = number % 10;
 8002f00:	4d1d      	ldr	r5, [pc, #116]	; (8002f78 <Number_Maker+0x80>)
	number = number/10;
 8002f02:	491e      	ldr	r1, [pc, #120]	; (8002f7c <Number_Maker+0x84>)
	number = number/10;
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <Number_Maker+0x88>)
		number = number * minus;
 8002f06:	bfb8      	it	lt
 8002f08:	b200      	sxthlt	r0, r0
	digit4 = number % 10;
 8002f0a:	fb85 4300 	smull	r4, r3, r5, r0
 8002f0e:	17c4      	asrs	r4, r0, #31
	number = number/10;
 8002f10:	fb82 6200 	smull	r6, r2, r2, r0
	number = number/10;
 8002f14:	fb81 6100 	smull	r6, r1, r1, r0
	digit4 = number % 10;
 8002f18:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
	digit3 = number % 10;
 8002f1c:	b21f      	sxth	r7, r3
	number = number/10;
 8002f1e:	ebc4 1161 	rsb	r1, r4, r1, asr #5
	number = number/10;
 8002f22:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
	digit1 = number % 10;
 8002f26:	b224      	sxth	r4, r4
	digit3 = number % 10;
 8002f28:	fb85 2607 	smull	r2, r6, r5, r7
	digit2 = number % 10;
 8002f2c:	b209      	sxth	r1, r1
	digit3 = number % 10;
 8002f2e:	17fa      	asrs	r2, r7, #31
 8002f30:	ebc2 02a6 	rsb	r2, r2, r6, asr #2
	digit2 = number % 10;
 8002f34:	fb85 6c01 	smull	r6, ip, r5, r1
	digit1 = number % 10;
 8002f38:	fb85 5e04 	smull	r5, lr, r5, r4
	digit2 = number % 10;
 8002f3c:	17ce      	asrs	r6, r1, #31
	digit1 = number % 10;
 8002f3e:	17e5      	asrs	r5, r4, #31
	digit2 = number % 10;
 8002f40:	ebc6 06ac 	rsb	r6, r6, ip, asr #2
	digit1 = number % 10;
 8002f44:	ebc5 05ae 	rsb	r5, r5, lr, asr #2
	digit2 = number % 10;
 8002f48:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	digit4 = number % 10;
 8002f4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	digit3 = number % 10;
 8002f50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	digit1 = number % 10;
 8002f54:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	digit4 = number % 10;
 8002f58:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	digit3 = number % 10;
 8002f5c:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
	digit2 = number % 10;
 8002f60:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
	digit1 = number % 10;
 8002f64:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
	Number_Display(digit1, digit2, digit3, digit4);
 8002f68:	b268      	sxtb	r0, r5
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	b252      	sxtb	r2, r2
 8002f6e:	b249      	sxtb	r1, r1
 8002f70:	f7ff fed4 	bl	8002d1c <Number_Display>
}
 8002f74:	2001      	movs	r0, #1
 8002f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f78:	66666667 	.word	0x66666667
 8002f7c:	51eb851f 	.word	0x51eb851f
 8002f80:	10624dd3 	.word	0x10624dd3

08002f84 <HAL_SYSTICK_Callback>:
{
 8002f84:	b538      	push	{r3, r4, r5, lr}
	LEDmsecCntr++; // New millisecond timer for LED
 8002f86:	4c22      	ldr	r4, [pc, #136]	; (8003010 <HAL_SYSTICK_Callback+0x8c>)
	state = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 8002f88:	4822      	ldr	r0, [pc, #136]	; (8003014 <HAL_SYSTICK_Callback+0x90>)
	LEDmsecCntr++; // New millisecond timer for LED
 8002f8a:	7823      	ldrb	r3, [r4, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
	state = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 8002f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
	LEDmsecCntr++; // New millisecond timer for LED
 8002f94:	7023      	strb	r3, [r4, #0]
	state = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 8002f96:	f7fe fcd9 	bl	800194c <HAL_GPIO_ReadPin>
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_SYSTICK_Callback+0x94>)
 8002f9c:	7010      	strb	r0, [r2, #0]
	     if (LEDmsecCntr>3)
 8002f9e:	7823      	ldrb	r3, [r4, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d904      	bls.n	8002fae <HAL_SYSTICK_Callback+0x2a>
	    	 LEDmsecFlag = 1; // Flag to indicate 3ms event
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_SYSTICK_Callback+0x98>)
	    	 LEDmsecCntr=0;
 8002fa6:	2000      	movs	r0, #0
	    	 LEDmsecFlag = 1; // Flag to indicate 3ms event
 8002fa8:	2101      	movs	r1, #1
	    	 LEDmsecCntr=0;
 8002faa:	7020      	strb	r0, [r4, #0]
	    	 LEDmsecFlag = 1; // Flag to indicate 3ms event
 8002fac:	7019      	strb	r1, [r3, #0]
	     if(FLOWmsecCntr>6)
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_SYSTICK_Callback+0x9c>)
 8002fb0:	7819      	ldrb	r1, [r3, #0]
 8002fb2:	2906      	cmp	r1, #6
 8002fb4:	d90c      	bls.n	8002fd0 <HAL_SYSTICK_Callback+0x4c>
	    	 if ((prev ^ state) == 1)
 8002fb6:	491b      	ldr	r1, [pc, #108]	; (8003024 <HAL_SYSTICK_Callback+0xa0>)
	    	 bounce = 0;
 8002fb8:	4d1b      	ldr	r5, [pc, #108]	; (8003028 <HAL_SYSTICK_Callback+0xa4>)
	    	 if ((prev ^ state) == 1)
 8002fba:	780b      	ldrb	r3, [r1, #0]
 8002fbc:	7814      	ldrb	r4, [r2, #0]
 8002fbe:	4063      	eors	r3, r4
	    	 bounce = 0;
 8002fc0:	2000      	movs	r0, #0
	    	 if ((prev ^ state) == 1)
 8002fc2:	2b01      	cmp	r3, #1
	    	 bounce = 0;
 8002fc4:	6028      	str	r0, [r5, #0]
	    	 if ((prev ^ state) == 1)
 8002fc6:	d01a      	beq.n	8002ffe <HAL_SYSTICK_Callback+0x7a>
	     if(noflow)
 8002fc8:	4c18      	ldr	r4, [pc, #96]	; (800302c <HAL_SYSTICK_Callback+0xa8>)
 8002fca:	7823      	ldrb	r3, [r4, #0]
 8002fcc:	b963      	cbnz	r3, 8002fe8 <HAL_SYSTICK_Callback+0x64>
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
	     if(bounce)
 8002fd0:	4d15      	ldr	r5, [pc, #84]	; (8003028 <HAL_SYSTICK_Callback+0xa4>)
 8002fd2:	682a      	ldr	r2, [r5, #0]
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d0f7      	beq.n	8002fc8 <HAL_SYSTICK_Callback+0x44>
	    	 FLOWmsecCntr++;
 8002fd8:	781a      	ldrb	r2, [r3, #0]
	     if(noflow)
 8002fda:	4c14      	ldr	r4, [pc, #80]	; (800302c <HAL_SYSTICK_Callback+0xa8>)
	    	 FLOWmsecCntr++;
 8002fdc:	3201      	adds	r2, #1
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
	     if(noflow)
 8002fe2:	7823      	ldrb	r3, [r4, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f2      	beq.n	8002fce <HAL_SYSTICK_Callback+0x4a>
	     if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10) == 1U)
 8002fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_SYSTICK_Callback+0x90>)
 8002fee:	f7fe fcad 	bl	800194c <HAL_GPIO_ReadPin>
 8002ff2:	2801      	cmp	r0, #1
 8002ff4:	d1eb      	bne.n	8002fce <HAL_SYSTICK_Callback+0x4a>
	    	 noflow = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	7023      	strb	r3, [r4, #0]
	    	 bounce = 1;
 8002ffa:	6028      	str	r0, [r5, #0]
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
	    		 FLOW = FLOW + 100;
 8002ffe:	480c      	ldr	r0, [pc, #48]	; (8003030 <HAL_SYSTICK_Callback+0xac>)
 8003000:	6803      	ldr	r3, [r0, #0]
 8003002:	3364      	adds	r3, #100	; 0x64
 8003004:	6003      	str	r3, [r0, #0]
	    		 prev = state;
 8003006:	7813      	ldrb	r3, [r2, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	700b      	strb	r3, [r1, #0]
 800300c:	e7dc      	b.n	8002fc8 <HAL_SYSTICK_Callback+0x44>
 800300e:	bf00      	nop
 8003010:	200000f5 	.word	0x200000f5
 8003014:	48000800 	.word	0x48000800
 8003018:	20000119 	.word	0x20000119
 800301c:	200000f6 	.word	0x200000f6
 8003020:	200000f4 	.word	0x200000f4
 8003024:	20000118 	.word	0x20000118
 8003028:	20000104 	.word	0x20000104
 800302c:	2000005d 	.word	0x2000005d
 8003030:	200000f0 	.word	0x200000f0

08003034 <HAL_ADC_ConvCpltCallback>:
{
 8003034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(channel)
 8003038:	4d37      	ldr	r5, [pc, #220]	; (8003118 <HAL_ADC_ConvCpltCallback+0xe4>)
 800303a:	782b      	ldrb	r3, [r5, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	2b03      	cmp	r3, #3
 8003040:	d809      	bhi.n	8003056 <HAL_ADC_ConvCpltCallback+0x22>
 8003042:	e8df f003 	tbb	[pc, r3]
 8003046:	0234      	.short	0x0234
 8003048:	0e20      	.short	0x0e20
		if(v<70)
 800304a:	4f34      	ldr	r7, [pc, #208]	; (800311c <HAL_ADC_ConvCpltCallback+0xe8>)
 800304c:	f8d7 8000 	ldr.w	r8, [r7]
 8003050:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003054:	dd51      	ble.n	80030fa <HAL_ADC_ConvCpltCallback+0xc6>
 8003056:	4e32      	ldr	r6, [pc, #200]	; (8003120 <HAL_ADC_ConvCpltCallback+0xec>)
 8003058:	6834      	ldr	r4, [r6, #0]
	if(c==70 && v==70 && t1==70 && t2==70)
 800305a:	2c46      	cmp	r4, #70	; 0x46
 800305c:	d037      	beq.n	80030ce <HAL_ADC_ConvCpltCallback+0x9a>
 800305e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(t2<70)
 8003062:	4f30      	ldr	r7, [pc, #192]	; (8003124 <HAL_ADC_ConvCpltCallback+0xf0>)
 8003064:	683c      	ldr	r4, [r7, #0]
 8003066:	2c45      	cmp	r4, #69	; 0x45
 8003068:	dcf5      	bgt.n	8003056 <HAL_ADC_ConvCpltCallback+0x22>
				ADC_Temp2Array[t2]=HAL_ADC_GetValue(&hadc1);
 800306a:	482f      	ldr	r0, [pc, #188]	; (8003128 <HAL_ADC_ConvCpltCallback+0xf4>)
 800306c:	4e2c      	ldr	r6, [pc, #176]	; (8003120 <HAL_ADC_ConvCpltCallback+0xec>)
 800306e:	f7fd ff8b 	bl	8000f88 <HAL_ADC_GetValue>
				t2++;
 8003072:	683b      	ldr	r3, [r7, #0]
				ADC_Temp2Array[t2]=HAL_ADC_GetValue(&hadc1);
 8003074:	4a2d      	ldr	r2, [pc, #180]	; (800312c <HAL_ADC_ConvCpltCallback+0xf8>)
				t2++;
 8003076:	3301      	adds	r3, #1
 8003078:	603b      	str	r3, [r7, #0]
				channel=1;
 800307a:	2301      	movs	r3, #1
				ADC_Temp2Array[t2]=HAL_ADC_GetValue(&hadc1);
 800307c:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
				channel=1;
 8003080:	702b      	strb	r3, [r5, #0]
 8003082:	6834      	ldr	r4, [r6, #0]
 8003084:	e7e9      	b.n	800305a <HAL_ADC_ConvCpltCallback+0x26>
		if(t1<70)
 8003086:	4f2a      	ldr	r7, [pc, #168]	; (8003130 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003088:	f8d7 8000 	ldr.w	r8, [r7]
 800308c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003090:	dce1      	bgt.n	8003056 <HAL_ADC_ConvCpltCallback+0x22>
				ADC_Temp1Array[t1]=HAL_ADC_GetValue(&hadc1);
 8003092:	4825      	ldr	r0, [pc, #148]	; (8003128 <HAL_ADC_ConvCpltCallback+0xf4>)
 8003094:	4e22      	ldr	r6, [pc, #136]	; (8003120 <HAL_ADC_ConvCpltCallback+0xec>)
 8003096:	f7fd ff77 	bl	8000f88 <HAL_ADC_GetValue>
				t1++;
 800309a:	683b      	ldr	r3, [r7, #0]
				ADC_Temp1Array[t1]=HAL_ADC_GetValue(&hadc1);
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <HAL_ADC_ConvCpltCallback+0x100>)
 800309e:	6834      	ldr	r4, [r6, #0]
 80030a0:	f822 0018 	strh.w	r0, [r2, r8, lsl #1]
				t1++;
 80030a4:	3301      	adds	r3, #1
				channel=4;
 80030a6:	2204      	movs	r2, #4
				t1++;
 80030a8:	603b      	str	r3, [r7, #0]
				channel=4;
 80030aa:	702a      	strb	r2, [r5, #0]
 80030ac:	e7d5      	b.n	800305a <HAL_ADC_ConvCpltCallback+0x26>
		if(c<70)
 80030ae:	4e1c      	ldr	r6, [pc, #112]	; (8003120 <HAL_ADC_ConvCpltCallback+0xec>)
 80030b0:	6834      	ldr	r4, [r6, #0]
 80030b2:	2c45      	cmp	r4, #69	; 0x45
 80030b4:	dcd1      	bgt.n	800305a <HAL_ADC_ConvCpltCallback+0x26>
	        	ADC_CurrentArray[c]=HAL_ADC_GetValue(&hadc1);
 80030b6:	481c      	ldr	r0, [pc, #112]	; (8003128 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030b8:	f7fd ff66 	bl	8000f88 <HAL_ADC_GetValue>
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_ADC_ConvCpltCallback+0x104>)
	        	c++;
 80030be:	6832      	ldr	r2, [r6, #0]
	        	ADC_CurrentArray[c]=HAL_ADC_GetValue(&hadc1);
 80030c0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	        	channel=2;
 80030c4:	2302      	movs	r3, #2
	        	c++;
 80030c6:	1c54      	adds	r4, r2, #1
 80030c8:	6034      	str	r4, [r6, #0]
	        	channel=2;
 80030ca:	702b      	strb	r3, [r5, #0]
 80030cc:	e7c5      	b.n	800305a <HAL_ADC_ConvCpltCallback+0x26>
	if(c==70 && v==70 && t1==70 && t2==70)
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_ADC_ConvCpltCallback+0xe8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2a46      	cmp	r2, #70	; 0x46
 80030d4:	d1c3      	bne.n	800305e <HAL_ADC_ConvCpltCallback+0x2a>
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_ADC_ConvCpltCallback+0xfc>)
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	2946      	cmp	r1, #70	; 0x46
 80030dc:	d1bf      	bne.n	800305e <HAL_ADC_ConvCpltCallback+0x2a>
 80030de:	4911      	ldr	r1, [pc, #68]	; (8003124 <HAL_ADC_ConvCpltCallback+0xf0>)
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	2846      	cmp	r0, #70	; 0x46
 80030e4:	d1bb      	bne.n	800305e <HAL_ADC_ConvCpltCallback+0x2a>
			c=0;
 80030e6:	2400      	movs	r4, #0
 80030e8:	6034      	str	r4, [r6, #0]
			v=0;
 80030ea:	601c      	str	r4, [r3, #0]
			t1=0;
 80030ec:	6014      	str	r4, [r2, #0]
			t2=0;
 80030ee:	600c      	str	r4, [r1, #0]
			HAL_ADC_Stop_IT(&hadc1);
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <HAL_ADC_ConvCpltCallback+0xf4>)
}
 80030f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_ADC_Stop_IT(&hadc1);
 80030f6:	f7fd bf21 	b.w	8000f3c <HAL_ADC_Stop_IT>
		        ADC_VoltageArray[v]=HAL_ADC_GetValue(&hadc1);
 80030fa:	480b      	ldr	r0, [pc, #44]	; (8003128 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030fc:	4e08      	ldr	r6, [pc, #32]	; (8003120 <HAL_ADC_ConvCpltCallback+0xec>)
 80030fe:	f7fd ff43 	bl	8000f88 <HAL_ADC_GetValue>
	        	v++;
 8003102:	683b      	ldr	r3, [r7, #0]
		        ADC_VoltageArray[v]=HAL_ADC_GetValue(&hadc1);
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_ADC_ConvCpltCallback+0x108>)
 8003106:	6834      	ldr	r4, [r6, #0]
 8003108:	f822 0018 	strh.w	r0, [r2, r8, lsl #1]
	        	v++;
 800310c:	3301      	adds	r3, #1
	        	channel=3;
 800310e:	2203      	movs	r2, #3
	        	v++;
 8003110:	603b      	str	r3, [r7, #0]
	        	channel=3;
 8003112:	702a      	strb	r2, [r5, #0]
 8003114:	e7a1      	b.n	800305a <HAL_ADC_ConvCpltCallback+0x26>
 8003116:	bf00      	nop
 8003118:	2000005c 	.word	0x2000005c
 800311c:	20000124 	.word	0x20000124
 8003120:	20000108 	.word	0x20000108
 8003124:	20000120 	.word	0x20000120
 8003128:	200006e8 	.word	0x200006e8
 800312c:	2000073c 	.word	0x2000073c
 8003130:	2000011c 	.word	0x2000011c
 8003134:	20000400 	.word	0x20000400
 8003138:	20000a30 	.word	0x20000a30
 800313c:	2000083c 	.word	0x2000083c

08003140 <vconvert>:
{
 8003140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	vnew = vnew - 1860.265;
 8003144:	a733      	add	r7, pc, #204	; (adr r7, 8003214 <vconvert+0xd4>)
 8003146:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 800314a:	ed2d 8b04 	vpush	{d8-d9}
 800314e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800321c <vconvert+0xdc>
	vnew = vnew * 1000; //turns into millivolts
 8003152:	ed9f 9a29 	vldr	s18, [pc, #164]	; 80031f8 <vconvert+0xb8>
	vnew = vnew * 220;
 8003156:	eddf 8a29 	vldr	s17, [pc, #164]	; 80031fc <vconvert+0xbc>
	vnew = vnew / 4095;
 800315a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8003200 <vconvert+0xc0>
{
 800315e:	460c      	mov	r4, r1
 8003160:	1e85      	subs	r5, r0, #2
 8003162:	f501 788e 	add.w	r8, r1, #284	; 0x11c
	vnew = *v_convarray; //turns into millivolts
 8003166:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
	vnew = vnew - 1860.265;
 800316a:	ee07 0a90 	vmov	s15, r0
 800316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003172:	ee17 0a90 	vmov	r0, s15
 8003176:	f7fd f98b 	bl	8000490 <__aeabi_f2d>
 800317a:	4632      	mov	r2, r6
 800317c:	463b      	mov	r3, r7
 800317e:	f7fd f827 	bl	80001d0 <__aeabi_dsub>
 8003182:	f7fd fbeb 	bl	800095c <__aeabi_d2f>
	vnew = vnew * Vdd;
 8003186:	edd9 7a00 	vldr	s15, [r9]
 800318a:	ee07 0a10 	vmov	s14, r0
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
	vnew = vnew * 1000; //turns into millivolts
 8003192:	ee67 7a89 	vmul.f32	s15, s15, s18
	vnew = vnew * 220;
 8003196:	ee67 7aa8 	vmul.f32	s15, s15, s17
	vnew = vnew / 4095;
 800319a:	ee87 7a88 	vdiv.f32	s14, s15, s16
	*v_address = vnew;
 800319e:	eca4 7a01 	vstmia	r4!, {s14}
	while (vcount<71)
 80031a2:	4544      	cmp	r4, r8
 80031a4:	d1df      	bne.n	8003166 <vconvert+0x26>
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <vconvert+0xc4>)
 80031a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003208 <vconvert+0xc8>
 80031ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
		vsquare =  VALUE_VoltageArray[vsumcount] * VALUE_VoltageArray[vsumcount];
 80031b0:	ecf3 7a01 	vldmia	r3!, {s15}
	while (vsumcount<71)
 80031b4:	429a      	cmp	r2, r3
		vsum = vsum+vsquare;
 80031b6:	eea7 7aa7 	vfma.f32	s14, s15, s15
	while (vsumcount<71)
 80031ba:	d1f9      	bne.n	80031b0 <vconvert+0x70>
	vrms = sqrtf(vsum/70);
 80031bc:	eddf 7a13 	vldr	s15, [pc, #76]	; 800320c <vconvert+0xcc>
 80031c0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80031c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80031d0:	d501      	bpl.n	80031d6 <vconvert+0x96>
 80031d2:	f000 fdff 	bl	8003dd4 <sqrtf>
	if (vrms>200000)
 80031d6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003210 <vconvert+0xd0>
		vrms=0;
 80031da:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003208 <vconvert+0xc8>
 80031de:	eeb4 8a67 	vcmp.f32	s16, s15
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 80031e6:	bfd8      	it	le
 80031e8:	eeb0 0a48 	vmovle.f32	s0, s16
 80031ec:	ecbd 8b04 	vpop	{d8-d9}
 80031f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f4:	f3af 8000 	nop.w
 80031f8:	447a0000 	.word	0x447a0000
 80031fc:	435c0000 	.word	0x435c0000
 8003200:	457ff000 	.word	0x457ff000
 8003204:	200005cc 	.word	0x200005cc
 8003208:	00000000 	.word	0x00000000
 800320c:	428c0000 	.word	0x428c0000
 8003210:	48435000 	.word	0x48435000
 8003214:	5c28f5c3 	.word	0x5c28f5c3
 8003218:	409d110f 	.word	0x409d110f
 800321c:	20000058 	.word	0x20000058

08003220 <iconvert>:
{
 8003220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	inew = inew - 1860.265;
 8003224:	a732      	add	r7, pc, #200	; (adr r7, 80032f0 <iconvert+0xd0>)
 8003226:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 800322a:	ed2d 8b04 	vpush	{d8-d9}
 800322e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80032f8 <iconvert+0xd8>
	inew = inew * 1000; //turns into millivolts
 8003232:	ed9f 9a29 	vldr	s18, [pc, #164]	; 80032d8 <iconvert+0xb8>
	inew = inew / 4095;
 8003236:	eddf 8a29 	vldr	s17, [pc, #164]	; 80032dc <iconvert+0xbc>
{
 800323a:	460c      	mov	r4, r1
 800323c:	1e85      	subs	r5, r0, #2
 800323e:	f501 788e 	add.w	r8, r1, #284	; 0x11c
	inew = inew * 13;
 8003242:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
	inew = *i_convarray; //turns into millivolts
 8003246:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
	inew = inew - 1860.265;
 800324a:	ee07 0a90 	vmov	s15, r0
 800324e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003252:	ee17 0a90 	vmov	r0, s15
 8003256:	f7fd f91b 	bl	8000490 <__aeabi_f2d>
 800325a:	4632      	mov	r2, r6
 800325c:	463b      	mov	r3, r7
 800325e:	f7fc ffb7 	bl	80001d0 <__aeabi_dsub>
 8003262:	f7fd fb7b 	bl	800095c <__aeabi_d2f>
	inew = inew * Vdd;
 8003266:	edd9 7a00 	vldr	s15, [r9]
 800326a:	ee07 0a10 	vmov	s14, r0
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
	inew = inew * 1000; //turns into millivolts
 8003272:	ee67 7a89 	vmul.f32	s15, s15, s18
	inew = inew * 13;
 8003276:	ee67 7a88 	vmul.f32	s15, s15, s16
	inew = inew / 4095;
 800327a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
	*i_address = inew;
 800327e:	eca4 7a01 	vstmia	r4!, {s14}
	while (icount<71)
 8003282:	4544      	cmp	r4, r8
 8003284:	d1df      	bne.n	8003246 <iconvert+0x26>
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <iconvert+0xc0>)
 8003288:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032e4 <iconvert+0xc4>
 800328c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
		isquare =  VALUE_CurrentArray[isumcount] * VALUE_CurrentArray[isumcount];
 8003290:	ecf3 7a01 	vldmia	r3!, {s15}
	while (isumcount<71)
 8003294:	429a      	cmp	r2, r3
		isum = isum+isquare;
 8003296:	eea7 7aa7 	vfma.f32	s14, s15, s15
	while (isumcount<71)
 800329a:	d1f9      	bne.n	8003290 <iconvert+0x70>
	irms = sqrtf(isum/70);
 800329c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80032e8 <iconvert+0xc8>
 80032a0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80032a4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ac:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80032b0:	d501      	bpl.n	80032b6 <iconvert+0x96>
 80032b2:	f000 fd8f 	bl	8003dd4 <sqrtf>
	if (irms>10000)
 80032b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80032ec <iconvert+0xcc>
			irms=0;
 80032ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80032e4 <iconvert+0xc4>
 80032be:	eeb4 8a67 	vcmp.f32	s16, s15
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 80032c6:	bfd8      	it	le
 80032c8:	eeb0 0a48 	vmovle.f32	s0, s16
 80032cc:	ecbd 8b04 	vpop	{d8-d9}
 80032d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d4:	f3af 8000 	nop.w
 80032d8:	447a0000 	.word	0x447a0000
 80032dc:	457ff000 	.word	0x457ff000
 80032e0:	200008e4 	.word	0x200008e4
 80032e4:	00000000 	.word	0x00000000
 80032e8:	428c0000 	.word	0x428c0000
 80032ec:	461c4000 	.word	0x461c4000
 80032f0:	5c28f5c3 	.word	0x5c28f5c3
 80032f4:	409d110f 	.word	0x409d110f
 80032f8:	20000058 	.word	0x20000058
 80032fc:	00000000 	.word	0x00000000

08003300 <main>:
{
 8003300:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003304:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8003306:	f7fd fb8f 	bl	8000a28 <HAL_Init>
  SystemClock_Config();
 800330a:	f7ff fbd3 	bl	8002ab4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	4bbb      	ldr	r3, [pc, #748]	; (80035fc <main+0x2fc>)
  huart1.Instance = USART1;
 8003310:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003634 <main+0x334>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003314:	695a      	ldr	r2, [r3, #20]
  hadc1.Instance = ADC1;
 8003316:	4dba      	ldr	r5, [pc, #744]	; (8003600 <main+0x300>)
 8003318:	f8df a308 	ldr.w	sl, [pc, #776]	; 8003624 <main+0x324>
 800331c:	4eb9      	ldr	r6, [pc, #740]	; (8003604 <main+0x304>)
 800331e:	4cba      	ldr	r4, [pc, #744]	; (8003608 <main+0x308>)
 8003320:	f8df 8308 	ldr.w	r8, [pc, #776]	; 800362c <main+0x32c>
	t1new = t1new / 4095;
 8003324:	eddf 8ab9 	vldr	s17, [pc, #740]	; 800360c <main+0x30c>
	t1new = t1new * 100; //conversion to celsius
 8003328:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 8003610 <main+0x310>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003338:	9203      	str	r2, [sp, #12]
 800333a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800334a:	9204      	str	r2, [sp, #16]
 800334c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003354:	615a      	str	r2, [r3, #20]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800335c:	9205      	str	r2, [sp, #20]
 800335e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8003376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800337c:	f7fe faec 	bl	8001958 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8003386:	48a3      	ldr	r0, [pc, #652]	; (8003614 <main+0x314>)
 8003388:	f7fe fae6 	bl	8001958 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	48a1      	ldr	r0, [pc, #644]	; (8003618 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	f04f 0b00 	mov.w	fp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003396:	f7fe fadf 	bl	8001958 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800339a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800339e:	4a9f      	ldr	r2, [pc, #636]	; (800361c <main+0x31c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033a0:	489d      	ldr	r0, [pc, #628]	; (8003618 <main+0x318>)
  GPIO_InitStruct.Pin = B1_Pin;
 80033a2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033a4:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033a6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f7fe f9e4 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8 
 80033b0:	f240 5243 	movw	r2, #1347	; 0x543
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b4:	a90a      	add	r1, sp, #40	; 0x28
 80033b6:	4898      	ldr	r0, [pc, #608]	; (8003618 <main+0x318>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8 
 80033b8:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ba:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c2:	f7fe f9d9 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80033c6:	2213      	movs	r2, #19
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c8:	a90a      	add	r1, sp, #40	; 0x28
 80033ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80033ce:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f7fe f9ce 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033dc:	230c      	movs	r3, #12
 80033de:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e2:	2207      	movs	r2, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	a90a      	add	r1, sp, #40	; 0x28
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033f0:	920e      	str	r2, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f7fe f9bf 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80033fa:	f44f 7278 	mov.w	r2, #992	; 0x3e0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fe:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	a90a      	add	r1, sp, #40	; 0x28
 8003402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003406:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003408:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f7fe f9b1 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003416:	f44f 628f 	mov.w	r2, #1144	; 0x478
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341c:	a90a      	add	r1, sp, #40	; 0x28
 800341e:	487d      	ldr	r0, [pc, #500]	; (8003614 <main+0x314>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003420:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003422:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f7fe f9a4 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003430:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003432:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003434:	a90a      	add	r1, sp, #40	; 0x28
 8003436:	4878      	ldr	r0, [pc, #480]	; (8003618 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800343a:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003444:	f7fe f998 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003448:	f44f 7240 	mov.w	r2, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344c:	a90a      	add	r1, sp, #40	; 0x28
 800344e:	4871      	ldr	r0, [pc, #452]	; (8003614 <main+0x314>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003450:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003452:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345a:	f7fe f98d 	bl	8001778 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800345e:	4970      	ldr	r1, [pc, #448]	; (8003620 <main+0x320>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003460:	f8c9 b008 	str.w	fp, [r9, #8]
  huart1.Init.BaudRate = 115200;
 8003464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003468:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 115200;
 800346a:	e889 0006 	stmia.w	r9, {r1, r2}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800346e:	4648      	mov	r0, r9
  hadc1.Init.NbrOfConversion = 4;
 8003470:	2204      	movs	r2, #4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003472:	f8c9 3014 	str.w	r3, [r9, #20]
  hadc1.Init.NbrOfConversion = 4;
 8003476:	9201      	str	r2, [sp, #4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003478:	f8c9 b00c 	str.w	fp, [r9, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800347c:	f8c9 b010 	str.w	fp, [r9, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003480:	f8c9 b018 	str.w	fp, [r9, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003484:	f8c9 b01c 	str.w	fp, [r9, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003488:	f8c9 b020 	str.w	fp, [r9, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800348c:	f8c9 b024 	str.w	fp, [r9, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003490:	f7ff f97c 	bl	800278c <HAL_UART_Init>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003494:	2301      	movs	r3, #1
  hadc1.Init.NbrOfConversion = 4;
 8003496:	9a01      	ldr	r2, [sp, #4]
 8003498:	622a      	str	r2, [r5, #32]
  hadc1.Instance = ADC1;
 800349a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800349e:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034a0:	616a      	str	r2, [r5, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80034a2:	612b      	str	r3, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80034a4:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034a6:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Instance = ADC1;
 80034a8:	6029      	str	r1, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80034aa:	f8c5 b004 	str.w	fp, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034ae:	f8c5 b008 	str.w	fp, [r5, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034b2:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034b6:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034ba:	f8c5 b00c 	str.w	fp, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80034be:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034c2:	f8c5 b018 	str.w	fp, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80034c6:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034ca:	f7fd fbad 	bl	8000c28 <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034ce:	a910      	add	r1, sp, #64	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034d0:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034d2:	f841 bd24 	str.w	fp, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034d6:	f7fe f83b 	bl	8001550 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034da:	2301      	movs	r3, #1
 80034dc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Channel = ADC_CHANNEL_9;
 80034de:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e0:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_9;
 80034e2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e4:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80034e6:	2306      	movs	r3, #6
 80034e8:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034ea:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034ee:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 80034f2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034f6:	f7fd fe95 	bl	8001224 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034fa:	2202      	movs	r2, #2
  sConfig.Channel = ADC_CHANNEL_8;
 80034fc:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034fe:	a90a      	add	r1, sp, #40	; 0x28
 8003500:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003502:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfig.Channel = ADC_CHANNEL_8;
 8003504:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003506:	f7fd fe8d 	bl	8001224 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 800350a:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800350c:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_12;
 800350e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003510:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003512:	2303      	movs	r3, #3
 8003514:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003516:	f7fd fe85 	bl	8001224 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800351a:	9a01      	ldr	r2, [sp, #4]
 800351c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800351e:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_11;
 8003520:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003522:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8003524:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003526:	f7fd fe7d 	bl	8001224 <HAL_ADC_ConfigChannel>
  HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 800352a:	2201      	movs	r2, #1
 800352c:	4648      	mov	r0, r9
 800352e:	4651      	mov	r1, sl
 8003530:	f7fe feda 	bl	80022e8 <HAL_UART_Receive_IT>
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 8003534:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8003634 <main+0x334>
	  HAL_ADC_Start_IT(&hadc1);
 8003538:	4628      	mov	r0, r5
 800353a:	f7fd fc7f 	bl	8000e3c <HAL_ADC_Start_IT>
	  Number_Maker(TempInteger);
 800353e:	f9b6 0000 	ldrsh.w	r0, [r6]
 8003542:	f7ff fcd9 	bl	8002ef8 <Number_Maker>
	  if (ReceiveFlag)
 8003546:	7823      	ldrb	r3, [r4, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f5      	beq.n	8003538 <main+0x238>
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 800354c:	2201      	movs	r2, #1
 800354e:	4935      	ldr	r1, [pc, #212]	; (8003624 <main+0x324>)
	  	ReceiveFlag = 0;
 8003550:	f04f 0b00 	mov.w	fp, #0
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 8003554:	4648      	mov	r0, r9
	  	ReceiveFlag = 0;
 8003556:	f884 b000 	strb.w	fp, [r4]
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 800355a:	f7fe fec5 	bl	80022e8 <HAL_UART_Receive_IT>
	  	HoldBuffer[count++]= ReceiveBuffer[0];
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <main+0x328>)
 8003560:	f89a 2000 	ldrb.w	r2, [sl]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	4930      	ldr	r1, [pc, #192]	; (8003628 <main+0x328>)
 8003568:	f808 2003 	strb.w	r2, [r8, r3]
 800356c:	3301      	adds	r3, #1
 800356e:	b2db      	uxtb	r3, r3
	  	if (ReceiveBuffer[0] == '\n')
 8003570:	2a0a      	cmp	r2, #10
	  	HoldBuffer[count++]= ReceiveBuffer[0];
 8003572:	700b      	strb	r3, [r1, #0]
	  	if (ReceiveBuffer[0] == '\n')
 8003574:	d1e0      	bne.n	8003538 <main+0x238>
	  		HoldBuffer[count] = '\0';
 8003576:	f808 b003 	strb.w	fp, [r8, r3]
	if (*string == '\0')
 800357a:	f898 e000 	ldrb.w	lr, [r8]
 800357e:	f1be 0f00 	cmp.w	lr, #0
 8003582:	f000 81c6 	beq.w	8003912 <main+0x612>
	if (*string == '-')
 8003586:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800358a:	f000 825b 	beq.w	8003a44 <main+0x744>
	while ((*string >= '0') &&(*string <= '9'))
 800358e:	f1ae 0130 	sub.w	r1, lr, #48	; 0x30
 8003592:	b2cb      	uxtb	r3, r1
 8003594:	2b09      	cmp	r3, #9
 8003596:	d816      	bhi.n	80035c6 <main+0x2c6>
 8003598:	4824      	ldr	r0, [pc, #144]	; (800362c <main+0x32c>)
	int16_t minus = 1;
 800359a:	f04f 0c01 	mov.w	ip, #1
		string++;
 800359e:	2300      	movs	r3, #0
	while ((*string >= '0') &&(*string <= '9'))
 80035a0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		sum = 10 * sum;
 80035a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		sum = sum + (*string - 0x30);
 80035a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
	while ((*string >= '0') &&(*string <= '9'))
 80035ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80035b0:	fa5f f981 	uxtb.w	r9, r1
		sum = sum + (*string - 0x30);
 80035b4:	b29a      	uxth	r2, r3
	while ((*string >= '0') &&(*string <= '9'))
 80035b6:	f1b9 0f09 	cmp.w	r9, #9
		sum = sum + (*string - 0x30);
 80035ba:	b213      	sxth	r3, r2
	while ((*string >= '0') &&(*string <= '9'))
 80035bc:	d9f0      	bls.n	80035a0 <main+0x2a0>
 80035be:	fb1c fb02 	smulbb	fp, ip, r2
 80035c2:	fa0f fb8b 	sxth.w	fp, fp
	*value = minus * sum;
 80035c6:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <main+0x330>)
	  		if (HoldBuffer[0] == '$')
 80035c8:	f1be 0f24 	cmp.w	lr, #36	; 0x24
	*value = minus * sum;
 80035cc:	f8a3 b000 	strh.w	fp, [r3]
	  		if (HoldBuffer[0] == '$')
 80035d0:	f040 819f 	bne.w	8003912 <main+0x612>
	  			switch(HoldBuffer[1])
 80035d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035d8:	3b41      	subs	r3, #65	; 0x41
 80035da:	2b0a      	cmp	r3, #10
 80035dc:	f200 8199 	bhi.w	8003912 <main+0x612>
 80035e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035e4:	02230229 	.word	0x02230229
 80035e8:	021d0197 	.word	0x021d0197
 80035ec:	01e60197 	.word	0x01e60197
 80035f0:	01970186 	.word	0x01970186
 80035f4:	01970197 	.word	0x01970197
 80035f8:	002a      	.short	0x002a
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	200006e8 	.word	0x200006e8
 8003604:	200000fc 	.word	0x200000fc
 8003608:	20000ac0 	.word	0x20000ac0
 800360c:	457ff000 	.word	0x457ff000
 8003610:	42c80000 	.word	0x42c80000
 8003614:	48000400 	.word	0x48000400
 8003618:	48000800 	.word	0x48000800
 800361c:	10210000 	.word	0x10210000
 8003620:	40013800 	.word	0x40013800
 8003624:	20000a2c 	.word	0x20000a2c
 8003628:	2000010c 	.word	0x2000010c
 800362c:	20000a20 	.word	0x20000a20
 8003630:	20000abe 	.word	0x20000abe
 8003634:	200007cc 	.word	0x200007cc
	    				    	I_RMS = iconvert(ADC_CurrentArray,VALUE_CurrentArray);
 8003638:	49bd      	ldr	r1, [pc, #756]	; (8003930 <main+0x630>)
 800363a:	48be      	ldr	r0, [pc, #760]	; (8003934 <main+0x634>)
	    				    	TEMP2 = t2convert(ADC_Temp2Array);
 800363c:	4fbe      	ldr	r7, [pc, #760]	; (8003938 <main+0x638>)
	    				    	I_RMS = iconvert(ADC_CurrentArray,VALUE_CurrentArray);
 800363e:	f7ff fdef 	bl	8003220 <iconvert>
 8003642:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003646:	4abd      	ldr	r2, [pc, #756]	; (800393c <main+0x63c>)
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 8003648:	49bd      	ldr	r1, [pc, #756]	; (8003940 <main+0x640>)
 800364a:	48be      	ldr	r0, [pc, #760]	; (8003944 <main+0x644>)
	    				    	I_RMS = iconvert(ADC_CurrentArray,VALUE_CurrentArray);
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	8013      	strh	r3, [r2, #0]
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 8003652:	f7ff fd75 	bl	8003140 <vconvert>
	t1new = *t1_convarray;
 8003656:	4bbc      	ldr	r3, [pc, #752]	; (8003948 <main+0x648>)
 8003658:	f9b3 0000 	ldrsh.w	r0, [r3]
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 800365c:	4bbb      	ldr	r3, [pc, #748]	; (800394c <main+0x64c>)
	t1new = t1new - 620.4545455;
 800365e:	ee07 0a90 	vmov	s15, r0
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 8003662:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	t1new = t1new - 620.4545455;
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 800366a:	ed83 0a00 	vstr	s0, [r3]
	t1new = t1new - 620.4545455;
 800366e:	ee17 0a90 	vmov	r0, s15
 8003672:	f7fc ff0d 	bl	8000490 <__aeabi_f2d>
 8003676:	a3aa      	add	r3, pc, #680	; (adr r3, 8003920 <main+0x620>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc fda8 	bl	80001d0 <__aeabi_dsub>
 8003680:	f7fd f96c 	bl	800095c <__aeabi_d2f>
	t1new = t1new * 3.3;
 8003684:	f7fc ff04 	bl	8000490 <__aeabi_f2d>
 8003688:	a3a7      	add	r3, pc, #668	; (adr r3, 8003928 <main+0x628>)
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f7fc ff53 	bl	8000538 <__aeabi_dmul>
 8003692:	f7fd f963 	bl	800095c <__aeabi_d2f>
	t1new = t1new / 4095;
 8003696:	ee07 0a10 	vmov	s14, r0
 800369a:	eec7 7a28 	vdiv.f32	s15, s14, s17
	t2new = *t2_convarray;
 800369e:	4bac      	ldr	r3, [pc, #688]	; (8003950 <main+0x650>)
	    				    	TEMP1 = t1convert(ADC_Temp1Array);
 80036a0:	4aac      	ldr	r2, [pc, #688]	; (8003954 <main+0x654>)
	t2new = *t2_convarray;
 80036a2:	f9b3 0000 	ldrsh.w	r0, [r3]
	t2new = t2new - 620.4545455;
 80036a6:	ee07 0a10 	vmov	s14, r0
	t1new = t1new * 100; //conversion to celsius
 80036aa:	ee67 7a88 	vmul.f32	s15, s15, s16
	t2new = t2new - 620.4545455;
 80036ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	    				    	TEMP1 = t1convert(ADC_Temp1Array);
 80036b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	t2new = t2new - 620.4545455;
 80036b6:	ee17 0a10 	vmov	r0, s14
	    				    	TEMP1 = t1convert(ADC_Temp1Array);
 80036ba:	ee17 3a90 	vmov	r3, s15
 80036be:	8013      	strh	r3, [r2, #0]
	t2new = t2new - 620.4545455;
 80036c0:	f7fc fee6 	bl	8000490 <__aeabi_f2d>
 80036c4:	a396      	add	r3, pc, #600	; (adr r3, 8003920 <main+0x620>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fc fd81 	bl	80001d0 <__aeabi_dsub>
 80036ce:	f7fd f945 	bl	800095c <__aeabi_d2f>
	t2new = t2new * 3.3;
 80036d2:	f7fc fedd 	bl	8000490 <__aeabi_f2d>
 80036d6:	a394      	add	r3, pc, #592	; (adr r3, 8003928 <main+0x628>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fc ff2c 	bl	8000538 <__aeabi_dmul>
 80036e0:	f7fd f93c 	bl	800095c <__aeabi_d2f>
	t2new = t2new / 4095;
 80036e4:	ee07 0a10 	vmov	s14, r0
 80036e8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80036ec:	4b93      	ldr	r3, [pc, #588]	; (800393c <main+0x63c>)
 80036ee:	489a      	ldr	r0, [pc, #616]	; (8003958 <main+0x658>)
 80036f0:	8819      	ldrh	r1, [r3, #0]
 80036f2:	220a      	movs	r2, #10
	t2new = t2new * 100; //conversion to celsius
 80036f4:	ee67 7a88 	vmul.f32	s15, s15, s16
	    				    	TEMP2 = t2convert(ADC_Temp2Array);
 80036f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fc:	ee17 3a90 	vmov	r3, s15
 8003700:	803b      	strh	r3, [r7, #0]
 8003702:	f7ff f99b 	bl	8002a3c <Int2String.part.0>
	    				      	num = Int2String(ibuff,I_RMS,10);
 8003706:	4b95      	ldr	r3, [pc, #596]	; (800395c <main+0x65c>)
 8003708:	7018      	strb	r0, [r3, #0]
	    				      	inumvalue = num;
 800370a:	4b95      	ldr	r3, [pc, #596]	; (8003960 <main+0x660>)
	    				      	position = 3+inumvalue;
 800370c:	f100 0e03 	add.w	lr, r0, #3
	    				      	inumvalue = num;
 8003710:	6018      	str	r0, [r3, #0]
	    				      	while (num >0)
 8003712:	b170      	cbz	r0, 8003732 <main+0x432>
 8003714:	4b93      	ldr	r3, [pc, #588]	; (8003964 <main+0x664>)
 8003716:	4994      	ldr	r1, [pc, #592]	; (8003968 <main+0x668>)
 8003718:	1e42      	subs	r2, r0, #1
 800371a:	1c5f      	adds	r7, r3, #1
 800371c:	fa57 f282 	uxtab	r2, r7, r2
	    				      		TransmitBufferK[position-num] = ibuff[inumvalue-num];
 8003720:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8003724:	f801 cf01 	strb.w	ip, [r1, #1]!
	    				      	while (num >0)
 8003728:	429a      	cmp	r2, r3
 800372a:	d1f9      	bne.n	8003720 <main+0x420>
 800372c:	4a8b      	ldr	r2, [pc, #556]	; (800395c <main+0x65c>)
 800372e:	2300      	movs	r3, #0
 8003730:	7013      	strb	r3, [r2, #0]
	    				      	position = position + 1;
 8003732:	498e      	ldr	r1, [pc, #568]	; (800396c <main+0x66c>)
 8003734:	3004      	adds	r0, #4
 8003736:	6008      	str	r0, [r1, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 8003738:	488d      	ldr	r0, [pc, #564]	; (8003970 <main+0x670>)
 800373a:	4984      	ldr	r1, [pc, #528]	; (800394c <main+0x64c>)
 800373c:	232c      	movs	r3, #44	; 0x2c
 800373e:	f800 300e 	strb.w	r3, [r0, lr]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	488b      	ldr	r0, [pc, #556]	; (8003974 <main+0x674>)
 8003746:	220a      	movs	r2, #10
 8003748:	f7ff f978 	bl	8002a3c <Int2String.part.0>
	    				      	position = position + vnumvalue;
 800374c:	4b87      	ldr	r3, [pc, #540]	; (800396c <main+0x66c>)
 800374e:	6819      	ldr	r1, [r3, #0]
	    				      	num = Int2String(vbuff,V_RMS,10);
 8003750:	4b82      	ldr	r3, [pc, #520]	; (800395c <main+0x65c>)
 8003752:	7018      	strb	r0, [r3, #0]
	    				      	vnumvalue = num;
 8003754:	4b88      	ldr	r3, [pc, #544]	; (8003978 <main+0x678>)
	    				      	position = position + vnumvalue;
 8003756:	4401      	add	r1, r0
	    				      	vnumvalue = num;
 8003758:	6018      	str	r0, [r3, #0]
	    				      	while (num >0)
 800375a:	b188      	cbz	r0, 8003780 <main+0x480>
 800375c:	1a0a      	subs	r2, r1, r0
 800375e:	1e43      	subs	r3, r0, #1
 8003760:	4f83      	ldr	r7, [pc, #524]	; (8003970 <main+0x670>)
 8003762:	4886      	ldr	r0, [pc, #536]	; (800397c <main+0x67c>)
 8003764:	3a01      	subs	r2, #1
 8003766:	443a      	add	r2, r7
 8003768:	1c47      	adds	r7, r0, #1
 800376a:	fa57 f383 	uxtab	r3, r7, r3
	    				      		TransmitBufferK[position-num] = vbuff[vnumvalue-num];
 800376e:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 8003772:	f802 ef01 	strb.w	lr, [r2, #1]!
	    				      	while (num >0)
 8003776:	4298      	cmp	r0, r3
 8003778:	d1f9      	bne.n	800376e <main+0x46e>
 800377a:	4a78      	ldr	r2, [pc, #480]	; (800395c <main+0x65c>)
 800377c:	2300      	movs	r3, #0
 800377e:	7013      	strb	r3, [r2, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 8003780:	4f7b      	ldr	r7, [pc, #492]	; (8003970 <main+0x670>)
 8003782:	202c      	movs	r0, #44	; 0x2c
	    				      	position = position + 1;
 8003784:	1c4b      	adds	r3, r1, #1
	    				      	TransmitBufferK[position] = 0x2C;
 8003786:	5478      	strb	r0, [r7, r1]
 8003788:	4972      	ldr	r1, [pc, #456]	; (8003954 <main+0x654>)
	    				      	position = position + 1;
 800378a:	4f78      	ldr	r7, [pc, #480]	; (800396c <main+0x66c>)
 800378c:	8809      	ldrh	r1, [r1, #0]
 800378e:	487c      	ldr	r0, [pc, #496]	; (8003980 <main+0x680>)
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	220a      	movs	r2, #10
 8003794:	f7ff f952 	bl	8002a3c <Int2String.part.0>
	    				      	num = Int2String(t1buff,TEMP1,10);
 8003798:	4b70      	ldr	r3, [pc, #448]	; (800395c <main+0x65c>)
	    				      	position = position + vnumvalue;
 800379a:	6839      	ldr	r1, [r7, #0]
	    				      	num = Int2String(t1buff,TEMP1,10);
 800379c:	7018      	strb	r0, [r3, #0]
	    				      	vnumvalue = num;
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <main+0x678>)
	    				      	position = position + vnumvalue;
 80037a0:	4401      	add	r1, r0
	    				      	vnumvalue = num;
 80037a2:	6018      	str	r0, [r3, #0]
	    				      	while (num >0)
 80037a4:	b188      	cbz	r0, 80037ca <main+0x4ca>
 80037a6:	1a0a      	subs	r2, r1, r0
 80037a8:	1e43      	subs	r3, r0, #1
 80037aa:	4f71      	ldr	r7, [pc, #452]	; (8003970 <main+0x670>)
 80037ac:	4875      	ldr	r0, [pc, #468]	; (8003984 <main+0x684>)
 80037ae:	3a01      	subs	r2, #1
 80037b0:	443a      	add	r2, r7
 80037b2:	1c47      	adds	r7, r0, #1
 80037b4:	fa57 f383 	uxtab	r3, r7, r3
	    				      		TransmitBufferK[position-num] = t1buff[vnumvalue-num];
 80037b8:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 80037bc:	f802 ef01 	strb.w	lr, [r2, #1]!
	    				      	while (num >0)
 80037c0:	4283      	cmp	r3, r0
 80037c2:	d1f9      	bne.n	80037b8 <main+0x4b8>
 80037c4:	4a65      	ldr	r2, [pc, #404]	; (800395c <main+0x65c>)
 80037c6:	2300      	movs	r3, #0
 80037c8:	7013      	strb	r3, [r2, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 80037ca:	4f69      	ldr	r7, [pc, #420]	; (8003970 <main+0x670>)
 80037cc:	202c      	movs	r0, #44	; 0x2c
	    				      	position++;
 80037ce:	1c4b      	adds	r3, r1, #1
	    				      	TransmitBufferK[position] = 0x2C;
 80037d0:	5478      	strb	r0, [r7, r1]
 80037d2:	4959      	ldr	r1, [pc, #356]	; (8003938 <main+0x638>)
	    				      	position++;
 80037d4:	4f65      	ldr	r7, [pc, #404]	; (800396c <main+0x66c>)
 80037d6:	8809      	ldrh	r1, [r1, #0]
 80037d8:	486b      	ldr	r0, [pc, #428]	; (8003988 <main+0x688>)
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	220a      	movs	r2, #10
 80037de:	f7ff f92d 	bl	8002a3c <Int2String.part.0>
	    				      	num = Int2String(t2buff,TEMP2,10);
 80037e2:	4a5e      	ldr	r2, [pc, #376]	; (800395c <main+0x65c>)
	    				      	position = position + vnumvalue;
 80037e4:	683b      	ldr	r3, [r7, #0]
	    				      	num = Int2String(t2buff,TEMP2,10);
 80037e6:	7010      	strb	r0, [r2, #0]
	    				      	vnumvalue = num;
 80037e8:	4a63      	ldr	r2, [pc, #396]	; (8003978 <main+0x678>)
	    				      	position = position + vnumvalue;
 80037ea:	eb00 0e03 	add.w	lr, r0, r3
	    				      	vnumvalue = num;
 80037ee:	6010      	str	r0, [r2, #0]
	    				      	while (num >0)
 80037f0:	b190      	cbz	r0, 8003818 <main+0x518>
 80037f2:	ebae 0200 	sub.w	r2, lr, r0
 80037f6:	1e43      	subs	r3, r0, #1
 80037f8:	4964      	ldr	r1, [pc, #400]	; (800398c <main+0x68c>)
 80037fa:	485d      	ldr	r0, [pc, #372]	; (8003970 <main+0x670>)
 80037fc:	3a01      	subs	r2, #1
 80037fe:	4402      	add	r2, r0
 8003800:	1c48      	adds	r0, r1, #1
 8003802:	fa50 f383 	uxtab	r3, r0, r3
	    				      		TransmitBufferK[position-num] = t2buff[vnumvalue-num];
 8003806:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800380a:	f802 0f01 	strb.w	r0, [r2, #1]!
	    				      	while (num >0)
 800380e:	428b      	cmp	r3, r1
 8003810:	d1f9      	bne.n	8003806 <main+0x506>
 8003812:	4a52      	ldr	r2, [pc, #328]	; (800395c <main+0x65c>)
 8003814:	2300      	movs	r3, #0
 8003816:	7013      	strb	r3, [r2, #0]
	    				      	num = Int2String(flowbuff,FLOW,10);
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <main+0x690>)
	    				      	TransmitBufferK[position] = 0x2C;
 800381a:	4a55      	ldr	r2, [pc, #340]	; (8003970 <main+0x670>)
	    				      	num = Int2String(flowbuff,FLOW,10);
 800381c:	6819      	ldr	r1, [r3, #0]
	    				      	position++;
 800381e:	4f53      	ldr	r7, [pc, #332]	; (800396c <main+0x66c>)
 8003820:	485c      	ldr	r0, [pc, #368]	; (8003994 <main+0x694>)
	    				      	TransmitBufferK[position] = 0x2C;
 8003822:	232c      	movs	r3, #44	; 0x2c
 8003824:	f802 300e 	strb.w	r3, [r2, lr]
	    				      	position++;
 8003828:	f10e 0301 	add.w	r3, lr, #1
 800382c:	220a      	movs	r2, #10
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	f7ff f904 	bl	8002a3c <Int2String.part.0>
	    				      	num = Int2String(flowbuff,FLOW,10);
 8003834:	4b49      	ldr	r3, [pc, #292]	; (800395c <main+0x65c>)
	    				      	position = position + vnumvalue;
 8003836:	6839      	ldr	r1, [r7, #0]
	    				      	num = Int2String(flowbuff,FLOW,10);
 8003838:	7018      	strb	r0, [r3, #0]
	    				      	vnumvalue = num;
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <main+0x678>)
	    				      	position = position + vnumvalue;
 800383c:	4401      	add	r1, r0
	    				      	vnumvalue = num;
 800383e:	6018      	str	r0, [r3, #0]
	    				      	while (num >0)
 8003840:	b188      	cbz	r0, 8003866 <main+0x566>
 8003842:	1a0a      	subs	r2, r1, r0
 8003844:	1e43      	subs	r3, r0, #1
 8003846:	4f4a      	ldr	r7, [pc, #296]	; (8003970 <main+0x670>)
 8003848:	4853      	ldr	r0, [pc, #332]	; (8003998 <main+0x698>)
 800384a:	3a01      	subs	r2, #1
 800384c:	443a      	add	r2, r7
 800384e:	1c47      	adds	r7, r0, #1
 8003850:	fa57 f383 	uxtab	r3, r7, r3
	    				      		TransmitBufferK[position-num] = flowbuff[vnumvalue-num];
 8003854:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 8003858:	f802 ef01 	strb.w	lr, [r2, #1]!
	    				      	while (num >0)
 800385c:	4298      	cmp	r0, r3
 800385e:	d1f9      	bne.n	8003854 <main+0x554>
 8003860:	4a3e      	ldr	r2, [pc, #248]	; (800395c <main+0x65c>)
 8003862:	2300      	movs	r3, #0
 8003864:	7013      	strb	r3, [r2, #0]
    				      		TransmitBufferK[position] = 'O';
 8003866:	4b42      	ldr	r3, [pc, #264]	; (8003970 <main+0x670>)
	    				      	TransmitBufferK[position] = 0x2C;
 8003868:	4f41      	ldr	r7, [pc, #260]	; (8003970 <main+0x670>)
    				      		TransmitBufferK[position] = 'O';
 800386a:	185a      	adds	r2, r3, r1
	    				      	if(Element==1)
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <main+0x69c>)
 800386e:	6818      	ldr	r0, [r3, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 8003870:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
    				      		TransmitBufferK[position] = 'O';
 8003874:	234f      	movs	r3, #79	; 0x4f
	    				      	if(Element==1)
 8003876:	2801      	cmp	r0, #1
	    				      	TransmitBufferK[position] = 0x2C;
 8003878:	f807 e001 	strb.w	lr, [r7, r1]
    				      		TransmitBufferK[position] = 'O';
 800387c:	7053      	strb	r3, [r2, #1]
    				      		position++;
 800387e:	f101 0302 	add.w	r3, r1, #2
	    				      	if(Element==1)
 8003882:	f000 80f8 	beq.w	8003a76 <main+0x776>
	    				      	if(Element==0)
 8003886:	b920      	cbnz	r0, 8003892 <main+0x592>
	    				      		TransmitBufferK[position] = 'F';
 8003888:	4f39      	ldr	r7, [pc, #228]	; (8003970 <main+0x670>)
 800388a:	2046      	movs	r0, #70	; 0x46
 800388c:	54f8      	strb	r0, [r7, r3]
	    				      		TransmitBufferK[position] = 'F';
 800388e:	70d0      	strb	r0, [r2, #3]
	    				      		position++;
 8003890:	1d0b      	adds	r3, r1, #4
	    				      	if(ValveOpen==1)
 8003892:	4a43      	ldr	r2, [pc, #268]	; (80039a0 <main+0x6a0>)
	    				      	TransmitBufferK[position] = 0x2C;
 8003894:	4836      	ldr	r0, [pc, #216]	; (8003970 <main+0x670>)
	    				      	if(ValveOpen==1)
 8003896:	6812      	ldr	r2, [r2, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 8003898:	212c      	movs	r1, #44	; 0x2c
	    				      	if(ValveOpen==1)
 800389a:	2a01      	cmp	r2, #1
	    				      	TransmitBufferK[position] = 0x2C;
 800389c:	54c1      	strb	r1, [r0, r3]
	    				      	position++;
 800389e:	f103 0101 	add.w	r1, r3, #1
	    				      	if(ValveOpen==1)
 80038a2:	f000 80d9 	beq.w	8003a58 <main+0x758>
    				      		if(ValveOpen==0)
 80038a6:	b98a      	cbnz	r2, 80038cc <main+0x5cc>
	    				      		TransmitBufferK[position] = 'L';
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <main+0x670>)
	    				      		TransmitBufferK[position] = 'C';
 80038aa:	4f31      	ldr	r7, [pc, #196]	; (8003970 <main+0x670>)
	    				      		TransmitBufferK[position] = 'L';
 80038ac:	441a      	add	r2, r3
	    				      		TransmitBufferK[position] = 'C';
 80038ae:	2043      	movs	r0, #67	; 0x43
 80038b0:	5478      	strb	r0, [r7, r1]
	    				      		TransmitBufferK[position] = 'O';
 80038b2:	204f      	movs	r0, #79	; 0x4f
	    				      		position++;
 80038b4:	1dd9      	adds	r1, r3, #7
    				      			TransmitBufferK[position] = 'S';
 80038b6:	2353      	movs	r3, #83	; 0x53
	    				      		TransmitBufferK[position] = 'L';
 80038b8:	f04f 0e4c 	mov.w	lr, #76	; 0x4c
	    				      		TransmitBufferK[position] = 'O';
 80038bc:	70d0      	strb	r0, [r2, #3]
    				      			TransmitBufferK[position] = 'S';
 80038be:	7113      	strb	r3, [r2, #4]
	    				      		TransmitBufferK[position] = 'E';
 80038c0:	2045      	movs	r0, #69	; 0x45
	    				      		TransmitBufferK[position] = 'D';
 80038c2:	2344      	movs	r3, #68	; 0x44
	    				      		TransmitBufferK[position] = 'L';
 80038c4:	f882 e002 	strb.w	lr, [r2, #2]
	    				      		TransmitBufferK[position] = 'E';
 80038c8:	7150      	strb	r0, [r2, #5]
	    				      		TransmitBufferK[position] = 'D';
 80038ca:	7193      	strb	r3, [r2, #6]
				      		position++;
 80038cc:	4f27      	ldr	r7, [pc, #156]	; (800396c <main+0x66c>)
 80038ce:	1c48      	adds	r0, r1, #1
 80038d0:	6038      	str	r0, [r7, #0]
				      		TransmitBufferK[position] = '\r';
 80038d2:	4f27      	ldr	r7, [pc, #156]	; (8003970 <main+0x670>)
				      		HAL_UART_Transmit(&huart1, TransmitBufferK,position+1,5);
 80038d4:	1c8a      	adds	r2, r1, #2
				      		TransmitBufferK[position] = '\r';
 80038d6:	230d      	movs	r3, #13
				      		TransmitBufferK[position] = '\n';
 80038d8:	f04f 0e0a 	mov.w	lr, #10
				      		TransmitBufferK[position] = '\r';
 80038dc:	547b      	strb	r3, [r7, r1]
				      		HAL_UART_Transmit(&huart1, TransmitBufferK,position+1,5);
 80038de:	b292      	uxth	r2, r2
				      		TransmitBufferK[position] = '\n';
 80038e0:	f807 e000 	strb.w	lr, [r7, r0]
				      		HAL_UART_Transmit(&huart1, TransmitBufferK,position+1,5);
 80038e4:	2305      	movs	r3, #5
 80038e6:	4639      	mov	r1, r7
 80038e8:	482e      	ldr	r0, [pc, #184]	; (80039a4 <main+0x6a4>)
 80038ea:	f7fe febb 	bl	8002664 <HAL_UART_Transmit>
	    						break;
 80038ee:	e010      	b.n	8003912 <main+0x612>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <main+0x6a8>)
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b0d      	cmp	r3, #13
 80038f6:	f000 80cc 	beq.w	8003a92 <main+0x792>
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <main+0x6a8>)
 80038fc:	f893 e002 	ldrb.w	lr, [r3, #2]
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <main+0x6a8>)
 8003902:	f1be 0f0d 	cmp.w	lr, #13
 8003906:	78da      	ldrb	r2, [r3, #3]
 8003908:	f000 80f2 	beq.w	8003af0 <main+0x7f0>
	    				    	if(TempBuffer[3] == '\r' && TempBuffer[4] == '\n')
 800390c:	2a0d      	cmp	r2, #13
 800390e:	f000 80d5 	beq.w	8003abc <main+0x7bc>
	  		count = 0;
 8003912:	4a26      	ldr	r2, [pc, #152]	; (80039ac <main+0x6ac>)
 8003914:	2300      	movs	r3, #0
 8003916:	7013      	strb	r3, [r2, #0]
 8003918:	e60c      	b.n	8003534 <main+0x234>
 800391a:	bf00      	nop
 800391c:	f3af 8000 	nop.w
 8003920:	e8c0485a 	.word	0xe8c0485a
 8003924:	408363a2 	.word	0x408363a2
 8003928:	66666666 	.word	0x66666666
 800392c:	400a6666 	.word	0x400a6666
 8003930:	200008e4 	.word	0x200008e4
 8003934:	20000a30 	.word	0x20000a30
 8003938:	200000fa 	.word	0x200000fa
 800393c:	200008e2 	.word	0x200008e2
 8003940:	200005cc 	.word	0x200005cc
 8003944:	2000083c 	.word	0x2000083c
 8003948:	20000400 	.word	0x20000400
 800394c:	20000ae4 	.word	0x20000ae4
 8003950:	2000073c 	.word	0x2000073c
 8003954:	200000f8 	.word	0x200000f8
 8003958:	20000a00 	.word	0x20000a00
 800395c:	200008ca 	.word	0x200008ca
 8003960:	20000110 	.word	0x20000110
 8003964:	200009ff 	.word	0x200009ff
 8003968:	20000036 	.word	0x20000036
 800396c:	20000114 	.word	0x20000114
 8003970:	20000034 	.word	0x20000034
 8003974:	20000134 	.word	0x20000134
 8003978:	20000128 	.word	0x20000128
 800397c:	20000133 	.word	0x20000133
 8003980:	20000490 	.word	0x20000490
 8003984:	2000048f 	.word	0x2000048f
 8003988:	20000ac4 	.word	0x20000ac4
 800398c:	20000ac3 	.word	0x20000ac3
 8003990:	200000f0 	.word	0x200000f0
 8003994:	20000c78 	.word	0x20000c78
 8003998:	20000c77 	.word	0x20000c77
 800399c:	200000ec 	.word	0x200000ec
 80039a0:	20000100 	.word	0x20000100
 80039a4:	200007cc 	.word	0x200007cc
 80039a8:	200008cc 	.word	0x200008cc
 80039ac:	2000010c 	.word	0x2000010c
	    				       	TempBuffer[0] = HoldBuffer[3];
 80039b0:	485a      	ldr	r0, [pc, #360]	; (8003b1c <main+0x81c>)
	    				    	TempBuffer[2] = HoldBuffer[5];
 80039b2:	f898 1005 	ldrb.w	r1, [r8, #5]
	    				       	TempBuffer[0] = HoldBuffer[3];
 80039b6:	f898 3003 	ldrb.w	r3, [r8, #3]
	    				    	TempBuffer[1] = HoldBuffer[4];
 80039ba:	f898 2004 	ldrb.w	r2, [r8, #4]
	    				    	TempBuffer[3] = HoldBuffer[6];
 80039be:	f898 7006 	ldrb.w	r7, [r8, #6]
	    				    	TempBuffer[2] = HoldBuffer[5];
 80039c2:	7081      	strb	r1, [r0, #2]
	    				    	TempBuffer[4] = HoldBuffer[7];
 80039c4:	f898 1007 	ldrb.w	r1, [r8, #7]
	    				       	TempBuffer[0] = HoldBuffer[3];
 80039c8:	7003      	strb	r3, [r0, #0]
	    				    	TempBuffer[1] = HoldBuffer[4];
 80039ca:	7042      	strb	r2, [r0, #1]
	    				    	TempBuffer[3] = HoldBuffer[6];
 80039cc:	70c7      	strb	r7, [r0, #3]
	    				    	TempBuffer[4] = HoldBuffer[7];
 80039ce:	7101      	strb	r1, [r0, #4]
	if (*string == '\0')
 80039d0:	b1f3      	cbz	r3, 8003a10 <main+0x710>
	if (*string == '-')
 80039d2:	2b2d      	cmp	r3, #45	; 0x2d
 80039d4:	d058      	beq.n	8003a88 <main+0x788>
 80039d6:	4852      	ldr	r0, [pc, #328]	; (8003b20 <main+0x820>)
 80039d8:	f04f 0e01 	mov.w	lr, #1
	while ((*string >= '0') &&(*string <= '9'))
 80039dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80039e0:	b2cb      	uxtb	r3, r1
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	d811      	bhi.n	8003a0e <main+0x70e>
 80039ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		sum = 10 * sum;
 80039ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		sum = sum + (*string - 0x30);
 80039f2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
	while ((*string >= '0') &&(*string <= '9'))
 80039f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80039fa:	fa5f fc81 	uxtb.w	ip, r1
		sum = sum + (*string - 0x30);
 80039fe:	b29a      	uxth	r2, r3
	while ((*string >= '0') &&(*string <= '9'))
 8003a00:	f1bc 0f09 	cmp.w	ip, #9
		sum = sum + (*string - 0x30);
 8003a04:	b213      	sxth	r3, r2
	while ((*string >= '0') &&(*string <= '9'))
 8003a06:	d9f0      	bls.n	80039ea <main+0x6ea>
 8003a08:	fb12 f30e 	smulbb	r3, r2, lr
 8003a0c:	b21b      	sxth	r3, r3
	*value = minus * sum;
 8003a0e:	8033      	strh	r3, [r6, #0]
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferF,sizeof(TransmitBufferF)-1,5);
 8003a10:	2305      	movs	r3, #5
 8003a12:	2204      	movs	r2, #4
 8003a14:	4943      	ldr	r1, [pc, #268]	; (8003b24 <main+0x824>)
 8003a16:	4844      	ldr	r0, [pc, #272]	; (8003b28 <main+0x828>)
 8003a18:	f7fe fe24 	bl	8002664 <HAL_UART_Transmit>
	    				    	break;
 8003a1c:	e779      	b.n	8003912 <main+0x612>
	    	  	  	  	  		Element = HoldBuffer[3];
 8003a1e:	f898 3003 	ldrb.w	r3, [r8, #3]
	    	  	  	  	  		Element = Element - 48;
 8003a22:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <main+0x82c>)
 8003a24:	3b30      	subs	r3, #48	; 0x30
 8003a26:	6013      	str	r3, [r2, #0]
	    	  	  	  		    break;
 8003a28:	e773      	b.n	8003912 <main+0x612>
	    	  	  	  	  		ValveOpen = HoldBuffer[3];
 8003a2a:	f898 3003 	ldrb.w	r3, [r8, #3]
	    	  	  	  	  		ValveOpen = ValveOpen - 48;
 8003a2e:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <main+0x830>)
 8003a30:	3b30      	subs	r3, #48	; 0x30
 8003a32:	6013      	str	r3, [r2, #0]
	    	  	  	  		    break;
 8003a34:	e76d      	b.n	8003912 <main+0x612>
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferA,sizeof(TransmitBufferA)-1,5);
 8003a36:	2305      	movs	r3, #5
 8003a38:	220d      	movs	r2, #13
 8003a3a:	493e      	ldr	r1, [pc, #248]	; (8003b34 <main+0x834>)
 8003a3c:	483a      	ldr	r0, [pc, #232]	; (8003b28 <main+0x828>)
 8003a3e:	f7fe fe11 	bl	8002664 <HAL_UART_Transmit>
	    				    	break;
 8003a42:	e766      	b.n	8003912 <main+0x612>
	while ((*string >= '0') &&(*string <= '9'))
 8003a44:	f898 1001 	ldrb.w	r1, [r8, #1]
 8003a48:	3930      	subs	r1, #48	; 0x30
 8003a4a:	b2cb      	uxtb	r3, r1
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d817      	bhi.n	8003a80 <main+0x780>
		string++;
 8003a50:	4839      	ldr	r0, [pc, #228]	; (8003b38 <main+0x838>)
		minus = -1;
 8003a52:	f04f 3cff 	mov.w	ip, #4294967295
 8003a56:	e5a2      	b.n	800359e <main+0x29e>
	    				      		TransmitBufferK[position] = 'P';
 8003a58:	4602      	mov	r2, r0
	    				      		TransmitBufferK[position] = 'O';
 8003a5a:	4f38      	ldr	r7, [pc, #224]	; (8003b3c <main+0x83c>)
	    				      		TransmitBufferK[position] = 'P';
 8003a5c:	441a      	add	r2, r3
	    				      		TransmitBufferK[position] = 'O';
 8003a5e:	204f      	movs	r0, #79	; 0x4f
 8003a60:	5478      	strb	r0, [r7, r1]
	    				      		TransmitBufferK[position] = 'P';
 8003a62:	f04f 0e50 	mov.w	lr, #80	; 0x50
	    				      		TransmitBufferK[position] = 'E';
 8003a66:	2045      	movs	r0, #69	; 0x45
    				      			position++;
 8003a68:	1d59      	adds	r1, r3, #5
    				      			TransmitBufferK[position] = 'N';
 8003a6a:	234e      	movs	r3, #78	; 0x4e
	    				      		TransmitBufferK[position] = 'P';
 8003a6c:	f882 e002 	strb.w	lr, [r2, #2]
	    				      		TransmitBufferK[position] = 'E';
 8003a70:	70d0      	strb	r0, [r2, #3]
    				      			TransmitBufferK[position] = 'N';
 8003a72:	7113      	strb	r3, [r2, #4]
 8003a74:	e72a      	b.n	80038cc <main+0x5cc>
	    				      		TransmitBufferK[position] = 'N';
 8003a76:	4831      	ldr	r0, [pc, #196]	; (8003b3c <main+0x83c>)
 8003a78:	224e      	movs	r2, #78	; 0x4e
 8003a7a:	54c2      	strb	r2, [r0, r3]
	    				      		position++;
 8003a7c:	1ccb      	adds	r3, r1, #3
 8003a7e:	e708      	b.n	8003892 <main+0x592>
	*value = minus * sum;
 8003a80:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <main+0x840>)
 8003a82:	f8a3 b000 	strh.w	fp, [r3]
 8003a86:	e744      	b.n	8003912 <main+0x612>
	if (*string == '-')
 8003a88:	4613      	mov	r3, r2
 8003a8a:	f64f 7eff 	movw	lr, #65535	; 0xffff
		string++;
 8003a8e:	482d      	ldr	r0, [pc, #180]	; (8003b44 <main+0x844>)
 8003a90:	e7a4      	b.n	80039dc <main+0x6dc>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 8003a92:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <main+0x81c>)
 8003a94:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003a98:	f1be 0f0a 	cmp.w	lr, #10
 8003a9c:	f47f af30 	bne.w	8003900 <main+0x600>
	    				    		HAL_UART_Transmit(&huart1, TransmitBufferG,6,5);
 8003aa0:	4929      	ldr	r1, [pc, #164]	; (8003b48 <main+0x848>)
	    				    		TransmitBufferG[3] = TempBuffer[0];
 8003aa2:	f892 c000 	ldrb.w	ip, [r2]
	    				    		TransmitBufferG[4] = '\r';
 8003aa6:	710b      	strb	r3, [r1, #4]
	    				    		HAL_UART_Transmit(&huart1, TransmitBufferG,6,5);
 8003aa8:	2206      	movs	r2, #6
 8003aaa:	2305      	movs	r3, #5
 8003aac:	481e      	ldr	r0, [pc, #120]	; (8003b28 <main+0x828>)
	    				    		TransmitBufferG[5] = '\n';
 8003aae:	f881 e005 	strb.w	lr, [r1, #5]
	    				    		TransmitBufferG[3] = TempBuffer[0];
 8003ab2:	f881 c003 	strb.w	ip, [r1, #3]
	    				    		HAL_UART_Transmit(&huart1, TransmitBufferG,6,5);
 8003ab6:	f7fe fdd5 	bl	8002664 <HAL_UART_Transmit>
 8003aba:	e71e      	b.n	80038fa <main+0x5fa>
	    				    	if(TempBuffer[3] == '\r' && TempBuffer[4] == '\n')
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <main+0x81c>)
 8003abe:	7919      	ldrb	r1, [r3, #4]
 8003ac0:	290a      	cmp	r1, #10
 8003ac2:	f47f af26 	bne.w	8003912 <main+0x612>
	    							TransmitBufferGH[3] = TempBuffer[0];
 8003ac6:	f893 c000 	ldrb.w	ip, [r3]
	    							TransmitBufferGH[4] = TempBuffer[1];
 8003aca:	7858      	ldrb	r0, [r3, #1]
	    							TransmitBufferGH[5] = TempBuffer[2];
 8003acc:	f893 e002 	ldrb.w	lr, [r3, #2]
	    							TransmitBufferGH[6] = '\r';
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <main+0x84c>)
 8003ad2:	719a      	strb	r2, [r3, #6]
	    							TransmitBufferGH[7] = '\n';
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <main+0x84c>)
 8003ad6:	71d1      	strb	r1, [r2, #7]
	    							TransmitBufferGH[3] = TempBuffer[0];
 8003ad8:	491c      	ldr	r1, [pc, #112]	; (8003b4c <main+0x84c>)
	    							HAL_UART_Transmit(&huart1, TransmitBufferGH,8,5);
 8003ada:	2305      	movs	r3, #5
	    							TransmitBufferGH[4] = TempBuffer[1];
 8003adc:	7108      	strb	r0, [r1, #4]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGH,8,5);
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4811      	ldr	r0, [pc, #68]	; (8003b28 <main+0x828>)
	    							TransmitBufferGH[3] = TempBuffer[0];
 8003ae2:	f881 c003 	strb.w	ip, [r1, #3]
	    							TransmitBufferGH[5] = TempBuffer[2];
 8003ae6:	f881 e005 	strb.w	lr, [r1, #5]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGH,8,5);
 8003aea:	f7fe fdbb 	bl	8002664 <HAL_UART_Transmit>
 8003aee:	e710      	b.n	8003912 <main+0x612>
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 8003af0:	2a0a      	cmp	r2, #10
 8003af2:	f47f af0b 	bne.w	800390c <main+0x60c>
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8003af6:	4916      	ldr	r1, [pc, #88]	; (8003b50 <main+0x850>)
	    							TransmitBufferGT[3] = TempBuffer[0];
 8003af8:	7818      	ldrb	r0, [r3, #0]
	    							TransmitBufferGT[4] = TempBuffer[1];
 8003afa:	f893 c001 	ldrb.w	ip, [r3, #1]
	    							TransmitBufferGT[6] = '\n';
 8003afe:	718a      	strb	r2, [r1, #6]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8003b00:	2305      	movs	r3, #5
 8003b02:	2207      	movs	r2, #7
	    							TransmitBufferGT[3] = TempBuffer[0];
 8003b04:	70c8      	strb	r0, [r1, #3]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8003b06:	4808      	ldr	r0, [pc, #32]	; (8003b28 <main+0x828>)
	    							TransmitBufferGT[5] = '\r';
 8003b08:	f881 e005 	strb.w	lr, [r1, #5]
	    							TransmitBufferGT[4] = TempBuffer[1];
 8003b0c:	f881 c004 	strb.w	ip, [r1, #4]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8003b10:	f7fe fda8 	bl	8002664 <HAL_UART_Transmit>
 8003b14:	4b01      	ldr	r3, [pc, #4]	; (8003b1c <main+0x81c>)
 8003b16:	78da      	ldrb	r2, [r3, #3]
 8003b18:	e6f8      	b.n	800390c <main+0x60c>
 8003b1a:	bf00      	nop
 8003b1c:	200008cc 	.word	0x200008cc
 8003b20:	20000a23 	.word	0x20000a23
 8003b24:	20000010 	.word	0x20000010
 8003b28:	200007cc 	.word	0x200007cc
 8003b2c:	200000ec 	.word	0x200000ec
 8003b30:	20000100 	.word	0x20000100
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000a21 	.word	0x20000a21
 8003b3c:	20000034 	.word	0x20000034
 8003b40:	20000abe 	.word	0x20000abe
 8003b44:	20000a24 	.word	0x20000a24
 8003b48:	20000018 	.word	0x20000018
 8003b4c:	20000020 	.word	0x20000020
 8003b50:	2000002c 	.word	0x2000002c

08003b54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_MspInit+0x78>)
{
 8003b56:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	619a      	str	r2, [r3, #24]
 8003b60:	699b      	ldr	r3, [r3, #24]
{
 8003b62:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b6a:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b6e:	f7fd fd61 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	4611      	mov	r1, r2
 8003b76:	f06f 000b 	mvn.w	r0, #11
 8003b7a:	f7fd fd6d 	bl	8001658 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4611      	mov	r1, r2
 8003b82:	f06f 000a 	mvn.w	r0, #10
 8003b86:	f7fd fd67 	bl	8001658 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f06f 0009 	mvn.w	r0, #9
 8003b92:	f7fd fd61 	bl	8001658 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	4611      	mov	r1, r2
 8003b9a:	f06f 0004 	mvn.w	r0, #4
 8003b9e:	f7fd fd5b 	bl	8001658 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	f06f 0003 	mvn.w	r0, #3
 8003baa:	f7fd fd55 	bl	8001658 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	f06f 0001 	mvn.w	r0, #1
 8003bb6:	f7fd fd4f 	bl	8001658 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	f7fd fd49 	bl	8001658 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bc6:	b003      	add	sp, #12
 8003bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003bd0:	6803      	ldr	r3, [r0, #0]
 8003bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd6:	d000      	beq.n	8003bda <HAL_ADC_MspInit+0xa>
 8003bd8:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bda:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003bde:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8003be2:	b530      	push	{r4, r5, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003be4:	695a      	ldr	r2, [r3, #20]
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be6:	4812      	ldr	r0, [pc, #72]	; (8003c30 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003be8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bec:	615a      	str	r2, [r3, #20]
 8003bee:	695b      	ldr	r3, [r3, #20]
{
 8003bf0:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bf8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfa:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bfc:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c00:	9301      	str	r3, [sp, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c02:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c04:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c08:	f7fd fdb6 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0c:	a901      	add	r1, sp, #4
 8003c0e:	4809      	ldr	r0, [pc, #36]	; (8003c34 <HAL_ADC_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c10:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c12:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	f7fd fdaf 	bl	8001778 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	2012      	movs	r0, #18
 8003c20:	f7fd fd1a 	bl	8001658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003c24:	2012      	movs	r0, #18
 8003c26:	f7fd fd4d 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c2a:	b007      	add	sp, #28
 8003c2c:	bd30      	pop	{r4, r5, pc}
 8003c2e:	bf00      	nop
 8003c30:	48000800 	.word	0x48000800
 8003c34:	48000400 	.word	0x48000400

08003c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003c38:	6802      	ldr	r2, [r0, #0]
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_UART_MspInit+0x54>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d000      	beq.n	8003c42 <HAL_UART_MspInit+0xa>
 8003c40:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c42:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 8003c46:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c48:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	4811      	ldr	r0, [pc, #68]	; (8003c90 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	699b      	ldr	r3, [r3, #24]
{
 8003c54:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c5e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c60:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c62:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c64:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6a:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c6c:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c6e:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c74:	f7fd fd80 	bl	8001778 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	2025      	movs	r0, #37	; 0x25
 8003c7e:	f7fd fceb 	bl	8001658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c82:	2025      	movs	r0, #37	; 0x25
 8003c84:	f7fd fd1e 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c88:	b007      	add	sp, #28
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	48000800 	.word	0x48000800

08003c94 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c96:	f7fc fed9 	bl	8000a4c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003c9e:	f7fd bd43 	b.w	8001728 <HAL_SYSTICK_IRQHandler>
 8003ca2:	bf00      	nop

08003ca4 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <ADC1_2_IRQHandler+0x8>)
 8003ca6:	f7fd b97b 	b.w	8000fa0 <HAL_ADC_IRQHandler>
 8003caa:	bf00      	nop
 8003cac:	200006e8 	.word	0x200006e8

08003cb0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8003cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <USART1_IRQHandler+0x10>)
 8003cb4:	f7fe fe10 	bl	80028d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  ReceiveFlag = 1;
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <USART1_IRQHandler+0x14>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	bd08      	pop	{r3, pc}
 8003cc0:	200007cc 	.word	0x200007cc
 8003cc4:	20000ac0 	.word	0x20000ac0

08003cc8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc8:	4917      	ldr	r1, [pc, #92]	; (8003d28 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003cce:	4819      	ldr	r0, [pc, #100]	; (8003d34 <SystemInit+0x6c>)
{
 8003cd0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd2:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8003cd6:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8003cda:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8003cde:	681c      	ldr	r4, [r3, #0]
 8003ce0:	f044 0401 	orr.w	r4, r4, #1
 8003ce4:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8003ce6:	685c      	ldr	r4, [r3, #4]
 8003ce8:	4022      	ands	r2, r4
 8003cea:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003cf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cf6:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cfe:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003d06:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0a:	f022 020f 	bic.w	r2, r2, #15
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003d12:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d14:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d1a:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8003d1c:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d1e:	608a      	str	r2, [r1, #8]
#endif
}
 8003d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000ed00 	.word	0xe000ed00
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	f87fc00c 	.word	0xf87fc00c
 8003d34:	ff00fccc 	.word	0xff00fccc

08003d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d3e:	e003      	b.n	8003d48 <LoopCopyDataInit>

08003d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d46:	3104      	adds	r1, #4

08003d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d48:	480b      	ldr	r0, [pc, #44]	; (8003d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d50:	d3f6      	bcc.n	8003d40 <CopyDataInit>
	ldr	r2, =_sbss
 8003d52:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d54:	e002      	b.n	8003d5c <LoopFillZerobss>

08003d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d58:	f842 3b04 	str.w	r3, [r2], #4

08003d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <LoopForever+0x16>)
	cmp	r2, r3
 8003d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d60:	d3f9      	bcc.n	8003d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d62:	f7ff ffb1 	bl	8003cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d66:	f000 f811 	bl	8003d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d6a:	f7ff fac9 	bl	8003300 <main>

08003d6e <LoopForever>:

LoopForever:
    b LoopForever
 8003d6e:	e7fe      	b.n	8003d6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d70:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003d74:	08003f78 	.word	0x08003f78
	ldr	r0, =_sdata
 8003d78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d7c:	200000cc 	.word	0x200000cc
	ldr	r2, =_sbss
 8003d80:	200000cc 	.word	0x200000cc
	ldr	r3, = _ebss
 8003d84:	20000c98 	.word	0x20000c98

08003d88 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d88:	e7fe      	b.n	8003d88 <BusFault_Handler>
	...

08003d8c <__libc_init_array>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	4e0d      	ldr	r6, [pc, #52]	; (8003dc4 <__libc_init_array+0x38>)
 8003d90:	4c0d      	ldr	r4, [pc, #52]	; (8003dc8 <__libc_init_array+0x3c>)
 8003d92:	1ba4      	subs	r4, r4, r6
 8003d94:	10a4      	asrs	r4, r4, #2
 8003d96:	2500      	movs	r5, #0
 8003d98:	42a5      	cmp	r5, r4
 8003d9a:	d109      	bne.n	8003db0 <__libc_init_array+0x24>
 8003d9c:	4e0b      	ldr	r6, [pc, #44]	; (8003dcc <__libc_init_array+0x40>)
 8003d9e:	4c0c      	ldr	r4, [pc, #48]	; (8003dd0 <__libc_init_array+0x44>)
 8003da0:	f000 f8b8 	bl	8003f14 <_init>
 8003da4:	1ba4      	subs	r4, r4, r6
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	2500      	movs	r5, #0
 8003daa:	42a5      	cmp	r5, r4
 8003dac:	d105      	bne.n	8003dba <__libc_init_array+0x2e>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003db4:	4798      	blx	r3
 8003db6:	3501      	adds	r5, #1
 8003db8:	e7ee      	b.n	8003d98 <__libc_init_array+0xc>
 8003dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dbe:	4798      	blx	r3
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	e7f2      	b.n	8003daa <__libc_init_array+0x1e>
 8003dc4:	08003f70 	.word	0x08003f70
 8003dc8:	08003f70 	.word	0x08003f70
 8003dcc:	08003f70 	.word	0x08003f70
 8003dd0:	08003f74 	.word	0x08003f74

08003dd4 <sqrtf>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	ed2d 8b02 	vpush	{d8}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	eeb0 8a40 	vmov.f32	s16, s0
 8003de0:	f000 f848 	bl	8003e74 <__ieee754_sqrtf>
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <sqrtf+0x98>)
 8003de6:	f993 4000 	ldrsb.w	r4, [r3]
 8003dea:	1c63      	adds	r3, r4, #1
 8003dec:	d02c      	beq.n	8003e48 <sqrtf+0x74>
 8003dee:	eeb4 8a48 	vcmp.f32	s16, s16
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d627      	bvs.n	8003e48 <sqrtf+0x74>
 8003df8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d522      	bpl.n	8003e48 <sqrtf+0x74>
 8003e02:	2301      	movs	r3, #1
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <sqrtf+0x9c>)
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	ee18 0a10 	vmov	r0, s16
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9308      	str	r3, [sp, #32]
 8003e12:	f7fc fb3d 	bl	8000490 <__aeabi_f2d>
 8003e16:	2200      	movs	r2, #0
 8003e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e20:	2300      	movs	r3, #0
 8003e22:	b9ac      	cbnz	r4, 8003e50 <sqrtf+0x7c>
 8003e24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e28:	4668      	mov	r0, sp
 8003e2a:	f000 f86a 	bl	8003f02 <matherr>
 8003e2e:	b1b8      	cbz	r0, 8003e60 <sqrtf+0x8c>
 8003e30:	9b08      	ldr	r3, [sp, #32]
 8003e32:	b11b      	cbz	r3, 8003e3c <sqrtf+0x68>
 8003e34:	f000 f868 	bl	8003f08 <__errno>
 8003e38:	9b08      	ldr	r3, [sp, #32]
 8003e3a:	6003      	str	r3, [r0, #0]
 8003e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e40:	f7fc fd8c 	bl	800095c <__aeabi_d2f>
 8003e44:	ee00 0a10 	vmov	s0, r0
 8003e48:	b00a      	add	sp, #40	; 0x28
 8003e4a:	ecbd 8b02 	vpop	{d8}
 8003e4e:	bd10      	pop	{r4, pc}
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fc9a 	bl	800078c <__aeabi_ddiv>
 8003e58:	2c02      	cmp	r4, #2
 8003e5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e5e:	d1e3      	bne.n	8003e28 <sqrtf+0x54>
 8003e60:	f000 f852 	bl	8003f08 <__errno>
 8003e64:	2321      	movs	r3, #33	; 0x21
 8003e66:	6003      	str	r3, [r0, #0]
 8003e68:	e7e2      	b.n	8003e30 <sqrtf+0x5c>
 8003e6a:	bf00      	nop
 8003e6c:	20000064 	.word	0x20000064
 8003e70:	08003f68 	.word	0x08003f68

08003e74 <__ieee754_sqrtf>:
 8003e74:	ee10 2a10 	vmov	r2, s0
 8003e78:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003e7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	d302      	bcc.n	8003e8a <__ieee754_sqrtf+0x16>
 8003e84:	eea0 0a00 	vfma.f32	s0, s0, s0
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
 8003e8a:	b3b1      	cbz	r1, 8003efa <__ieee754_sqrtf+0x86>
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	da04      	bge.n	8003e9a <__ieee754_sqrtf+0x26>
 8003e90:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003e94:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003e9e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003ea2:	d204      	bcs.n	8003eae <__ieee754_sqrtf+0x3a>
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	0210      	lsls	r0, r2, #8
 8003ea8:	d528      	bpl.n	8003efc <__ieee754_sqrtf+0x88>
 8003eaa:	3901      	subs	r1, #1
 8003eac:	1a5b      	subs	r3, r3, r1
 8003eae:	3b7f      	subs	r3, #127	; 0x7f
 8003eb0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003eb4:	07d9      	lsls	r1, r3, #31
 8003eb6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003eba:	bf48      	it	mi
 8003ebc:	0052      	lslmi	r2, r2, #1
 8003ebe:	1059      	asrs	r1, r3, #1
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	0052      	lsls	r2, r2, #1
 8003ec4:	2419      	movs	r4, #25
 8003ec6:	461e      	mov	r6, r3
 8003ec8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003ecc:	1835      	adds	r5, r6, r0
 8003ece:	4295      	cmp	r5, r2
 8003ed0:	bfde      	ittt	le
 8003ed2:	182e      	addle	r6, r5, r0
 8003ed4:	1b52      	suble	r2, r2, r5
 8003ed6:	181b      	addle	r3, r3, r0
 8003ed8:	3c01      	subs	r4, #1
 8003eda:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003ede:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003ee2:	d1f3      	bne.n	8003ecc <__ieee754_sqrtf+0x58>
 8003ee4:	b112      	cbz	r2, 8003eec <__ieee754_sqrtf+0x78>
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	105b      	asrs	r3, r3, #1
 8003eee:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8003ef2:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8003ef6:	ee00 3a10 	vmov	s0, r3
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	0052      	lsls	r2, r2, #1
 8003efe:	3101      	adds	r1, #1
 8003f00:	e7d1      	b.n	8003ea6 <__ieee754_sqrtf+0x32>

08003f02 <matherr>:
 8003f02:	2000      	movs	r0, #0
 8003f04:	4770      	bx	lr
	...

08003f08 <__errno>:
 8003f08:	4b01      	ldr	r3, [pc, #4]	; (8003f10 <__errno+0x8>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000068 	.word	0x20000068

08003f14 <_init>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr

08003f20 <_fini>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr
