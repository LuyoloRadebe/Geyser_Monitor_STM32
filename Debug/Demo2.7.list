
C:\Users\18301088\Desktop\Demo2.7\Debug\Demo2.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d0  20000000  08003d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
  7 .bss          00000948  200000d0  200000d0  000200d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a18  20000a18  000200d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a7b  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000243d  00000000  00000000  00033b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f11  00000000  00000000  00035fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008c8  00000000  00000000  0003bed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000878  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d3b3  00000000  00000000  0003d010  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008a20  00000000  00000000  0005a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a30ec  00000000  00000000  00062de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00105ecf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001800  00000000  00000000  00105f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d3c 	.word	0x08003d3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	08003d3c 	.word	0x08003d3c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_InitTick+0x24>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_InitTick+0x28>)
 8000a06:	fba3 3000 	umull	r3, r0, r3, r0
 8000a0a:	0980      	lsrs	r0, r0, #6
 8000a0c:	f000 ff1a 	bl	8001844 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	4621      	mov	r1, r4
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 fed6 	bl	80017c8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	20000064 	.word	0x20000064
 8000a24:	10624dd3 	.word	0x10624dd3

08000a28 <HAL_Init>:
{
 8000a28:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x20>)
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 feb5 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a40:	f002 ffa8 	bl	8003994 <HAL_MspInit>
}
 8000a44:	2000      	movs	r0, #0
 8000a46:	bd08      	pop	{r3, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a4c:	4a02      	ldr	r2, [pc, #8]	; (8000a58 <HAL_IncTick+0xc>)
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000110 	.word	0x20000110

08000a5c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <HAL_GetTick+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000110 	.word	0x20000110

08000a68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000a68:	4770      	bx	lr

08000a6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a6a:	4770      	bx	lr

08000a6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a6e:	6802      	ldr	r2, [r0, #0]
 8000a70:	6893      	ldr	r3, [r2, #8]
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d011      	beq.n	8000a9e <ADC_Disable+0x32>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d037      	beq.n	8000af0 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000a80:	6893      	ldr	r3, [r2, #8]
 8000a82:	f003 030d 	and.w	r3, r3, #13
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d011      	beq.n	8000aae <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a92:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f013 0f01 	tst.w	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <ADC_Disable+0x3e>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e7e8      	b.n	8000a7c <ADC_Disable+0x10>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e7e6      	b.n	8000a7c <ADC_Disable+0x10>
 8000aae:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000ab0:	6893      	ldr	r3, [r2, #8]
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6093      	str	r3, [r2, #8]
 8000ab8:	6803      	ldr	r3, [r0, #0]
 8000aba:	2203      	movs	r2, #3
 8000abc:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000abe:	f7ff ffcd 	bl	8000a5c <HAL_GetTick>
 8000ac2:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f013 0f01 	tst.w	r3, #1
 8000acc:	d00e      	beq.n	8000aec <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ace:	f7ff ffc5 	bl	8000a5c <HAL_GetTick>
 8000ad2:	1b40      	subs	r0, r0, r5
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f5      	bls.n	8000ac4 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
 8000aea:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000aec:	2000      	movs	r0, #0
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	2000      	movs	r0, #0
}
 8000af2:	bd38      	pop	{r3, r4, r5, pc}

08000af4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	f012 0f0c 	tst.w	r2, #12
 8000afc:	d062      	beq.n	8000bc4 <ADC_ConversionStop+0xd0>
{
 8000afe:	b570      	push	{r4, r5, r6, lr}
 8000b00:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000b08:	d002      	beq.n	8000b10 <ADC_ConversionStop+0x1c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000b0a:	69c2      	ldr	r2, [r0, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d038      	beq.n	8000b82 <ADC_ConversionStop+0x8e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000b10:	2960      	cmp	r1, #96	; 0x60
 8000b12:	d00c      	beq.n	8000b2e <ADC_ConversionStop+0x3a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	f012 0f04 	tst.w	r2, #4
 8000b1c:	d007      	beq.n	8000b2e <ADC_ConversionStop+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000b1e:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b20:	f012 0f02 	tst.w	r2, #2
 8000b24:	d103      	bne.n	8000b2e <ADC_ConversionStop+0x3a>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	f042 0210 	orr.w	r2, r2, #16
 8000b2c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000b2e:	290c      	cmp	r1, #12
 8000b30:	d00c      	beq.n	8000b4c <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	f012 0f08 	tst.w	r2, #8
 8000b3a:	d007      	beq.n	8000b4c <ADC_ConversionStop+0x58>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000b3c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000b3e:	f012 0f02 	tst.w	r2, #2
 8000b42:	d103      	bne.n	8000b4c <ADC_ConversionStop+0x58>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	f042 0220 	orr.w	r2, r2, #32
 8000b4a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8000b4c:	2960      	cmp	r1, #96	; 0x60
 8000b4e:	d035      	beq.n	8000bbc <ADC_ConversionStop+0xc8>
 8000b50:	296c      	cmp	r1, #108	; 0x6c
 8000b52:	d131      	bne.n	8000bb8 <ADC_ConversionStop+0xc4>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000b54:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000b56:	f7ff ff81 	bl	8000a5c <HAL_GetTick>
 8000b5a:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	421d      	tst	r5, r3
 8000b62:	d02d      	beq.n	8000bc0 <ADC_ConversionStop+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000b64:	f7ff ff7a 	bl	8000a5c <HAL_GetTick>
 8000b68:	1b80      	subs	r0, r0, r6
 8000b6a:	280b      	cmp	r0, #11
 8000b6c:	d9f6      	bls.n	8000b5c <ADC_ConversionStop+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
 8000b80:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8000b82:	6982      	ldr	r2, [r0, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000b84:	2a01      	cmp	r2, #1
 8000b86:	d1c3      	bne.n	8000b10 <ADC_ConversionStop+0x1c>
 8000b88:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000b90:	d10e      	bne.n	8000bb0 <ADC_ConversionStop+0xbc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <ADC_ConversionStop+0xd4>)
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d801      	bhi.n	8000b9c <ADC_ConversionStop+0xa8>
        Conversion_Timeout_CPU_cycles ++;
 8000b98:	3201      	adds	r2, #1
 8000b9a:	e7f6      	b.n	8000b8a <ADC_ConversionStop+0x96>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64a3      	str	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000bb4:	210c      	movs	r1, #12
 8000bb6:	e7ab      	b.n	8000b10 <ADC_ConversionStop+0x1c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000bb8:	2504      	movs	r5, #4
        break;
 8000bba:	e7cc      	b.n	8000b56 <ADC_ConversionStop+0x62>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000bbc:	2508      	movs	r5, #8
 8000bbe:	e7ca      	b.n	8000b56 <ADC_ConversionStop+0x62>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4770      	bx	lr
 8000bc8:	000993ff 	.word	0x000993ff

08000bcc <ADC_Enable>:
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bce:	6802      	ldr	r2, [r0, #0]
 8000bd0:	6893      	ldr	r3, [r2, #8]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d010      	beq.n	8000bfc <ADC_Enable+0x30>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d133      	bne.n	8000c48 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000be0:	6891      	ldr	r1, [r2, #8]
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <ADC_Enable+0x80>)
 8000be4:	4219      	tst	r1, r3
 8000be6:	d011      	beq.n	8000c0c <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f013 0f01 	tst.w	r3, #1
 8000c02:	d101      	bne.n	8000c08 <ADC_Enable+0x3c>
 8000c04:	2300      	movs	r3, #0
 8000c06:	e7e9      	b.n	8000bdc <ADC_Enable+0x10>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e7e7      	b.n	8000bdc <ADC_Enable+0x10>
 8000c0c:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000c0e:	6893      	ldr	r3, [r2, #8]
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000c16:	f7ff ff21 	bl	8000a5c <HAL_GetTick>
 8000c1a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f013 0f01 	tst.w	r3, #1
 8000c24:	d10e      	bne.n	8000c44 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c26:	f7ff ff19 	bl	8000a5c <HAL_GetTick>
 8000c2a:	1b40      	subs	r0, r0, r5
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f5      	bls.n	8000c1c <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000c44:	2000      	movs	r0, #0
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
 8000c48:	2000      	movs	r0, #0
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
 8000c4c:	8000003f 	.word	0x8000003f

08000c50 <HAL_ADC_Init>:
{
 8000c50:	b530      	push	{r4, r5, lr}
 8000c52:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	f000 80fb 	beq.w	8000e54 <HAL_ADC_Init+0x204>
 8000c5e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c62:	f013 0f10 	tst.w	r3, #16
 8000c66:	d151      	bne.n	8000d0c <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c6a:	b1ab      	cbz	r3, 8000c98 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c76:	d003      	beq.n	8000c80 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c78:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c7a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000c7e:	d046      	beq.n	8000d0e <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c82:	f023 0312 	bic.w	r3, r3, #18
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000c94:	2001      	movs	r0, #1
 8000c96:	e03a      	b.n	8000d0e <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000c98:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c9a:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c9c:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000c9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000ca2:	f002 feb5 	bl	8003a10 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7dc      	b.n	8000c6e <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f7ff fed9 	bl	8000a6c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cbc:	f013 0f10 	tst.w	r3, #16
 8000cc0:	d1d5      	bne.n	8000c6e <HAL_ADC_Init+0x1e>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d1d3      	bne.n	8000c6e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ccc:	f023 0302 	bic.w	r3, r3, #2
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cde:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	6893      	ldr	r3, [r2, #8]
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <HAL_ADC_Init+0x208>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a5b      	ldr	r2, [pc, #364]	; (8000e5c <HAL_ADC_Init+0x20c>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cfa:	005a      	lsls	r2, r3, #1
 8000cfc:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000cfe:	9b00      	ldr	r3, [sp, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0b4      	beq.n	8000c6e <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8000d04:	9b00      	ldr	r3, [sp, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	e7f8      	b.n	8000cfe <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0c:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d10:	f013 0f10 	tst.w	r3, #16
 8000d14:	f040 8095 	bne.w	8000e42 <HAL_ADC_Init+0x1f2>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000d22:	f013 0304 	ands.w	r3, r3, #4
 8000d26:	f040 808c 	bne.w	8000e42 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000d2c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000d30:	f041 0102 	orr.w	r1, r1, #2
 8000d34:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d36:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000d3a:	d055      	beq.n	8000de8 <HAL_ADC_Init+0x198>
 8000d3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000d40:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d42:	6891      	ldr	r1, [r2, #8]
 8000d44:	f001 0103 	and.w	r1, r1, #3
 8000d48:	2901      	cmp	r1, #1
 8000d4a:	d050      	beq.n	8000dee <HAL_ADC_Init+0x19e>
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	b972      	cbnz	r2, 8000d6e <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d50:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d52:	b12d      	cbz	r5, 8000d60 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d54:	68a9      	ldr	r1, [r5, #8]
 8000d56:	f001 0103 	and.w	r1, r1, #3
 8000d5a:	2901      	cmp	r1, #1
 8000d5c:	d04f      	beq.n	8000dfe <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d5e:	b932      	cbnz	r2, 8000d6e <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d60:	493f      	ldr	r1, [pc, #252]	; (8000e60 <HAL_ADC_Init+0x210>)
 8000d62:	688a      	ldr	r2, [r1, #8]
 8000d64:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d68:	6865      	ldr	r5, [r4, #4]
 8000d6a:	432a      	orrs	r2, r5
 8000d6c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000d6e:	69e2      	ldr	r2, [r4, #28]
 8000d70:	0351      	lsls	r1, r2, #13
 8000d72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d74:	2d01      	cmp	r5, #1
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_Init+0x12c>
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	68e1      	ldr	r1, [r4, #12]
 8000d80:	430b      	orrs	r3, r1
 8000d82:	68a1      	ldr	r1, [r4, #8]
 8000d84:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d88:	2901      	cmp	r1, #1
 8000d8a:	d03e      	beq.n	8000e0a <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d8e:	2a01      	cmp	r2, #1
 8000d90:	d002      	beq.n	8000d98 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d94:	430a      	orrs	r2, r1
 8000d96:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	6891      	ldr	r1, [r2, #8]
 8000d9c:	f011 0f0c 	tst.w	r1, #12
 8000da0:	d10b      	bne.n	8000dba <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000da2:	68d1      	ldr	r1, [r2, #12]
 8000da4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000da8:	f021 0102 	bic.w	r1, r1, #2
 8000dac:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000dae:	69a1      	ldr	r1, [r4, #24]
 8000db0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000db2:	0052      	lsls	r2, r2, #1
 8000db4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000db8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000dba:	6821      	ldr	r1, [r4, #0]
 8000dbc:	68cd      	ldr	r5, [r1, #12]
 8000dbe:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <HAL_ADC_Init+0x214>)
 8000dc0:	402a      	ands	r2, r5
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dc6:	6923      	ldr	r3, [r4, #16]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d031      	beq.n	8000e30 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd0:	f023 030f 	bic.w	r3, r3, #15
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6463      	str	r3, [r4, #68]	; 0x44
 8000de6:	e033      	b.n	8000e50 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000de8:	491f      	ldr	r1, [pc, #124]	; (8000e68 <HAL_ADC_Init+0x218>)
 8000dea:	9101      	str	r1, [sp, #4]
 8000dec:	e7a9      	b.n	8000d42 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	f012 0f01 	tst.w	r2, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_Init+0x1aa>
 8000df6:	2200      	movs	r2, #0
 8000df8:	e7a9      	b.n	8000d4e <HAL_ADC_Init+0xfe>
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	e7a7      	b.n	8000d4e <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dfe:	6829      	ldr	r1, [r5, #0]
 8000e00:	f011 0f01 	tst.w	r1, #1
 8000e04:	d0ab      	beq.n	8000d5e <HAL_ADC_Init+0x10e>
 8000e06:	2201      	movs	r2, #1
 8000e08:	e7a9      	b.n	8000d5e <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e0a:	b932      	cbnz	r2, 8000e1a <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e0e:	3a01      	subs	r2, #1
 8000e10:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	e7b8      	b.n	8000d8c <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e1c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	64a2      	str	r2, [r4, #72]	; 0x48
 8000e2e:	e7ad      	b.n	8000d8c <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e30:	6821      	ldr	r1, [r4, #0]
 8000e32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000e34:	f023 030f 	bic.w	r3, r3, #15
 8000e38:	6a22      	ldr	r2, [r4, #32]
 8000e3a:	3a01      	subs	r2, #1
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	630b      	str	r3, [r1, #48]	; 0x30
 8000e40:	e7c9      	b.n	8000dd6 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e44:	f023 0312 	bic.w	r3, r3, #18
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000e4e:	2001      	movs	r0, #1
}
 8000e50:	b017      	add	sp, #92	; 0x5c
 8000e52:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7fb      	b.n	8000e50 <HAL_ADC_Init+0x200>
 8000e58:	20000064 	.word	0x20000064
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	50000300 	.word	0x50000300
 8000e64:	fff0c007 	.word	0xfff0c007
 8000e68:	50000100 	.word	0x50000100

08000e6c <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e6c:	6803      	ldr	r3, [r0, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f013 0f04 	tst.w	r3, #4
 8000e74:	d002      	beq.n	8000e7c <HAL_ADC_Start_IT+0x10>
    tmp_hal_status = HAL_BUSY;
 8000e76:	2302      	movs	r3, #2
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000e7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_ADC_Start_IT+0x1c>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e7f7      	b.n	8000e78 <HAL_ADC_Start_IT+0xc>
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000e92:	f7ff fe9b 	bl	8000bcc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e96:	4603      	mov	r3, r0
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d17c      	bne.n	8000f96 <HAL_ADC_Start_IT+0x12a>
      ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e9e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eaa:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eac:	4a3c      	ldr	r2, [pc, #240]	; (8000fa0 <HAL_ADC_Start_IT+0x134>)
 8000eae:	6892      	ldr	r2, [r2, #8]
 8000eb0:	f012 0f1f 	tst.w	r2, #31
 8000eb4:	d043      	beq.n	8000f3e <HAL_ADC_Start_IT+0xd2>
 8000eb6:	6821      	ldr	r1, [r4, #0]
 8000eb8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000ebc:	d03f      	beq.n	8000f3e <HAL_ADC_Start_IT+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ebe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ec0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ec4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <HAL_ADC_Start_IT+0x138>)
 8000ec8:	4291      	cmp	r1, r2
 8000eca:	d048      	beq.n	8000f5e <HAL_ADC_Start_IT+0xf2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ecc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ece:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000ed2:	d051      	beq.n	8000f78 <HAL_ADC_Start_IT+0x10c>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ed4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ed6:	f022 0206 	bic.w	r2, r2, #6
 8000eda:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	6011      	str	r1, [r2, #0]
      switch(hadc->Init.EOCSelection)
 8000ee8:	6962      	ldr	r2, [r4, #20]
 8000eea:	2a08      	cmp	r2, #8
 8000eec:	d147      	bne.n	8000f7e <HAL_ADC_Start_IT+0x112>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eee:	6821      	ldr	r1, [r4, #0]
 8000ef0:	684a      	ldr	r2, [r1, #4]
 8000ef2:	f022 0204 	bic.w	r2, r2, #4
 8000ef6:	604a      	str	r2, [r1, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000ef8:	6821      	ldr	r1, [r4, #0]
 8000efa:	684a      	ldr	r2, [r1, #4]
 8000efc:	f042 0208 	orr.w	r2, r2, #8
 8000f00:	604a      	str	r2, [r1, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d040      	beq.n	8000f8a <HAL_ADC_Start_IT+0x11e>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_ADC_Start_IT+0x134>)
 8000f0a:	6892      	ldr	r2, [r2, #8]
 8000f0c:	f012 0f1f 	tst.w	r2, #31
 8000f10:	d00f      	beq.n	8000f32 <HAL_ADC_Start_IT+0xc6>
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_ADC_Start_IT+0x134>)
 8000f14:	6892      	ldr	r2, [r2, #8]
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2a05      	cmp	r2, #5
 8000f1c:	d009      	beq.n	8000f32 <HAL_ADC_Start_IT+0xc6>
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_ADC_Start_IT+0x134>)
 8000f20:	6892      	ldr	r2, [r2, #8]
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	2a09      	cmp	r2, #9
 8000f28:	d003      	beq.n	8000f32 <HAL_ADC_Start_IT+0xc6>
 8000f2a:	6822      	ldr	r2, [r4, #0]
 8000f2c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000f30:	d134      	bne.n	8000f9c <HAL_ADC_Start_IT+0x130>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f32:	6821      	ldr	r1, [r4, #0]
 8000f34:	688a      	ldr	r2, [r1, #8]
 8000f36:	f042 0204 	orr.w	r2, r2, #4
 8000f3a:	608a      	str	r2, [r1, #8]
 8000f3c:	e02e      	b.n	8000f9c <HAL_ADC_Start_IT+0x130>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f40:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000f44:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f46:	6822      	ldr	r2, [r4, #0]
 8000f48:	68d2      	ldr	r2, [r2, #12]
 8000f4a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f4e:	d0bd      	beq.n	8000ecc <HAL_ADC_Start_IT+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f50:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f5a:	6462      	str	r2, [r4, #68]	; 0x44
 8000f5c:	e7b6      	b.n	8000ecc <HAL_ADC_Start_IT+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f62:	68d2      	ldr	r2, [r2, #12]
 8000f64:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f68:	d0b0      	beq.n	8000ecc <HAL_ADC_Start_IT+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f74:	6462      	str	r2, [r4, #68]	; 0x44
 8000f76:	e7a9      	b.n	8000ecc <HAL_ADC_Start_IT+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f7c:	e7ae      	b.n	8000edc <HAL_ADC_Start_IT+0x70>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f7e:	6821      	ldr	r1, [r4, #0]
 8000f80:	684a      	ldr	r2, [r1, #4]
 8000f82:	f042 020c 	orr.w	r2, r2, #12
 8000f86:	604a      	str	r2, [r1, #4]
          break;
 8000f88:	e7bb      	b.n	8000f02 <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f8a:	6821      	ldr	r1, [r4, #0]
 8000f8c:	684a      	ldr	r2, [r1, #4]
 8000f8e:	f022 0210 	bic.w	r2, r2, #16
 8000f92:	604a      	str	r2, [r1, #4]
 8000f94:	e7b8      	b.n	8000f08 <HAL_ADC_Start_IT+0x9c>
      __HAL_UNLOCK(hadc);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	50000300 	.word	0x50000300
 8000fa4:	50000100 	.word	0x50000100

08000fa8 <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000fa8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <HAL_ADC_Stop_IT+0xe>
 8000fb0:	2302      	movs	r3, #2
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4770      	bx	lr
{
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000fc0:	216c      	movs	r1, #108	; 0x6c
 8000fc2:	f7ff fd97 	bl	8000af4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b120      	cbz	r0, 8000fd4 <HAL_ADC_Stop_IT+0x2c>
  __HAL_UNLOCK(hadc);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	6853      	ldr	r3, [r2, #4]
 8000fd8:	f023 031c 	bic.w	r3, r3, #28
 8000fdc:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff fd44 	bl	8000a6c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d1ef      	bne.n	8000fca <HAL_ADC_Stop_IT+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 8000fea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fec:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	6462      	str	r2, [r4, #68]	; 0x44
 8000ffa:	e7e6      	b.n	8000fca <HAL_ADC_Stop_IT+0x22>

08000ffc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000ffc:	6803      	ldr	r3, [r0, #0]
 8000ffe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001000:	4770      	bx	lr

08001002 <HAL_ADCEx_InjectedConvCpltCallback>:
{
 8001002:	4770      	bx	lr

08001004 <HAL_ADCEx_InjectedQueueOverflowCallback>:
{
 8001004:	4770      	bx	lr

08001006 <HAL_ADCEx_LevelOutOfWindow2Callback>:
{
 8001006:	4770      	bx	lr

08001008 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8001008:	4770      	bx	lr
	...

0800100c <HAL_ADC_IRQHandler>:
{
 800100c:	b510      	push	{r4, lr}
 800100e:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f012 0f04 	tst.w	r2, #4
 8001018:	d003      	beq.n	8001022 <HAL_ADC_IRQHandler+0x16>
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	f012 0f04 	tst.w	r2, #4
 8001020:	d107      	bne.n	8001032 <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001022:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001024:	f012 0f08 	tst.w	r2, #8
 8001028:	d052      	beq.n	80010d0 <HAL_ADC_IRQHandler+0xc4>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	f012 0f08 	tst.w	r2, #8
 8001030:	d04e      	beq.n	80010d0 <HAL_ADC_IRQHandler+0xc4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001032:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001034:	f012 0f10 	tst.w	r2, #16
 8001038:	d103      	bne.n	8001042 <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800103a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800103c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001040:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001042:	4aa7      	ldr	r2, [pc, #668]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001044:	6892      	ldr	r2, [r2, #8]
 8001046:	f012 0f1f 	tst.w	r2, #31
 800104a:	d012      	beq.n	8001072 <HAL_ADC_IRQHandler+0x66>
 800104c:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 800104e:	6892      	ldr	r2, [r2, #8]
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2a05      	cmp	r2, #5
 8001056:	d00c      	beq.n	8001072 <HAL_ADC_IRQHandler+0x66>
 8001058:	4aa1      	ldr	r2, [pc, #644]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 800105a:	6892      	ldr	r2, [r2, #8]
 800105c:	f002 021f 	and.w	r2, r2, #31
 8001060:	2a09      	cmp	r2, #9
 8001062:	d006      	beq.n	8001072 <HAL_ADC_IRQHandler+0x66>
 8001064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001068:	d003      	beq.n	8001072 <HAL_ADC_IRQHandler+0x66>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800106a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106e:	68d1      	ldr	r1, [r2, #12]
 8001070:	e000      	b.n	8001074 <HAL_ADC_IRQHandler+0x68>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001072:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800107a:	d123      	bne.n	80010c4 <HAL_ADC_IRQHandler+0xb8>
 800107c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001080:	d120      	bne.n	80010c4 <HAL_ADC_IRQHandler+0xb8>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f012 0f08 	tst.w	r2, #8
 8001088:	d01c      	beq.n	80010c4 <HAL_ADC_IRQHandler+0xb8>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	f012 0f04 	tst.w	r2, #4
 8001090:	d110      	bne.n	80010b4 <HAL_ADC_IRQHandler+0xa8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	f022 020c 	bic.w	r2, r2, #12
 8001098:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800109a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800109c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010a0:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010a4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80010a8:	d10c      	bne.n	80010c4 <HAL_ADC_IRQHandler+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6463      	str	r3, [r4, #68]	; 0x44
 80010b2:	e007      	b.n	80010c4 <HAL_ADC_IRQHandler+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ConvCpltCallback(hadc);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f002 f963 	bl	8003390 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	220c      	movs	r2, #12
 80010ce:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	f012 0f20 	tst.w	r2, #32
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_IRQHandler+0xd6>
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	f012 0f20 	tst.w	r2, #32
 80010e0:	d107      	bne.n	80010f2 <HAL_ADC_IRQHandler+0xe6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80010e2:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80010e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010e8:	d071      	beq.n	80011ce <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010f0:	d06d      	beq.n	80011ce <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010f8:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80010fa:	4a79      	ldr	r2, [pc, #484]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 80010fc:	6892      	ldr	r2, [r2, #8]
 80010fe:	f012 0f1f 	tst.w	r2, #31
 8001102:	d012      	beq.n	800112a <HAL_ADC_IRQHandler+0x11e>
 8001104:	4a76      	ldr	r2, [pc, #472]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001106:	6892      	ldr	r2, [r2, #8]
 8001108:	f002 021f 	and.w	r2, r2, #31
 800110c:	2a05      	cmp	r2, #5
 800110e:	d00c      	beq.n	800112a <HAL_ADC_IRQHandler+0x11e>
 8001110:	4a73      	ldr	r2, [pc, #460]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001112:	6892      	ldr	r2, [r2, #8]
 8001114:	f002 021f 	and.w	r2, r2, #31
 8001118:	2a09      	cmp	r2, #9
 800111a:	d006      	beq.n	800112a <HAL_ADC_IRQHandler+0x11e>
 800111c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001120:	d003      	beq.n	800112a <HAL_ADC_IRQHandler+0x11e>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001126:	68d1      	ldr	r1, [r2, #12]
 8001128:	e000      	b.n	800112c <HAL_ADC_IRQHandler+0x120>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800112a:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800112c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8001132:	d009      	beq.n	8001148 <HAL_ADC_IRQHandler+0x13c>
 8001134:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001138:	d143      	bne.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800113a:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800113c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001140:	d13f      	bne.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001142:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001146:	d13c      	bne.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800114e:	d038      	beq.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001150:	4a63      	ldr	r2, [pc, #396]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001152:	6892      	ldr	r2, [r2, #8]
 8001154:	f012 0f1f 	tst.w	r2, #31
 8001158:	d012      	beq.n	8001180 <HAL_ADC_IRQHandler+0x174>
 800115a:	4a61      	ldr	r2, [pc, #388]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 800115c:	6892      	ldr	r2, [r2, #8]
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2a06      	cmp	r2, #6
 8001164:	d00c      	beq.n	8001180 <HAL_ADC_IRQHandler+0x174>
 8001166:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001168:	6892      	ldr	r2, [r2, #8]
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	2a07      	cmp	r2, #7
 8001170:	d006      	beq.n	8001180 <HAL_ADC_IRQHandler+0x174>
 8001172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001176:	d003      	beq.n	8001180 <HAL_ADC_IRQHandler+0x174>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800117c:	68d2      	ldr	r2, [r2, #12]
 800117e:	e000      	b.n	8001182 <HAL_ADC_IRQHandler+0x176>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001180:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001182:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001186:	d11c      	bne.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	f012 0f08 	tst.w	r2, #8
 800118e:	d110      	bne.n	80011b2 <HAL_ADC_IRQHandler+0x1a6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001196:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001198:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800119a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800119e:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011a6:	d10c      	bne.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6463      	str	r3, [r4, #68]	; 0x44
 80011b0:	e007      	b.n	80011c2 <HAL_ADC_IRQHandler+0x1b6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ff1d 	bl	8001002 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	2260      	movs	r2, #96	; 0x60
 80011cc:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80011d6:	d003      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x1d4>
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011de:	d136      	bne.n	800124e <HAL_ADC_IRQHandler+0x242>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80011e8:	d003      	beq.n	80011f2 <HAL_ADC_IRQHandler+0x1e6>
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011f0:	d138      	bne.n	8001264 <HAL_ADC_IRQHandler+0x258>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80011fa:	d003      	beq.n	8001204 <HAL_ADC_IRQHandler+0x1f8>
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001202:	d13b      	bne.n	800127c <HAL_ADC_IRQHandler+0x270>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f012 0f10 	tst.w	r2, #16
 800120c:	d015      	beq.n	800123a <HAL_ADC_IRQHandler+0x22e>
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	f012 0f10 	tst.w	r2, #16
 8001214:	d011      	beq.n	800123a <HAL_ADC_IRQHandler+0x22e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001216:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001218:	2a01      	cmp	r2, #1
 800121a:	d009      	beq.n	8001230 <HAL_ADC_IRQHandler+0x224>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800121c:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 800121e:	6892      	ldr	r2, [r2, #8]
 8001220:	f012 0f1f 	tst.w	r2, #31
 8001224:	d136      	bne.n	8001294 <HAL_ADC_IRQHandler+0x288>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f013 0f01 	tst.w	r3, #1
 800122c:	d139      	bne.n	80012a2 <HAL_ADC_IRQHandler+0x296>
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800122e:	2200      	movs	r2, #0
    if (overrun_error == 1U)
 8001230:	2a01      	cmp	r2, #1
 8001232:	d03a      	beq.n	80012aa <HAL_ADC_IRQHandler+0x29e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	2210      	movs	r2, #16
 8001238:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001242:	d003      	beq.n	800124c <HAL_ADC_IRQHandler+0x240>
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800124a:	d13a      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x2b6>
 800124c:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800124e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fc06 	bl	8000a68 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e7bd      	b.n	80011e0 <HAL_ADC_IRQHandler+0x1d4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001264:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff feca 	bl	8001006 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e7ba      	b.n	80011f2 <HAL_ADC_IRQHandler+0x1e6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800127c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800127e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001282:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff febf 	bl	8001008 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e7b7      	b.n	8001204 <HAL_ADC_IRQHandler+0x1f8>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800129c:	d103      	bne.n	80012a6 <HAL_ADC_IRQHandler+0x29a>
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800129e:	2200      	movs	r2, #0
 80012a0:	e7c6      	b.n	8001230 <HAL_ADC_IRQHandler+0x224>
          overrun_error = 1U;  
 80012a2:	2201      	movs	r2, #1
 80012a4:	e7c4      	b.n	8001230 <HAL_ADC_IRQHandler+0x224>
          overrun_error = 1U;  
 80012a6:	2201      	movs	r2, #1
 80012a8:	e7c2      	b.n	8001230 <HAL_ADC_IRQHandler+0x224>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80012aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff fbd5 	bl	8000a6a <HAL_ADC_ErrorCallback>
 80012c0:	e7b8      	b.n	8001234 <HAL_ADC_IRQHandler+0x228>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80012c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c8:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80012ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80012cc:	f042 0208 	orr.w	r2, r2, #8
 80012d0:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80012d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fe93 	bl	8001004 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80012de:	e7b5      	b.n	800124c <HAL_ADC_IRQHandler+0x240>
 80012e0:	50000300 	.word	0x50000300

080012e4 <HAL_ADC_ConfigChannel>:
{
 80012e4:	b470      	push	{r4, r5, r6}
 80012e6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80012e8:	2200      	movs	r2, #0
 80012ea:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80012ec:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80012f0:	2a01      	cmp	r2, #1
 80012f2:	f000 81ad 	beq.w	8001650 <HAL_ADC_ConfigChannel+0x36c>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2201      	movs	r2, #1
 80012fa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012fe:	6800      	ldr	r0, [r0, #0]
 8001300:	6882      	ldr	r2, [r0, #8]
 8001302:	f012 0f04 	tst.w	r2, #4
 8001306:	f040 8196 	bne.w	8001636 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	2a04      	cmp	r2, #4
 800130e:	d831      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001310:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001312:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001316:	0055      	lsls	r5, r2, #1
 8001318:	221f      	movs	r2, #31
 800131a:	40aa      	lsls	r2, r5
 800131c:	ea24 0202 	bic.w	r2, r4, r2
 8001320:	680c      	ldr	r4, [r1, #0]
 8001322:	40ac      	lsls	r4, r5
 8001324:	4322      	orrs	r2, r4
 8001326:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	6882      	ldr	r2, [r0, #8]
 800132c:	f012 0f0c 	tst.w	r2, #12
 8001330:	d168      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001332:	680a      	ldr	r2, [r1, #0]
 8001334:	2a09      	cmp	r2, #9
 8001336:	d94e      	bls.n	80013d6 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001338:	6984      	ldr	r4, [r0, #24]
 800133a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800133e:	3a1e      	subs	r2, #30
 8001340:	2507      	movs	r5, #7
 8001342:	4095      	lsls	r5, r2
 8001344:	ea24 0405 	bic.w	r4, r4, r5
 8001348:	688d      	ldr	r5, [r1, #8]
 800134a:	fa05 f202 	lsl.w	r2, r5, r2
 800134e:	4322      	orrs	r2, r4
 8001350:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001352:	6948      	ldr	r0, [r1, #20]
 8001354:	681c      	ldr	r4, [r3, #0]
 8001356:	68e2      	ldr	r2, [r4, #12]
 8001358:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800135c:	0052      	lsls	r2, r2, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001362:	6908      	ldr	r0, [r1, #16]
 8001364:	3801      	subs	r0, #1
 8001366:	2803      	cmp	r0, #3
 8001368:	f200 808f 	bhi.w	800148a <HAL_ADC_ConfigChannel+0x1a6>
 800136c:	e8df f000 	tbb	[pc, r0]
 8001370:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001374:	2a09      	cmp	r2, #9
 8001376:	d80e      	bhi.n	8001396 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001378:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800137a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800137e:	0055      	lsls	r5, r2, #1
 8001380:	3d1e      	subs	r5, #30
 8001382:	221f      	movs	r2, #31
 8001384:	40aa      	lsls	r2, r5
 8001386:	ea24 0202 	bic.w	r2, r4, r2
 800138a:	680c      	ldr	r4, [r1, #0]
 800138c:	fa04 f505 	lsl.w	r5, r4, r5
 8001390:	432a      	orrs	r2, r5
 8001392:	6342      	str	r2, [r0, #52]	; 0x34
 8001394:	e7c8      	b.n	8001328 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001396:	2a0e      	cmp	r2, #14
 8001398:	d80e      	bhi.n	80013b8 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800139a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800139c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013a0:	0055      	lsls	r5, r2, #1
 80013a2:	3d3c      	subs	r5, #60	; 0x3c
 80013a4:	221f      	movs	r2, #31
 80013a6:	40aa      	lsls	r2, r5
 80013a8:	ea24 0202 	bic.w	r2, r4, r2
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	fa04 f505 	lsl.w	r5, r4, r5
 80013b2:	432a      	orrs	r2, r5
 80013b4:	6382      	str	r2, [r0, #56]	; 0x38
 80013b6:	e7b7      	b.n	8001328 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013b8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80013ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013be:	0055      	lsls	r5, r2, #1
 80013c0:	3d5a      	subs	r5, #90	; 0x5a
 80013c2:	221f      	movs	r2, #31
 80013c4:	40aa      	lsls	r2, r5
 80013c6:	ea24 0202 	bic.w	r2, r4, r2
 80013ca:	680c      	ldr	r4, [r1, #0]
 80013cc:	fa04 f505 	lsl.w	r5, r4, r5
 80013d0:	432a      	orrs	r2, r5
 80013d2:	63c2      	str	r2, [r0, #60]	; 0x3c
 80013d4:	e7a8      	b.n	8001328 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013d6:	6944      	ldr	r4, [r0, #20]
 80013d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013dc:	2507      	movs	r5, #7
 80013de:	4095      	lsls	r5, r2
 80013e0:	ea24 0405 	bic.w	r4, r4, r5
 80013e4:	688d      	ldr	r5, [r1, #8]
 80013e6:	fa05 f202 	lsl.w	r2, r5, r2
 80013ea:	4322      	orrs	r2, r4
 80013ec:	6142      	str	r2, [r0, #20]
 80013ee:	e7b0      	b.n	8001352 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80013f2:	4d98      	ldr	r5, [pc, #608]	; (8001654 <HAL_ADC_ConfigChannel+0x370>)
 80013f4:	4005      	ands	r5, r0
 80013f6:	6808      	ldr	r0, [r1, #0]
 80013f8:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80013fc:	4315      	orrs	r5, r2
 80013fe:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001402:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6882      	ldr	r2, [r0, #8]
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	2a01      	cmp	r2, #1
 800140e:	d06f      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x20c>
 8001410:	2200      	movs	r2, #0
 8001412:	2a00      	cmp	r2, #0
 8001414:	f040 811a 	bne.w	800164c <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001418:	68cc      	ldr	r4, [r1, #12]
 800141a:	2c01      	cmp	r4, #1
 800141c:	d070      	beq.n	8001500 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800141e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001422:	680e      	ldr	r6, [r1, #0]
 8001424:	2501      	movs	r5, #1
 8001426:	40b5      	lsls	r5, r6
 8001428:	ea24 0405 	bic.w	r4, r4, r5
 800142c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001430:	6809      	ldr	r1, [r1, #0]
 8001432:	2910      	cmp	r1, #16
 8001434:	f000 808d 	beq.w	8001552 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001438:	2911      	cmp	r1, #17
 800143a:	f000 80af 	beq.w	800159c <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800143e:	2912      	cmp	r1, #18
 8001440:	f000 80b2 	beq.w	80015a8 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	2000      	movs	r0, #0
 8001446:	e0fb      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001448:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800144a:	4d82      	ldr	r5, [pc, #520]	; (8001654 <HAL_ADC_ConfigChannel+0x370>)
 800144c:	4005      	ands	r5, r0
 800144e:	6808      	ldr	r0, [r1, #0]
 8001450:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001454:	4315      	orrs	r5, r2
 8001456:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800145a:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 800145c:	e7d2      	b.n	8001404 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800145e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001460:	4d7c      	ldr	r5, [pc, #496]	; (8001654 <HAL_ADC_ConfigChannel+0x370>)
 8001462:	4005      	ands	r5, r0
 8001464:	6808      	ldr	r0, [r1, #0]
 8001466:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800146a:	4315      	orrs	r5, r2
 800146c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001470:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001472:	e7c7      	b.n	8001404 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001474:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001476:	4877      	ldr	r0, [pc, #476]	; (8001654 <HAL_ADC_ConfigChannel+0x370>)
 8001478:	4028      	ands	r0, r5
 800147a:	680d      	ldr	r5, [r1, #0]
 800147c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001480:	4302      	orrs	r2, r0
 8001482:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001486:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001488:	e7bc      	b.n	8001404 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800148a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800148c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001490:	6808      	ldr	r0, [r1, #0]
 8001492:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001496:	d01c      	beq.n	80014d2 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800149c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014a0:	680c      	ldr	r4, [r1, #0]
 80014a2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80014a6:	d019      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80014ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014b0:	680c      	ldr	r4, [r1, #0]
 80014b2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80014b6:	d016      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80014bc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80014c0:	680c      	ldr	r4, [r1, #0]
 80014c2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80014c6:	d19d      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014c8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80014ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014ce:	66c2      	str	r2, [r0, #108]	; 0x6c
 80014d0:	e798      	b.n	8001404 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014d2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80014d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014d8:	6622      	str	r2, [r4, #96]	; 0x60
 80014da:	e7dd      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014dc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80014de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014e2:	6642      	str	r2, [r0, #100]	; 0x64
 80014e4:	e7e0      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80014e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014ec:	6682      	str	r2, [r0, #104]	; 0x68
 80014ee:	e7e3      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014f0:	6802      	ldr	r2, [r0, #0]
 80014f2:	f012 0f01 	tst.w	r2, #1
 80014f6:	d101      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x218>
 80014f8:	2200      	movs	r2, #0
 80014fa:	e78a      	b.n	8001412 <HAL_ADC_ConfigChannel+0x12e>
 80014fc:	2201      	movs	r2, #1
 80014fe:	e788      	b.n	8001412 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001500:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001504:	680e      	ldr	r6, [r1, #0]
 8001506:	2501      	movs	r5, #1
 8001508:	40b5      	lsls	r5, r6
 800150a:	432c      	orrs	r4, r5
 800150c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001510:	6808      	ldr	r0, [r1, #0]
 8001512:	2809      	cmp	r0, #9
 8001514:	d90e      	bls.n	8001534 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001516:	681e      	ldr	r6, [r3, #0]
 8001518:	69b4      	ldr	r4, [r6, #24]
 800151a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800151e:	381b      	subs	r0, #27
 8001520:	2507      	movs	r5, #7
 8001522:	4085      	lsls	r5, r0
 8001524:	ea24 0405 	bic.w	r4, r4, r5
 8001528:	688d      	ldr	r5, [r1, #8]
 800152a:	fa05 f000 	lsl.w	r0, r5, r0
 800152e:	4320      	orrs	r0, r4
 8001530:	61b0      	str	r0, [r6, #24]
 8001532:	e77d      	b.n	8001430 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001534:	681e      	ldr	r6, [r3, #0]
 8001536:	6974      	ldr	r4, [r6, #20]
 8001538:	3001      	adds	r0, #1
 800153a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800153e:	2507      	movs	r5, #7
 8001540:	4085      	lsls	r5, r0
 8001542:	ea24 0405 	bic.w	r4, r4, r5
 8001546:	688d      	ldr	r5, [r1, #8]
 8001548:	fa05 f000 	lsl.w	r0, r5, r0
 800154c:	4320      	orrs	r0, r4
 800154e:	6170      	str	r0, [r6, #20]
 8001550:	e76e      	b.n	8001430 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001552:	4841      	ldr	r0, [pc, #260]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 8001554:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001556:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800155a:	f47f af6d 	bne.w	8001438 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800155e:	681c      	ldr	r4, [r3, #0]
 8001560:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001564:	d027      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0x2d2>
 8001566:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800156a:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800156c:	68a0      	ldr	r0, [r4, #8]
 800156e:	f000 0003 	and.w	r0, r0, #3
 8001572:	2801      	cmp	r0, #1
 8001574:	d022      	beq.n	80015bc <HAL_ADC_ConfigChannel+0x2d8>
 8001576:	2a00      	cmp	r2, #0
 8001578:	d157      	bne.n	800162a <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800157a:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800157c:	b135      	cbz	r5, 800158c <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800157e:	68a8      	ldr	r0, [r5, #8]
 8001580:	f000 0003 	and.w	r0, r0, #3
 8001584:	2801      	cmp	r0, #1
 8001586:	d01f      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001588:	2a00      	cmp	r2, #0
 800158a:	d14e      	bne.n	800162a <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800158c:	2910      	cmp	r1, #16
 800158e:	d021      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001590:	2911      	cmp	r1, #17
 8001592:	d039      	beq.n	8001608 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001594:	2912      	cmp	r1, #18
 8001596:	d041      	beq.n	800161c <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2000      	movs	r0, #0
 800159a:	e051      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800159c:	482e      	ldr	r0, [pc, #184]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 800159e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015a0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80015a4:	d0db      	beq.n	800155e <HAL_ADC_ConfigChannel+0x27a>
 80015a6:	e74a      	b.n	800143e <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015a8:	482b      	ldr	r0, [pc, #172]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 80015aa:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015ac:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80015b0:	d0d5      	beq.n	800155e <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2000      	movs	r0, #0
 80015b4:	e044      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <HAL_ADC_ConfigChannel+0x378>)
 80015b8:	9001      	str	r0, [sp, #4]
 80015ba:	e7d7      	b.n	800156c <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015bc:	6820      	ldr	r0, [r4, #0]
 80015be:	f010 0f01 	tst.w	r0, #1
 80015c2:	d0d8      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x292>
 80015c4:	2201      	movs	r2, #1
 80015c6:	e7d6      	b.n	8001576 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015c8:	6828      	ldr	r0, [r5, #0]
 80015ca:	f010 0f01 	tst.w	r0, #1
 80015ce:	d0db      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x2a4>
 80015d0:	2201      	movs	r2, #1
 80015d2:	e7d9      	b.n	8001588 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015d4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80015d8:	d1da      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80015da:	491f      	ldr	r1, [pc, #124]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 80015dc:	688a      	ldr	r2, [r1, #8]
 80015de:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015e2:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_ADC_ConfigChannel+0x37c>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	491e      	ldr	r1, [pc, #120]	; (8001664 <HAL_ADC_ConfigChannel+0x380>)
 80015ea:	fbb2 f1f1 	udiv	r1, r2, r1
 80015ee:	220a      	movs	r2, #10
 80015f0:	fb02 f201 	mul.w	r2, r2, r1
 80015f4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80015f6:	e002      	b.n	80015fe <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80015f8:	9a00      	ldr	r2, [sp, #0]
 80015fa:	3a01      	subs	r2, #1
 80015fc:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80015fe:	9a00      	ldr	r2, [sp, #0]
 8001600:	2a00      	cmp	r2, #0
 8001602:	d1f9      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2000      	movs	r0, #0
 8001606:	e01b      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001608:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800160c:	d1c2      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800160e:	4912      	ldr	r1, [pc, #72]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 8001610:	688a      	ldr	r2, [r1, #8]
 8001612:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001616:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800161a:	e011      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800161c:	490e      	ldr	r1, [pc, #56]	; (8001658 <HAL_ADC_ConfigChannel+0x374>)
 800161e:	688a      	ldr	r2, [r1, #8]
 8001620:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001624:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001626:	2000      	movs	r0, #0
 8001628:	e00a      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162c:	f042 0220 	orr.w	r2, r2, #32
 8001630:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	e004      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800163e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001646:	b017      	add	sp, #92	; 0x5c
 8001648:	bc70      	pop	{r4, r5, r6}
 800164a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2000      	movs	r0, #0
 800164e:	e7f7      	b.n	8001640 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8001650:	2002      	movs	r0, #2
 8001652:	e7f8      	b.n	8001646 <HAL_ADC_ConfigChannel+0x362>
 8001654:	83fff000 	.word	0x83fff000
 8001658:	50000300 	.word	0x50000300
 800165c:	50000100 	.word	0x50000100
 8001660:	20000064 	.word	0x20000064
 8001664:	000f4240 	.word	0x000f4240

08001668 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001668:	b470      	push	{r4, r5, r6}
 800166a:	b097      	sub	sp, #92	; 0x5c
 800166c:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800166e:	6802      	ldr	r2, [r0, #0]
 8001670:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001674:	d040      	beq.n	80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001676:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800167a:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800167c:	9801      	ldr	r0, [sp, #4]
 800167e:	2800      	cmp	r0, #0
 8001680:	f000 8088 	beq.w	8001794 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8001684:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8001688:	2c01      	cmp	r4, #1
 800168a:	f000 8085 	beq.w	8001798 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800168e:	2401      	movs	r4, #1
 8001690:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001694:	6892      	ldr	r2, [r2, #8]
 8001696:	f012 0f04 	tst.w	r2, #4
 800169a:	d168      	bne.n	800176e <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800169c:	6882      	ldr	r2, [r0, #8]
 800169e:	f012 0f04 	tst.w	r2, #4
 80016a2:	d164      	bne.n	800176e <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016a4:	680a      	ldr	r2, [r1, #0]
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d037      	beq.n	800171a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016aa:	4d3c      	ldr	r5, [pc, #240]	; (800179c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80016ac:	68aa      	ldr	r2, [r5, #8]
 80016ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b2:	684c      	ldr	r4, [r1, #4]
 80016b4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80016b6:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 80016ba:	4322      	orrs	r2, r4
 80016bc:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016be:	681c      	ldr	r4, [r3, #0]
 80016c0:	68a2      	ldr	r2, [r4, #8]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	2a01      	cmp	r2, #1
 80016c8:	d019      	beq.n	80016fe <HAL_ADCEx_MultiModeConfigChannel+0x96>
 80016ca:	2200      	movs	r2, #0
 80016cc:	2a00      	cmp	r2, #0
 80016ce:	d159      	bne.n	8001784 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016d0:	6884      	ldr	r4, [r0, #8]
 80016d2:	f004 0403 	and.w	r4, r4, #3
 80016d6:	2c01      	cmp	r4, #1
 80016d8:	d019      	beq.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d154      	bne.n	8001788 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016de:	4c2f      	ldr	r4, [pc, #188]	; (800179c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80016e0:	68a2      	ldr	r2, [r4, #8]
 80016e2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80016e6:	f022 020f 	bic.w	r2, r2, #15
 80016ea:	6808      	ldr	r0, [r1, #0]
 80016ec:	6889      	ldr	r1, [r1, #8]
 80016ee:	4301      	orrs	r1, r0
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2000      	movs	r0, #0
 80016f6:	e03f      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80016fa:	9001      	str	r0, [sp, #4]
 80016fc:	e7be      	b.n	800167c <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	f012 0f01 	tst.w	r2, #1
 8001704:	d101      	bne.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8001706:	2200      	movs	r2, #0
 8001708:	e7e0      	b.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x64>
 800170a:	2201      	movs	r2, #1
 800170c:	e7de      	b.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	f010 0f01 	tst.w	r0, #1
 8001714:	d0e1      	beq.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001716:	2201      	movs	r2, #1
 8001718:	e7df      	b.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800171a:	4920      	ldr	r1, [pc, #128]	; (800179c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800171c:	688a      	ldr	r2, [r1, #8]
 800171e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001722:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	688a      	ldr	r2, [r1, #8]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	2a01      	cmp	r2, #1
 800172e:	d010      	beq.n	8001752 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8001730:	2200      	movs	r2, #0
 8001732:	bb5a      	cbnz	r2, 800178c <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001734:	6881      	ldr	r1, [r0, #8]
 8001736:	f001 0103 	and.w	r1, r1, #3
 800173a:	2901      	cmp	r1, #1
 800173c:	d011      	beq.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800173e:	bb3a      	cbnz	r2, 8001790 <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001742:	688a      	ldr	r2, [r1, #8]
 8001744:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001748:	f022 020f 	bic.w	r2, r2, #15
 800174c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174e:	2000      	movs	r0, #0
 8001750:	e012      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001752:	680a      	ldr	r2, [r1, #0]
 8001754:	f012 0f01 	tst.w	r2, #1
 8001758:	d101      	bne.n	800175e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800175a:	2200      	movs	r2, #0
 800175c:	e7e9      	b.n	8001732 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800175e:	2201      	movs	r2, #1
 8001760:	e7e7      	b.n	8001732 <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001762:	6801      	ldr	r1, [r0, #0]
 8001764:	f011 0f01 	tst.w	r1, #1
 8001768:	d0e9      	beq.n	800173e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 800176a:	2201      	movs	r2, #1
 800176c:	e7e7      	b.n	800173e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001776:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800177e:	b017      	add	sp, #92	; 0x5c
 8001780:	bc70      	pop	{r4, r5, r6}
 8001782:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2000      	movs	r0, #0
 8001786:	e7f7      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001788:	2000      	movs	r0, #0
 800178a:	e7f5      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 800178c:	2000      	movs	r0, #0
 800178e:	e7f3      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001790:	2000      	movs	r0, #0
 8001792:	e7f1      	b.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e7f2      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8001798:	2002      	movs	r0, #2
 800179a:	e7f0      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800179c:	50000300 	.word	0x50000300
 80017a0:	50000100 	.word	0x50000100

080017a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017b0:	0200      	lsls	r0, r0, #8
 80017b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80017b8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017bc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017c0:	60d0      	str	r0, [r2, #12]
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_NVIC_SetPriority+0x5c>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d2:	f1c3 0407 	rsb	r4, r3, #7
 80017d6:	2c04      	cmp	r4, #4
 80017d8:	bf28      	it	cs
 80017da:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017dc:	1d1d      	adds	r5, r3, #4
 80017de:	2d06      	cmp	r5, #6
 80017e0:	d917      	bls.n	8001812 <HAL_NVIC_SetPriority+0x4a>
 80017e2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	2501      	movs	r5, #1
 80017e6:	fa05 f404 	lsl.w	r4, r5, r4
 80017ea:	3c01      	subs	r4, #1
 80017ec:	4021      	ands	r1, r4
 80017ee:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	fa05 f303 	lsl.w	r3, r5, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80017fa:	2800      	cmp	r0, #0
 80017fc:	db0b      	blt.n	8001816 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	0109      	lsls	r1, r1, #4
 8001800:	b2c9      	uxtb	r1, r1
 8001802:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001806:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800180a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800180e:	bc30      	pop	{r4, r5}
 8001810:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	2300      	movs	r3, #0
 8001814:	e7e6      	b.n	80017e4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	f000 000f 	and.w	r0, r0, #15
 800181a:	0109      	lsls	r1, r1, #4
 800181c:	b2c9      	uxtb	r1, r1
 800181e:	4b02      	ldr	r3, [pc, #8]	; (8001828 <HAL_NVIC_SetPriority+0x60>)
 8001820:	5419      	strb	r1, [r3, r0]
 8001822:	e7f4      	b.n	800180e <HAL_NVIC_SetPriority+0x46>
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	e000ed14 	.word	0xe000ed14

0800182c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800182c:	0942      	lsrs	r2, r0, #5
 800182e:	f000 001f 	and.w	r0, r0, #31
 8001832:	2301      	movs	r3, #1
 8001834:	fa03 f000 	lsl.w	r0, r3, r0
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <HAL_NVIC_EnableIRQ+0x14>)
 800183a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	3801      	subs	r0, #1
 8001846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800184a:	d20a      	bcs.n	8001862 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_SYSTICK_Config+0x24>)
 800184e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	21f0      	movs	r1, #240	; 0xf0
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_SYSTICK_Config+0x28>)
 8001854:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	2000      	movs	r0, #0
 800185a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001870:	2804      	cmp	r0, #4
 8001872:	d005      	beq.n	8001880 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001880:	4a02      	ldr	r2, [pc, #8]	; (800188c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4770      	bx	lr
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001890:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001892:	f001 fd5f 	bl	8003354 <HAL_SYSTICK_Callback>
 8001896:	bd08      	pop	{r3, pc}

08001898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001898:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800189a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a2:	2304      	movs	r3, #4
 80018a4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018aa:	6802      	ldr	r2, [r0, #0]
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	f023 030e 	bic.w	r3, r3, #14
 80018b2:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018b4:	6802      	ldr	r2, [r0, #0]
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018be:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80018c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018c2:	2201      	movs	r2, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	2300      	movs	r3, #0
 80018d0:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80018d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018d6:	b113      	cbz	r3, 80018de <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 80018d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018da:	2000      	movs	r0, #0
 80018dc:	bd08      	pop	{r3, pc}
 80018de:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 80018e0:	bd08      	pop	{r3, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80018e8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80018ea:	e088      	b.n	80019fe <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018ec:	08de      	lsrs	r6, r3, #3
 80018ee:	3608      	adds	r6, #8
 80018f0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f4:	f003 0e07 	and.w	lr, r3, #7
 80018f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018fc:	270f      	movs	r7, #15
 80018fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8001902:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001906:	690f      	ldr	r7, [r1, #16]
 8001908:	fa07 f70e 	lsl.w	r7, r7, lr
 800190c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800190e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001912:	e083      	b.n	8001a1c <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001914:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001916:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001918:	68cf      	ldr	r7, [r1, #12]
 800191a:	fa07 f70e 	lsl.w	r7, r7, lr
 800191e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001920:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001928:	684e      	ldr	r6, [r1, #4]
 800192a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800192e:	409e      	lsls	r6, r3
 8001930:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001932:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001934:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	688d      	ldr	r5, [r1, #8]
 800193a:	fa05 f50e 	lsl.w	r5, r5, lr
 800193e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001940:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001942:	684c      	ldr	r4, [r1, #4]
 8001944:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001948:	d058      	beq.n	80019fc <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	4c47      	ldr	r4, [pc, #284]	; (8001a68 <HAL_GPIO_Init+0x184>)
 800194c:	69a5      	ldr	r5, [r4, #24]
 800194e:	f045 0501 	orr.w	r5, r5, #1
 8001952:	61a5      	str	r5, [r4, #24]
 8001954:	69a4      	ldr	r4, [r4, #24]
 8001956:	f004 0401 	and.w	r4, r4, #1
 800195a:	9401      	str	r4, [sp, #4]
 800195c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800195e:	089d      	lsrs	r5, r3, #2
 8001960:	1cae      	adds	r6, r5, #2
 8001962:	4c42      	ldr	r4, [pc, #264]	; (8001a6c <HAL_GPIO_Init+0x188>)
 8001964:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001968:	f003 0603 	and.w	r6, r3, #3
 800196c:	00b6      	lsls	r6, r6, #2
 800196e:	270f      	movs	r7, #15
 8001970:	40b7      	lsls	r7, r6
 8001972:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001976:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800197a:	d06c      	beq.n	8001a56 <HAL_GPIO_Init+0x172>
 800197c:	4f3c      	ldr	r7, [pc, #240]	; (8001a70 <HAL_GPIO_Init+0x18c>)
 800197e:	42b8      	cmp	r0, r7
 8001980:	d06b      	beq.n	8001a5a <HAL_GPIO_Init+0x176>
 8001982:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001986:	42b8      	cmp	r0, r7
 8001988:	d069      	beq.n	8001a5e <HAL_GPIO_Init+0x17a>
 800198a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800198e:	42b8      	cmp	r0, r7
 8001990:	d05f      	beq.n	8001a52 <HAL_GPIO_Init+0x16e>
 8001992:	2705      	movs	r7, #5
 8001994:	fa07 f606 	lsl.w	r6, r7, r6
 8001998:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800199a:	3502      	adds	r5, #2
 800199c:	4e33      	ldr	r6, [pc, #204]	; (8001a6c <HAL_GPIO_Init+0x188>)
 800199e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a2:	4c34      	ldr	r4, [pc, #208]	; (8001a74 <HAL_GPIO_Init+0x190>)
 80019a4:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	43d4      	mvns	r4, r2
 80019a8:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	684f      	ldr	r7, [r1, #4]
 80019ae:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80019b2:	d001      	beq.n	80019b8 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 80019b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80019b8:	4d2e      	ldr	r5, [pc, #184]	; (8001a74 <HAL_GPIO_Init+0x190>)
 80019ba:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80019bc:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80019be:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c2:	684f      	ldr	r7, [r1, #4]
 80019c4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80019c8:	d001      	beq.n	80019ce <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 80019ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80019ce:	4d29      	ldr	r5, [pc, #164]	; (8001a74 <HAL_GPIO_Init+0x190>)
 80019d0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	684f      	ldr	r7, [r1, #4]
 80019da:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80019de:	d001      	beq.n	80019e4 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 80019e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80019e4:	4d23      	ldr	r5, [pc, #140]	; (8001a74 <HAL_GPIO_Init+0x190>)
 80019e6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80019e8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	684e      	ldr	r6, [r1, #4]
 80019ee:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019f2:	d001      	beq.n	80019f8 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80019f4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80019f8:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_GPIO_Init+0x190>)
 80019fa:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80019fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019fe:	680a      	ldr	r2, [r1, #0]
 8001a00:	fa32 f403 	lsrs.w	r4, r2, r3
 8001a04:	d02d      	beq.n	8001a62 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a06:	2501      	movs	r5, #1
 8001a08:	409d      	lsls	r5, r3
    if(iocurrent)
 8001a0a:	402a      	ands	r2, r5
 8001a0c:	d0f6      	beq.n	80019fc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0e:	684c      	ldr	r4, [r1, #4]
 8001a10:	2c02      	cmp	r4, #2
 8001a12:	f43f af6b 	beq.w	80018ec <HAL_GPIO_Init+0x8>
 8001a16:	2c12      	cmp	r4, #18
 8001a18:	f43f af68 	beq.w	80018ec <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001a1c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001a22:	2403      	movs	r4, #3
 8001a24:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a28:	43e4      	mvns	r4, r4
 8001a2a:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	684f      	ldr	r7, [r1, #4]
 8001a2e:	f007 0703 	and.w	r7, r7, #3
 8001a32:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a36:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001a38:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	684e      	ldr	r6, [r1, #4]
 8001a3c:	1e77      	subs	r7, r6, #1
 8001a3e:	2f01      	cmp	r7, #1
 8001a40:	f67f af68 	bls.w	8001914 <HAL_GPIO_Init+0x30>
 8001a44:	2e11      	cmp	r6, #17
 8001a46:	f43f af65 	beq.w	8001914 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	2e12      	cmp	r6, #18
 8001a4c:	f47f af72 	bne.w	8001934 <HAL_GPIO_Init+0x50>
 8001a50:	e760      	b.n	8001914 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a52:	2703      	movs	r7, #3
 8001a54:	e79e      	b.n	8001994 <HAL_GPIO_Init+0xb0>
 8001a56:	2700      	movs	r7, #0
 8001a58:	e79c      	b.n	8001994 <HAL_GPIO_Init+0xb0>
 8001a5a:	2701      	movs	r7, #1
 8001a5c:	e79a      	b.n	8001994 <HAL_GPIO_Init+0xb0>
 8001a5e:	2702      	movs	r7, #2
 8001a60:	e798      	b.n	8001994 <HAL_GPIO_Init+0xb0>
  }
}
 8001a62:	b003      	add	sp, #12
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	b90a      	cbnz	r2, 8001a7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7a:	6281      	str	r1, [r0, #40]	; 0x28
 8001a7c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7e:	6181      	str	r1, [r0, #24]
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	6803      	ldr	r3, [r0, #0]
 8001a8c:	f013 0f01 	tst.w	r3, #1
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a92:	4bb5      	ldr	r3, [pc, #724]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d046      	beq.n	8001b2c <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9e:	4bb2      	ldr	r3, [pc, #712]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d03b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	6863      	ldr	r3, [r4, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	f000 808e 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x14c>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8091 	bne.w	8001bdc <HAL_RCC_OscConfig+0x158>
 8001aba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001abe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad0:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad2:	4aa5      	ldr	r2, [pc, #660]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001ad4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ad6:	f023 030f 	bic.w	r3, r3, #15
 8001ada:	68a1      	ldr	r1, [r4, #8]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8094 	beq.w	8001c10 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ffb8 	bl	8000a5c <HAL_GetTick>
 8001aec:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	4219      	tst	r1, r3
 8001b12:	d122      	bne.n	8001b5a <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7fe ffa2 	bl	8000a5c <HAL_GetTick>
 8001b18:	1b40      	subs	r0, r0, r5
 8001b1a:	2864      	cmp	r0, #100	; 0x64
 8001b1c:	d9e7      	bls.n	8001aee <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8001b1e:	2003      	movs	r0, #3
 8001b20:	e2ab      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b2a:	d0be      	beq.n	8001aaa <HAL_RCC_OscConfig+0x26>
 8001b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b30:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001b36:	6819      	ldr	r1, [r3, #0]
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2201      	movs	r2, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	4219      	tst	r1, r3
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_OscConfig+0xd6>
 8001b52:	6863      	ldr	r3, [r4, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8289 	beq.w	800206c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f013 0f02 	tst.w	r3, #2
 8001b60:	f000 809c 	beq.w	8001c9c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f013 0f0c 	tst.w	r3, #12
 8001b6c:	d072      	beq.n	8001c54 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b6e:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d067      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7a:	6923      	ldr	r3, [r4, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80cb 	beq.w	8001d18 <HAL_RCC_OscConfig+0x294>
 8001b82:	2201      	movs	r2, #1
 8001b84:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe ff60 	bl	8000a5c <HAL_GetTick>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	4219      	tst	r1, r3
 8001bbe:	f040 809c 	bne.w	8001cfa <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7fe ff4b 	bl	8000a5c <HAL_GetTick>
 8001bc6:	1b40      	subs	r0, r0, r5
 8001bc8:	2802      	cmp	r0, #2
 8001bca:	d9e8      	bls.n	8001b9e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e254      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e77a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e>
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x172>
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e76d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e>
 8001bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bfa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e760      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001c10:	f7fe ff24 	bl	8000a5c <HAL_GetTick>
 8001c14:	4605      	mov	r5, r0
 8001c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2201      	movs	r2, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	4219      	tst	r1, r3
 8001c3a:	d08e      	beq.n	8001b5a <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff0e 	bl	8000a5c <HAL_GetTick>
 8001c40:	1b40      	subs	r0, r0, r5
 8001c42:	2864      	cmp	r0, #100	; 0x64
 8001c44:	d9e7      	bls.n	8001c16 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001c46:	2003      	movs	r0, #3
 8001c48:	e217      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c52:	d192      	bne.n	8001b7a <HAL_RCC_OscConfig+0xf6>
 8001c54:	2302      	movs	r3, #2
 8001c56:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	4219      	tst	r1, r3
 8001c74:	d004      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1fc>
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	e1fc      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4839      	ldr	r0, [pc, #228]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001c82:	6803      	ldr	r3, [r0, #0]
 8001c84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c88:	6961      	ldr	r1, [r4, #20]
 8001c8a:	22f8      	movs	r2, #248	; 0xf8
 8001c8c:	fa92 f2a2 	rbit	r2, r2
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f013 0f08 	tst.w	r3, #8
 8001ca2:	f000 808d 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	69a3      	ldr	r3, [r4, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d061      	beq.n	8001d70 <HAL_RCC_OscConfig+0x2ec>
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x2e8>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fecd 	bl	8000a5c <HAL_GetTick>
 8001cc2:	4605      	mov	r5, r0
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001cd4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	4219      	tst	r1, r3
 8001cea:	d169      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe feb6 	bl	8000a5c <HAL_GetTick>
 8001cf0:	1b40      	subs	r0, r0, r5
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d9e6      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	e1bf      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	481b      	ldr	r0, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d02:	6961      	ldr	r1, [r4, #20]
 8001d04:	22f8      	movs	r2, #248	; 0xf8
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4313      	orrs	r3, r2
 8001d14:	6003      	str	r3, [r0, #0]
 8001d16:	e7c1      	b.n	8001c9c <HAL_RCC_OscConfig+0x218>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe94 	bl	8000a5c <HAL_GetTick>
 8001d34:	4605      	mov	r5, r0
 8001d36:	2302      	movs	r3, #2
 8001d38:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x2e4>)
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	2302      	movs	r3, #2
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	4219      	tst	r1, r3
 8001d56:	d0a1      	beq.n	8001c9c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7fe fe80 	bl	8000a5c <HAL_GetTick>
 8001d5c:	1b40      	subs	r0, r0, r5
 8001d5e:	2802      	cmp	r0, #2
 8001d60:	d9e9      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8001d62:	2003      	movs	r0, #3
 8001d64:	e189      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	10908120 	.word	0x10908120
 8001d70:	2201      	movs	r2, #1
 8001d72:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	4bc1      	ldr	r3, [pc, #772]	; (8002080 <HAL_RCC_OscConfig+0x5fc>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe fe6a 	bl	8000a5c <HAL_GetTick>
 8001d88:	4605      	mov	r5, r0
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4aba      	ldr	r2, [pc, #744]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001d9a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2201      	movs	r2, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	4219      	tst	r1, r3
 8001db0:	d006      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7fe fe53 	bl	8000a5c <HAL_GetTick>
 8001db6:	1b40      	subs	r0, r0, r5
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d9e6      	bls.n	8001d8a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	e15c      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f013 0f04 	tst.w	r3, #4
 8001dc6:	f000 80b3 	beq.w	8001f30 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4bae      	ldr	r3, [pc, #696]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001dd2:	d126      	bne.n	8001e22 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4bab      	ldr	r3, [pc, #684]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001de8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4ba7      	ldr	r3, [pc, #668]	; (8002088 <HAL_RCC_OscConfig+0x604>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001df2:	d018      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	68e3      	ldr	r3, [r4, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d029      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3ca>
 8001dfa:	bb73      	cbnz	r3, 8001e5a <HAL_RCC_OscConfig+0x3d6>
 8001dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e00:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	68e3      	ldr	r3, [r4, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d05d      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7fe fe1f 	bl	8000a5c <HAL_GetTick>
 8001e1e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e047      	b.n	8001eb2 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2500      	movs	r5, #0
 8001e24:	e7e1      	b.n	8001dea <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_RCC_OscConfig+0x604>)
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001e30:	f7fe fe14 	bl	8000a5c <HAL_GetTick>
 8001e34:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_RCC_OscConfig+0x604>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e3e:	d1d9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe fe0c 	bl	8000a5c <HAL_GetTick>
 8001e44:	1b80      	subs	r0, r0, r6
 8001e46:	2864      	cmp	r0, #100	; 0x64
 8001e48:	d9f5      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e115      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4e:	4a8d      	ldr	r2, [pc, #564]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001e50:	6a13      	ldr	r3, [r2, #32]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e7dc      	b.n	8001e14 <HAL_RCC_OscConfig+0x390>
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3ee>
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001e60:	6a1a      	ldr	r2, [r3, #32]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	621a      	str	r2, [r3, #32]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	621a      	str	r2, [r3, #32]
 8001e70:	e7d0      	b.n	8001e14 <HAL_RCC_OscConfig+0x390>
 8001e72:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	f042 0204 	orr.w	r2, r2, #4
 8001e7a:	621a      	str	r2, [r3, #32]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	e7c6      	b.n	8001e14 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001e88:	6a19      	ldr	r1, [r3, #32]
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	4219      	tst	r1, r3
 8001ea0:	d145      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fddb 	bl	8000a5c <HAL_GetTick>
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eac:	4298      	cmp	r0, r3
 8001eae:	f200 80df 	bhi.w	8002070 <HAL_RCC_OscConfig+0x5ec>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d0dd      	beq.n	8001e86 <HAL_RCC_OscConfig+0x402>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001ed2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ed4:	e7d9      	b.n	8001e8a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fdc1 	bl	8000a5c <HAL_GetTick>
 8001eda:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x486>
 8001ede:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001ee0:	6a19      	ldr	r1, [r3, #32]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	4219      	tst	r1, r3
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fdaf 	bl	8000a5c <HAL_GetTick>
 8001efe:	1b80      	subs	r0, r0, r6
 8001f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f04:	4298      	cmp	r0, r3
 8001f06:	f200 80b5 	bhi.w	8002074 <HAL_RCC_OscConfig+0x5f0>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d0dd      	beq.n	8001ede <HAL_RCC_OscConfig+0x45a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001f2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f2c:	e7d9      	b.n	8001ee2 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f2e:	bbb5      	cbnz	r5, 8001f9e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f30:	69e3      	ldr	r3, [r4, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a0 	beq.w	8002078 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001f3a:	6852      	ldr	r2, [r2, #4]
 8001f3c:	f002 020c 	and.w	r2, r2, #12
 8001f40:	2a08      	cmp	r2, #8
 8001f42:	f000 80a3 	beq.w	800208c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d02f      	beq.n	8001faa <HAL_RCC_OscConfig+0x526>
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fd7a 	bl	8000a5c <HAL_GetTick>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	4219      	tst	r1, r3
 8001f8e:	d06b      	beq.n	8002068 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fd64 	bl	8000a5c <HAL_GetTick>
 8001f94:	1b00      	subs	r0, r0, r4
 8001f96:	2802      	cmp	r0, #2
 8001f98:	d9e7      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	e06d      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4a39      	ldr	r2, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001fa0:	69d3      	ldr	r3, [r2, #28]
 8001fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	e7c2      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ac>
 8001faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fd4a 	bl	8000a5c <HAL_GetTick>
 8001fc8:	4605      	mov	r5, r0
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	4219      	tst	r1, r3
 8001fee:	d006      	beq.n	8001ffe <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fd34 	bl	8000a5c <HAL_GetTick>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d9e7      	bls.n	8001fca <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	e03d      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffe:	4921      	ldr	r1, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 8002000:	684b      	ldr	r3, [r1, #4]
 8002002:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002006:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002008:	6a20      	ldr	r0, [r4, #32]
 800200a:	4302      	orrs	r2, r0
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002014:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002020:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800202a:	f7fe fd17 	bl	8000a5c <HAL_GetTick>
 800202e:	4604      	mov	r4, r0
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_OscConfig+0x600>)
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2201      	movs	r2, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	4219      	tst	r1, r3
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7fe fd01 	bl	8000a5c <HAL_GetTick>
 800205a:	1b00      	subs	r0, r0, r4
 800205c:	2802      	cmp	r0, #2
 800205e:	d9e7      	bls.n	8002030 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
 8002068:	2000      	movs	r0, #0
 800206a:	e006      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 800206c:	2001      	movs	r0, #1
 800206e:	e004      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002070:	2003      	movs	r0, #3
 8002072:	e002      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002074:	2003      	movs	r0, #3
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8002078:	2000      	movs	r0, #0
}
 800207a:	b002      	add	sp, #8
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	bf00      	nop
 8002080:	10908120 	.word	0x10908120
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
      return HAL_ERROR;
 800208c:	2001      	movs	r0, #1
 800208e:	e7f4      	b.n	800207a <HAL_RCC_OscConfig+0x5f6>

08002090 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCC_GetSysClockFreq+0x5c>)
 8002092:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	f003 020c 	and.w	r2, r3, #12
 8002098:	2a08      	cmp	r2, #8
 800209a:	d124      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80020a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	fa21 f202 	lsr.w	r2, r1, r2
 80020b0:	490f      	ldr	r1, [pc, #60]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80020b2:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_GetSysClockFreq+0x5c>)
 80020b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020b8:	f002 020f 	and.w	r2, r2, #15
 80020bc:	210f      	movs	r1, #15
 80020be:	fa91 f1a1 	rbit	r1, r1
 80020c2:	fab1 f181 	clz	r1, r1
 80020c6:	40ca      	lsrs	r2, r1
 80020c8:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80020ca:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020d0:	d103      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80020d4:	fb03 f000 	mul.w	r0, r3, r0
 80020d8:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_RCC_GetSysClockFreq+0x6c>)
 80020dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80020e0:	fb03 f000 	mul.w	r0, r3, r0
 80020e4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08003d54 	.word	0x08003d54
 80020f4:	08003d64 	.word	0x08003d64
 80020f8:	003d0900 	.word	0x003d0900
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002100:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	428b      	cmp	r3, r1
 800210a:	d20c      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210c:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f023 0307 	bic.w	r3, r3, #7
 8002114:	430b      	orrs	r3, r1
 8002116:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002118:	6813      	ldr	r3, [r2, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	4299      	cmp	r1, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	4770      	bx	lr
{
 8002126:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	6803      	ldr	r3, [r0, #0]
 800212a:	f013 0f02 	tst.w	r3, #2
 800212e:	d006      	beq.n	800213e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002132:	6853      	ldr	r3, [r2, #4]
 8002134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002138:	6884      	ldr	r4, [r0, #8]
 800213a:	4323      	orrs	r3, r4
 800213c:	6053      	str	r3, [r2, #4]
 800213e:	460d      	mov	r5, r1
 8002140:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	f013 0f01 	tst.w	r3, #1
 8002148:	d07a      	beq.n	8002240 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	6843      	ldr	r3, [r0, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d02f      	beq.n	80021b0 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002150:	2b02      	cmp	r3, #2
 8002152:	d042      	beq.n	80021da <HAL_RCC_ClockConfig+0xda>
 8002154:	2202      	movs	r2, #2
 8002156:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	2202      	movs	r2, #2
 8002160:	fa92 f2a2 	rbit	r2, r2
 8002164:	fab2 f282 	clz	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4210      	tst	r0, r2
 8002174:	f000 80a4 	beq.w	80022c0 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4953      	ldr	r1, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	684a      	ldr	r2, [r1, #4]
 800217c:	f022 0203 	bic.w	r2, r2, #3
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002184:	f7fe fc6a 	bl	8000a5c <HAL_GetTick>
 8002188:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	6863      	ldr	r3, [r4, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d039      	beq.n	8002204 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002190:	2b02      	cmp	r3, #2
 8002192:	d046      	beq.n	8002222 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f013 0f0c 	tst.w	r3, #12
 800219c:	d050      	beq.n	8002240 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219e:	f7fe fc5d 	bl	8000a5c <HAL_GetTick>
 80021a2:	1b80      	subs	r0, r0, r6
 80021a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d9f3      	bls.n	8002194 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80021ac:	2003      	movs	r0, #3
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	4a43      	ldr	r2, [pc, #268]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	6810      	ldr	r0, [r2, #0]
 80021bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4210      	tst	r0, r2
 80021d4:	d1d0      	bne.n	8002178 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
 80021da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021de:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	4a39      	ldr	r2, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	6810      	ldr	r0, [r2, #0]
 80021e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4210      	tst	r0, r2
 80021fe:	d1bb      	bne.n	8002178 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d017      	beq.n	8002240 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fc24 	bl	8000a5c <HAL_GetTick>
 8002214:	1b80      	subs	r0, r0, r6
 8002216:	f241 3388 	movw	r3, #5000	; 0x1388
 800221a:	4298      	cmp	r0, r3
 800221c:	d9f2      	bls.n	8002204 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
 8002220:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d008      	beq.n	8002240 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222e:	f7fe fc15 	bl	8000a5c <HAL_GetTick>
 8002232:	1b80      	subs	r0, r0, r6
 8002234:	f241 3388 	movw	r3, #5000	; 0x1388
 8002238:	4298      	cmp	r0, r3
 800223a:	d9f2      	bls.n	8002222 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	429d      	cmp	r5, r3
 800224a:	d20c      	bcs.n	8002266 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	6813      	ldr	r3, [r2, #0]
 8002250:	f023 0307 	bic.w	r3, r3, #7
 8002254:	432b      	orrs	r3, r5
 8002256:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	429d      	cmp	r5, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8002262:	2001      	movs	r0, #1
}
 8002264:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	f013 0f04 	tst.w	r3, #4
 800226c:	d006      	beq.n	800227c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	6853      	ldr	r3, [r2, #4]
 8002272:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002276:	68e1      	ldr	r1, [r4, #12]
 8002278:	430b      	orrs	r3, r1
 800227a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f013 0f08 	tst.w	r3, #8
 8002282:	d007      	beq.n	8002294 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002284:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	6853      	ldr	r3, [r2, #4]
 8002288:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800228c:	6921      	ldr	r1, [r4, #16]
 800228e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002292:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002294:	f7ff fefc 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	22f0      	movs	r2, #240	; 0xf0
 80022a2:	fa92 f2a2 	rbit	r2, r2
 80022a6:	fab2 f282 	clz	r2, r2
 80022aa:	40d3      	lsrs	r3, r2
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_RCC_ClockConfig+0x1cc>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	40d8      	lsrs	r0, r3
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7fe fba0 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
 80022be:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003d74 	.word	0x08003d74
 80022d0:	20000064 	.word	0x20000064

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80022d4:	4b01      	ldr	r3, [pc, #4]	; (80022dc <HAL_RCC_GetHCLKFreq+0x8>)
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000064 	.word	0x20000064

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022e2:	f7ff fff7 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f2:	fa92 f2a2 	rbit	r2, r2
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	40d3      	lsrs	r3, r2
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002300:	40d8      	lsrs	r0, r3
 8002302:	bd08      	pop	{r3, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	08003d84 	.word	0x08003d84

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800230e:	f7ff ffe1 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800231a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800231e:	fa92 f2a2 	rbit	r2, r2
 8002322:	fab2 f282 	clz	r2, r2
 8002326:	40d3      	lsrs	r3, r2
 8002328:	4a02      	ldr	r2, [pc, #8]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800232c:	40d8      	lsrs	r0, r3
 800232e:	bd08      	pop	{r3, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08003d84 	.word	0x08003d84

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002344:	d044      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800234e:	d179      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002358:	61da      	str	r2, [r3, #28]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002364:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800236e:	d06b      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002374:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002378:	d021      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x86>
 800237a:	6862      	ldr	r2, [r4, #4]
 800237c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002380:	4293      	cmp	r3, r2
 8002382:	d01c      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002384:	4854      	ldr	r0, [pc, #336]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002386:	6a01      	ldr	r1, [r0, #32]
 8002388:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	4f51      	ldr	r7, [pc, #324]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800239a:	443a      	add	r2, r7
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	f04f 0e01 	mov.w	lr, #1
 80023a2:	f8c2 e000 	str.w	lr, [r2]
 80023a6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	443b      	add	r3, r7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023b6:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b8:	f011 0f01 	tst.w	r1, #1
 80023bc:	d158      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023be:	4a46      	ldr	r2, [pc, #280]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80023c0:	6a13      	ldr	r3, [r2, #32]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	6861      	ldr	r1, [r4, #4]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d17a      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	f013 0f01 	tst.w	r3, #1
 80023d6:	d006      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80023da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023dc:	f023 0303 	bic.w	r3, r3, #3
 80023e0:	68a1      	ldr	r1, [r4, #8]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	f013 0f20 	tst.w	r3, #32
 80023ec:	d006      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ee:	4a3a      	ldr	r2, [pc, #232]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80023f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023f2:	f023 0310 	bic.w	r3, r3, #16
 80023f6:	68e1      	ldr	r1, [r4, #12]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002402:	d006      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002404:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002408:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800240c:	6921      	ldr	r1, [r4, #16]
 800240e:	430b      	orrs	r3, r1
 8002410:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002418:	d006      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800241c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800241e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002422:	6961      	ldr	r1, [r4, #20]
 8002424:	430b      	orrs	r3, r1
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800242e:	d051      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002432:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002438:	69a1      	ldr	r1, [r4, #24]
 800243a:	430b      	orrs	r3, r1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800243e:	2000      	movs	r0, #0
}
 8002440:	b003      	add	sp, #12
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2500      	movs	r5, #0
 8002446:	e78e      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002448:	4a24      	ldr	r2, [pc, #144]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002452:	f7fe fb03 	bl	8000a5c <HAL_GetTick>
 8002456:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002460:	d186      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fafb 	bl	8000a5c <HAL_GetTick>
 8002466:	1b80      	subs	r0, r0, r6
 8002468:	2864      	cmp	r0, #100	; 0x64
 800246a:	d9f5      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e7e7      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002470:	f7fe faf4 	bl	8000a5c <HAL_GetTick>
 8002474:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	e014      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800247a:	6a19      	ldr	r1, [r3, #32]
 800247c:	2302      	movs	r3, #2
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2201      	movs	r2, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	4219      	tst	r1, r3
 8002492:	d194      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fae2 	bl	8000a5c <HAL_GetTick>
 8002498:	1b80      	subs	r0, r0, r6
 800249a:	f241 3388 	movw	r3, #5000	; 0x1388
 800249e:	4298      	cmp	r0, r3
 80024a0:	d816      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80024a2:	2302      	movs	r3, #2
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d0de      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80024ba:	2302      	movs	r3, #2
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80024c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024c4:	e7da      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	69d3      	ldr	r3, [r2, #28]
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	e77f      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80024d0:	2003      	movs	r0, #3
 80024d2:	e7b5      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80024d4:	2000      	movs	r0, #0
 80024d6:	e7b3      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	10908100 	.word	0x10908100

080024e4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024ec:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ee:	6802      	ldr	r2, [r0, #0]
 80024f0:	6893      	ldr	r3, [r2, #8]
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024f8:	2320      	movs	r3, #32
 80024fa:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002500:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	d001      	beq.n	800250e <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800250a:	2002      	movs	r0, #2
 800250c:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800250e:	2900      	cmp	r1, #0
 8002510:	d047      	beq.n	80025a2 <HAL_UART_Receive_IT+0xa2>
 8002512:	2a00      	cmp	r2, #0
 8002514:	d047      	beq.n	80025a6 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8002516:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800251a:	2b01      	cmp	r3, #1
 800251c:	d045      	beq.n	80025aa <HAL_UART_Receive_IT+0xaa>
 800251e:	2301      	movs	r3, #1
 8002520:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8002524:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8002526:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800252a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800252e:	6883      	ldr	r3, [r0, #8]
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002534:	d006      	beq.n	8002544 <HAL_UART_Receive_IT+0x44>
 8002536:	b9a3      	cbnz	r3, 8002562 <HAL_UART_Receive_IT+0x62>
 8002538:	6903      	ldr	r3, [r0, #16]
 800253a:	b973      	cbnz	r3, 800255a <HAL_UART_Receive_IT+0x5a>
 800253c:	23ff      	movs	r3, #255	; 0xff
 800253e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002542:	e011      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
 8002544:	6903      	ldr	r3, [r0, #16]
 8002546:	b923      	cbnz	r3, 8002552 <HAL_UART_Receive_IT+0x52>
 8002548:	f240 13ff 	movw	r3, #511	; 0x1ff
 800254c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002550:	e00a      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
 8002552:	23ff      	movs	r3, #255	; 0xff
 8002554:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002558:	e006      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
 800255a:	237f      	movs	r3, #127	; 0x7f
 800255c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002560:	e002      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d012      	beq.n	800258e <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800256c:	2222      	movs	r2, #34	; 0x22
 800256e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002572:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002576:	6801      	ldr	r1, [r0, #0]
 8002578:	688a      	ldr	r2, [r1, #8]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002580:	6801      	ldr	r1, [r0, #0]
 8002582:	680a      	ldr	r2, [r1, #0]
 8002584:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002588:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800258a:	4618      	mov	r0, r3
 800258c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800258e:	6903      	ldr	r3, [r0, #16]
 8002590:	b91b      	cbnz	r3, 800259a <HAL_UART_Receive_IT+0x9a>
 8002592:	237f      	movs	r3, #127	; 0x7f
 8002594:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002598:	e7e6      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
 800259a:	233f      	movs	r3, #63	; 0x3f
 800259c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80025a0:	e7e2      	b.n	8002568 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
 80025a4:	4770      	bx	lr
 80025a6:	2001      	movs	r0, #1
 80025a8:	4770      	bx	lr
    __HAL_LOCK(huart);
 80025aa:	2002      	movs	r0, #2
}
 80025ac:	4770      	bx	lr

080025ae <HAL_UART_TxCpltCallback>:
{
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_RxCpltCallback>:
{
 80025b0:	4770      	bx	lr

080025b2 <HAL_UART_ErrorCallback>:
{
 80025b2:	4770      	bx	lr

080025b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80025be:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80025c2:	f7ff fff6 	bl	80025b2 <HAL_UART_ErrorCallback>
 80025c6:	bd08      	pop	{r3, pc}

080025c8 <UART_SetConfig>:
{
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025cc:	6883      	ldr	r3, [r0, #8]
 80025ce:	6902      	ldr	r2, [r0, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	6942      	ldr	r2, [r0, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	69c2      	ldr	r2, [r0, #28]
 80025d8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	6808      	ldr	r0, [r1, #0]
 80025de:	4a64      	ldr	r2, [pc, #400]	; (8002770 <UART_SetConfig+0x1a8>)
 80025e0:	4002      	ands	r2, r0
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	6853      	ldr	r3, [r2, #4]
 80025ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ee:	68e1      	ldr	r1, [r4, #12]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025f4:	69a3      	ldr	r3, [r4, #24]
 80025f6:	6a22      	ldr	r2, [r4, #32]
 80025f8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025fa:	6821      	ldr	r1, [r4, #0]
 80025fc:	688a      	ldr	r2, [r1, #8]
 80025fe:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002606:	6825      	ldr	r5, [r4, #0]
 8002608:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <UART_SetConfig+0x1ac>)
 800260a:	429d      	cmp	r5, r3
 800260c:	d015      	beq.n	800263a <UART_SetConfig+0x72>
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <UART_SetConfig+0x1b0>)
 8002610:	429d      	cmp	r5, r3
 8002612:	d029      	beq.n	8002668 <UART_SetConfig+0xa0>
 8002614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002618:	429d      	cmp	r5, r3
 800261a:	d021      	beq.n	8002660 <UART_SetConfig+0x98>
 800261c:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261e:	69e2      	ldr	r2, [r4, #28]
 8002620:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002624:	d022      	beq.n	800266c <UART_SetConfig+0xa4>
    switch (clocksource)
 8002626:	2b08      	cmp	r3, #8
 8002628:	f200 809f 	bhi.w	800276a <UART_SetConfig+0x1a2>
 800262c:	e8df f003 	tbb	[pc, r3]
 8002630:	9d7c7166 	.word	0x9d7c7166
 8002634:	9d9d9d88 	.word	0x9d9d9d88
 8002638:	93          	.byte	0x93
 8002639:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800263a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d809      	bhi.n	800265c <UART_SetConfig+0x94>
 8002648:	e8df f003 	tbb	[pc, r3]
 800264c:	0c060402 	.word	0x0c060402
 8002650:	2300      	movs	r3, #0
 8002652:	e7e4      	b.n	800261e <UART_SetConfig+0x56>
 8002654:	2304      	movs	r3, #4
 8002656:	e7e2      	b.n	800261e <UART_SetConfig+0x56>
 8002658:	2308      	movs	r3, #8
 800265a:	e7e0      	b.n	800261e <UART_SetConfig+0x56>
 800265c:	2310      	movs	r3, #16
 800265e:	e7de      	b.n	800261e <UART_SetConfig+0x56>
 8002660:	2300      	movs	r3, #0
 8002662:	e7dc      	b.n	800261e <UART_SetConfig+0x56>
 8002664:	2302      	movs	r3, #2
 8002666:	e7da      	b.n	800261e <UART_SetConfig+0x56>
 8002668:	2300      	movs	r3, #0
 800266a:	e7d8      	b.n	800261e <UART_SetConfig+0x56>
    switch (clocksource)
 800266c:	2b08      	cmp	r3, #8
 800266e:	d842      	bhi.n	80026f6 <UART_SetConfig+0x12e>
 8002670:	e8df f003 	tbb	[pc, r3]
 8002674:	41221705 	.word	0x41221705
 8002678:	4141412d 	.word	0x4141412d
 800267c:	38          	.byte	0x38
 800267d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800267e:	f7ff fe2f 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8002682:	6862      	ldr	r2, [r4, #4]
 8002684:	0853      	lsrs	r3, r2, #1
 8002686:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800268a:	fbb3 f3f2 	udiv	r3, r3, r2
 800268e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002690:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002692:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002696:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800269a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	60d3      	str	r3, [r2, #12]
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026a2:	f7ff fe33 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80026a6:	6862      	ldr	r2, [r4, #4]
 80026a8:	0853      	lsrs	r3, r2, #1
 80026aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80026ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80026b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026b4:	2000      	movs	r0, #0
        break;
 80026b6:	e7ec      	b.n	8002692 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	0853      	lsrs	r3, r2, #1
 80026bc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80026c0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80026c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ca:	2000      	movs	r0, #0
        break;
 80026cc:	e7e1      	b.n	8002692 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026ce:	f7ff fcdf 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 80026d2:	6862      	ldr	r2, [r4, #4]
 80026d4:	0853      	lsrs	r3, r2, #1
 80026d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80026da:	fbb3 f3f2 	udiv	r3, r3, r2
 80026de:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026e0:	2000      	movs	r0, #0
        break;
 80026e2:	e7d6      	b.n	8002692 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026e4:	6862      	ldr	r2, [r4, #4]
 80026e6:	0853      	lsrs	r3, r2, #1
 80026e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f2:	2000      	movs	r0, #0
        break;
 80026f4:	e7cd      	b.n	8002692 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e7ca      	b.n	8002692 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026fc:	f7ff fdf0 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8002700:	6863      	ldr	r3, [r4, #4]
 8002702:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002706:	fbb0 f0f3 	udiv	r0, r0, r3
 800270a:	b280      	uxth	r0, r0
 800270c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800270e:	2000      	movs	r0, #0
        break;
 8002710:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002712:	f7ff fdfb 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800271c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002720:	b280      	uxth	r0, r0
 8002722:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002724:	2000      	movs	r0, #0
        break;
 8002726:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002728:	6862      	ldr	r2, [r4, #4]
 800272a:	0853      	lsrs	r3, r2, #1
 800272c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002730:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002734:	fbb3 f3f2 	udiv	r3, r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800273c:	2000      	movs	r0, #0
        break;
 800273e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002740:	f7ff fca6 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800274a:	fbb0 f0f3 	udiv	r0, r0, r3
 800274e:	b280      	uxth	r0, r0
 8002750:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002752:	2000      	movs	r0, #0
        break;
 8002754:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002756:	6862      	ldr	r2, [r4, #4]
 8002758:	0853      	lsrs	r3, r2, #1
 800275a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800275e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002766:	2000      	movs	r0, #0
        break;
 8002768:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 800276a:	2001      	movs	r0, #1
}
 800276c:	bd38      	pop	{r3, r4, r5, pc}
 800276e:	bf00      	nop
 8002770:	efff69f3 	.word	0xefff69f3
 8002774:	40013800 	.word	0x40013800
 8002778:	40004400 	.word	0x40004400

0800277c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800277e:	f013 0f01 	tst.w	r3, #1
 8002782:	d006      	beq.n	8002792 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002784:	6802      	ldr	r2, [r0, #0]
 8002786:	6853      	ldr	r3, [r2, #4]
 8002788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800278c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800278e:	430b      	orrs	r3, r1
 8002790:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002792:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002794:	f013 0f02 	tst.w	r3, #2
 8002798:	d006      	beq.n	80027a8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800279a:	6802      	ldr	r2, [r0, #0]
 800279c:	6853      	ldr	r3, [r2, #4]
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027aa:	f013 0f04 	tst.w	r3, #4
 80027ae:	d006      	beq.n	80027be <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027b0:	6802      	ldr	r2, [r0, #0]
 80027b2:	6853      	ldr	r3, [r2, #4]
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027c0:	f013 0f08 	tst.w	r3, #8
 80027c4:	d006      	beq.n	80027d4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027c6:	6802      	ldr	r2, [r0, #0]
 80027c8:	6853      	ldr	r3, [r2, #4]
 80027ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027d6:	f013 0f10 	tst.w	r3, #16
 80027da:	d006      	beq.n	80027ea <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027dc:	6802      	ldr	r2, [r0, #0]
 80027de:	6893      	ldr	r3, [r2, #8]
 80027e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80027e6:	430b      	orrs	r3, r1
 80027e8:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027ec:	f013 0f20 	tst.w	r3, #32
 80027f0:	d006      	beq.n	8002800 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027f2:	6802      	ldr	r2, [r0, #0]
 80027f4:	6893      	ldr	r3, [r2, #8]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002802:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002806:	d00a      	beq.n	800281e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002808:	6802      	ldr	r2, [r0, #0]
 800280a:	6853      	ldr	r3, [r2, #4]
 800280c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002810:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002812:	430b      	orrs	r3, r1
 8002814:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002816:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800281c:	d00b      	beq.n	8002836 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800281e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002820:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002824:	d006      	beq.n	8002834 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002826:	6802      	ldr	r2, [r0, #0]
 8002828:	6853      	ldr	r3, [r2, #4]
 800282a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800282e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002830:	430b      	orrs	r3, r1
 8002832:	6053      	str	r3, [r2, #4]
 8002834:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002836:	6802      	ldr	r2, [r0, #0]
 8002838:	6853      	ldr	r3, [r2, #4]
 800283a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800283e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002840:	430b      	orrs	r3, r1
 8002842:	6053      	str	r3, [r2, #4]
 8002844:	e7eb      	b.n	800281e <UART_AdvFeatureConfig+0xa2>

08002846 <UART_WaitOnFlagUntilTimeout>:
{
 8002846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284a:	4605      	mov	r5, r0
 800284c:	460f      	mov	r7, r1
 800284e:	4616      	mov	r6, r2
 8002850:	4698      	mov	r8, r3
 8002852:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	ea37 0303 	bics.w	r3, r7, r3
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	42b3      	cmp	r3, r6
 8002864:	d11e      	bne.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002866:	f1b4 3fff 	cmp.w	r4, #4294967295
 800286a:	d0f3      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800286c:	b12c      	cbz	r4, 800287a <UART_WaitOnFlagUntilTimeout+0x34>
 800286e:	f7fe f8f5 	bl	8000a5c <HAL_GetTick>
 8002872:	eba0 0008 	sub.w	r0, r0, r8
 8002876:	4284      	cmp	r4, r0
 8002878:	d2ec      	bcs.n	8002854 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800287a:	682a      	ldr	r2, [r5, #0]
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002882:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	682a      	ldr	r2, [r5, #0]
 8002886:	6893      	ldr	r3, [r2, #8]
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800288e:	2320      	movs	r3, #32
 8002890:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002894:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002898:	2300      	movs	r3, #0
 800289a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800289e:	2003      	movs	r0, #3
 80028a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80028a4:	2000      	movs	r0, #0
}
 80028a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028aa <HAL_UART_Transmit>:
{
 80028aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80028b2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d004      	beq.n	80028c6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
}
 80028be:	4618      	mov	r0, r3
 80028c0:	b002      	add	sp, #8
 80028c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80028cc:	2900      	cmp	r1, #0
 80028ce:	d04e      	beq.n	800296e <HAL_UART_Transmit+0xc4>
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	d04e      	beq.n	8002972 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80028d4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_UART_Transmit+0x36>
 80028dc:	2302      	movs	r3, #2
 80028de:	e7ee      	b.n	80028be <HAL_UART_Transmit+0x14>
 80028e0:	2301      	movs	r3, #1
 80028e2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ea:	2321      	movs	r3, #33	; 0x21
 80028ec:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80028f0:	f7fe f8b4 	bl	8000a5c <HAL_GetTick>
 80028f4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80028f6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80028fa:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80028fe:	e003      	b.n	8002908 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	782a      	ldrb	r2, [r5, #0]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
 8002906:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8002908:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800290c:	b29b      	uxth	r3, r3
 800290e:	b1e3      	cbz	r3, 800294a <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8002910:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29b      	uxth	r3, r3
 800291a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291e:	9600      	str	r6, [sp, #0]
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff ff8d 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 800292c:	bb18      	cbnz	r0, 8002976 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68a3      	ldr	r3, [r4, #8]
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d1e4      	bne.n	8002900 <HAL_UART_Transmit+0x56>
 8002936:	6923      	ldr	r3, [r4, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e1      	bne.n	8002900 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002946:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002948:	e7de      	b.n	8002908 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	9600      	str	r6, [sp, #0]
 800294c:	463b      	mov	r3, r7
 800294e:	2200      	movs	r2, #0
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff ff77 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	b108      	cbz	r0, 8002960 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e7ae      	b.n	80028be <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002960:	2220      	movs	r2, #32
 8002962:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002966:	2200      	movs	r2, #0
 8002968:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 800296c:	e7a7      	b.n	80028be <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e7a5      	b.n	80028be <HAL_UART_Transmit+0x14>
 8002972:	2301      	movs	r3, #1
 8002974:	e7a3      	b.n	80028be <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e7a1      	b.n	80028be <HAL_UART_Transmit+0x14>

0800297a <UART_CheckIdleState>:
{
 800297a:	b530      	push	{r4, r5, lr}
 800297c:	b083      	sub	sp, #12
 800297e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	2300      	movs	r3, #0
 8002982:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002984:	f7fe f86a 	bl	8000a5c <HAL_GetTick>
 8002988:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f013 0f08 	tst.w	r3, #8
 8002992:	d10e      	bne.n	80029b2 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f013 0f04 	tst.w	r3, #4
 800299c:	d117      	bne.n	80029ce <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800299e:	2320      	movs	r3, #32
 80029a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80029ae:	b003      	add	sp, #12
 80029b0:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4603      	mov	r3, r0
 80029ba:	2200      	movs	r2, #0
 80029bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff ff40 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d0e4      	beq.n	8002994 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80029ca:	2003      	movs	r0, #3
 80029cc:	e7ef      	b.n	80029ae <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	462b      	mov	r3, r5
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ff32 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d0db      	beq.n	800299e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80029e6:	2003      	movs	r0, #3
 80029e8:	e7e1      	b.n	80029ae <UART_CheckIdleState+0x34>

080029ea <HAL_UART_Init>:
  if(huart == NULL)
 80029ea:	b378      	cbz	r0, 8002a4c <HAL_UART_Init+0x62>
{
 80029ec:	b510      	push	{r4, lr}
 80029ee:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80029f0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80029f4:	b30b      	cbz	r3, 8002a3a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80029f6:	2324      	movs	r3, #36	; 0x24
 80029f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff fdde 	bl	80025c8 <UART_SetConfig>
 8002a0c:	2801      	cmp	r0, #1
 8002a0e:	d01f      	beq.n	8002a50 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a12:	b9bb      	cbnz	r3, 8002a44 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	6853      	ldr	r3, [r2, #4]
 8002a18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a1c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	6893      	ldr	r3, [r2, #8]
 8002a22:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002a26:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	6813      	ldr	r3, [r2, #0]
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7ff ffa1 	bl	800297a <UART_CheckIdleState>
 8002a38:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002a3e:	f001 f811 	bl	8003a64 <HAL_UART_MspInit>
 8002a42:	e7d8      	b.n	80029f6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff fe99 	bl	800277c <UART_AdvFeatureConfig>
 8002a4a:	e7e3      	b.n	8002a14 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	4770      	bx	lr
}
 8002a50:	bd10      	pop	{r4, pc}

08002a52 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a52:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b21      	cmp	r3, #33	; 0x21
 8002a5a:	d001      	beq.n	8002a60 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2002      	movs	r0, #2
  }
}
 8002a5e:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002a60:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b193      	cbz	r3, 8002a8e <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	6883      	ldr	r3, [r0, #8]
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6e:	d01a      	beq.n	8002aa6 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002a70:	6802      	ldr	r2, [r0, #0]
 8002a72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a74:	1c59      	adds	r1, r3, #1
 8002a76:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002a7c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a8e:	6802      	ldr	r2, [r0, #0]
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a96:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a98:	6802      	ldr	r2, [r0, #0]
 8002a9a:	6813      	ldr	r3, [r2, #0]
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa0:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa6:	6903      	ldr	r3, [r0, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e1      	bne.n	8002a70 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002aac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002ab8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002aba:	3302      	adds	r3, #2
 8002abc:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002abe:	e7dd      	b.n	8002a7c <UART_Transmit_IT+0x2a>

08002ac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ac0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ac2:	6801      	ldr	r1, [r0, #0]
 8002ac4:	680b      	ldr	r3, [r1, #0]
 8002ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aca:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	2320      	movs	r3, #32
 8002ace:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002ad2:	f7ff fd6c 	bl	80025ae <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	bd08      	pop	{r3, pc}

08002ada <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002ada:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ade:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b22      	cmp	r3, #34	; 0x22
 8002ae6:	d006      	beq.n	8002af6 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	6993      	ldr	r3, [r2, #24]
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002af2:	2002      	movs	r0, #2
 8002af4:	4770      	bx	lr
{
 8002af6:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002af8:	6803      	ldr	r3, [r0, #0]
 8002afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002afc:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afe:	6881      	ldr	r1, [r0, #8]
 8002b00:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b04:	d00f      	beq.n	8002b26 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b06:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002b08:	1c4c      	adds	r4, r1, #1
 8002b0a:	6544      	str	r4, [r0, #84]	; 0x54
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	401a      	ands	r2, r3
 8002b10:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8002b12:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002b20:	b15b      	cbz	r3, 8002b3a <UART_Receive_IT+0x60>
    return HAL_OK;
 8002b22:	2000      	movs	r0, #0
  }
}
 8002b24:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b26:	6901      	ldr	r1, [r0, #16]
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d1ec      	bne.n	8002b06 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002b2c:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002b2e:	401a      	ands	r2, r3
 8002b30:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8002b32:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b34:	3302      	adds	r3, #2
 8002b36:	6543      	str	r3, [r0, #84]	; 0x54
 8002b38:	e7eb      	b.n	8002b12 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b42:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	6802      	ldr	r2, [r0, #0]
 8002b46:	6893      	ldr	r3, [r2, #8]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002b54:	f7ff fd2c 	bl	80025b0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002b58:	2000      	movs	r0, #0
 8002b5a:	bd10      	pop	{r4, pc}

08002b5c <HAL_UART_IRQHandler>:
{
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b60:	6802      	ldr	r2, [r0, #0]
 8002b62:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b64:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002b66:	f013 050f 	ands.w	r5, r3, #15
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b6c:	f013 0f20 	tst.w	r3, #32
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_IRQHandler+0x1c>
 8002b72:	f011 0f20 	tst.w	r1, #32
 8002b76:	d160      	bne.n	8002c3a <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002b78:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	d072      	beq.n	8002c64 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002b7e:	f010 0501 	ands.w	r5, r0, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002b84:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002b88:	d06c      	beq.n	8002c64 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b8a:	f013 0f01 	tst.w	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x44>
 8002b90:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002b94:	d004      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002b96:	2001      	movs	r0, #1
 8002b98:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002b9c:	4302      	orrs	r2, r0
 8002b9e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba0:	f013 0f02 	tst.w	r3, #2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x5a>
 8002ba6:	b135      	cbz	r5, 8002bb6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	2002      	movs	r0, #2
 8002bac:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bb0:	f042 0204 	orr.w	r2, r2, #4
 8002bb4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb6:	f013 0f04 	tst.w	r3, #4
 8002bba:	d007      	beq.n	8002bcc <HAL_UART_IRQHandler+0x70>
 8002bbc:	b135      	cbz	r5, 8002bcc <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002bbe:	6822      	ldr	r2, [r4, #0]
 8002bc0:	2004      	movs	r0, #4
 8002bc2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bc6:	f042 0202 	orr.w	r2, r2, #2
 8002bca:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002bcc:	f013 0f08 	tst.w	r3, #8
 8002bd0:	d009      	beq.n	8002be6 <HAL_UART_IRQHandler+0x8a>
 8002bd2:	f011 0f20 	tst.w	r1, #32
 8002bd6:	d100      	bne.n	8002bda <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd8:	b12d      	cbz	r5, 8002be6 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	2008      	movs	r0, #8
 8002bde:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002be0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002be2:	4302      	orrs	r2, r0
 8002be4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d04d      	beq.n	8002c88 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bec:	f013 0f20 	tst.w	r3, #32
 8002bf0:	d002      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x9c>
 8002bf2:	f011 0f20 	tst.w	r1, #32
 8002bf6:	d123      	bne.n	8002c40 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002bf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002bfa:	f013 0f08 	tst.w	r3, #8
 8002bfe:	d104      	bne.n	8002c0a <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002c04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c08:	d026      	beq.n	8002c58 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fc6a 	bl	80024e4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c18:	d01a      	beq.n	8002c50 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c24:	b183      	cbz	r3, 8002c48 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_UART_IRQHandler+0x158>)
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002c2c:	f7fe fe34 	bl	8001898 <HAL_DMA_Abort_IT>
 8002c30:	b350      	cbz	r0, 8002c88 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c32:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002c34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c36:	4798      	blx	r3
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002c3a:	f7ff ff4e 	bl	8002ada <UART_Receive_IT>
      return;
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff ff4a 	bl	8002ada <UART_Receive_IT>
 8002c46:	e7d7      	b.n	8002bf8 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fcb2 	bl	80025b2 <HAL_UART_ErrorCallback>
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff fcae 	bl	80025b2 <HAL_UART_ErrorCallback>
 8002c56:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff fcaa 	bl	80025b2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_IRQHandler+0x114>
 8002c6a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002c6e:	d10c      	bne.n	8002c8a <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_IRQHandler+0x120>
 8002c76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c7a:	d112      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_IRQHandler+0x12c>
 8002c82:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c86:	d110      	bne.n	8002caa <HAL_UART_IRQHandler+0x14e>
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002c8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c8e:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002c90:	2320      	movs	r3, #32
 8002c92:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002c96:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f000 f80c 	bl	8002cb8 <HAL_UARTEx_WakeupCallback>
    return;
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff fed5 	bl	8002a52 <UART_Transmit_IT>
    return;
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff ff08 	bl	8002ac0 <UART_EndTransmit_IT>
    return;
 8002cb0:	e7ea      	b.n	8002c88 <HAL_UART_IRQHandler+0x12c>
 8002cb2:	bf00      	nop
 8002cb4:	080025b5 	.word	0x080025b5

08002cb8 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	4770      	bx	lr
	...

08002cbc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <MX_GPIO_Init+0x11c>)
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cc8:	615a      	str	r2, [r3, #20]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cda:	615a      	str	r2, [r3, #20]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002ce2:	9202      	str	r2, [sp, #8]
 8002ce4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002cf4:	9203      	str	r2, [sp, #12]
 8002cf6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002cfe:	615a      	str	r2, [r3, #20]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d06:	9304      	str	r3, [sp, #16]
 8002d08:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8002d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d14:	f7fe feb0 	bl	8001a78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002d18:	4e30      	ldr	r6, [pc, #192]	; (8002ddc <MX_GPIO_Init+0x120>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8002d20:	4630      	mov	r0, r6
 8002d22:	f7fe fea9 	bl	8001a78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d26:	4d2e      	ldr	r5, [pc, #184]	; (8002de0 <MX_GPIO_Init+0x124>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f7fe fea3 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <MX_GPIO_Init+0x128>)
 8002d3a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d40:	a905      	add	r1, sp, #20
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7fe fdce 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d48:	2703      	movs	r7, #3
 8002d4a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	a905      	add	r1, sp, #20
 8002d52:	4628      	mov	r0, r5
 8002d54:	f7fe fdc6 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002d58:	2313      	movs	r3, #19
 8002d5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d5c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d60:	a905      	add	r1, sp, #20
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f7fe fdbd 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d74:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d76:	2307      	movs	r3, #7
 8002d78:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	a905      	add	r1, sp, #20
 8002d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d80:	f7fe fdb0 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002d84:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002d88:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8a:	2701      	movs	r7, #1
 8002d8c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	a905      	add	r1, sp, #20
 8002d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d98:	f7fe fda4 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002d9c:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8002da0:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	a905      	add	r1, sp, #20
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7fe fd9a 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	a905      	add	r1, sp, #20
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f7fe fd91 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	a905      	add	r1, sp, #20
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f7fe fd88 	bl	80018e4 <HAL_GPIO_Init>

}
 8002dd4:	b00b      	add	sp, #44	; 0x2c
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	48000800 	.word	0x48000800
 8002de4:	10210000 	.word	0x10210000

08002de8 <MX_USART1_UART_Init>:
{
 8002de8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002dea:	4809      	ldr	r0, [pc, #36]	; (8002e10 <MX_USART1_UART_Init+0x28>)
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <MX_USART1_UART_Init+0x2c>)
 8002dee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002df0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002df4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	2300      	movs	r3, #0
 8002df8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dfa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dfc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dfe:	220c      	movs	r2, #12
 8002e00:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e06:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e08:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0a:	f7ff fdee 	bl	80029ea <HAL_UART_Init>
 8002e0e:	bd08      	pop	{r3, pc}
 8002e10:	200004b0 	.word	0x200004b0
 8002e14:	40013800 	.word	0x40013800

08002e18 <MX_ADC1_Init>:
{
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8002e1c:	4c19      	ldr	r4, [pc, #100]	; (8002e84 <MX_ADC1_Init+0x6c>)
 8002e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e22:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e24:	2500      	movs	r5, #0
 8002e26:	6065      	str	r5, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e28:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e2a:	2601      	movs	r6, #1
 8002e2c:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e2e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e30:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e32:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e34:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e36:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002e38:	2702      	movs	r7, #2
 8002e3a:	6227      	str	r7, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e3c:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e42:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002e44:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7fd ff02 	bl	8000c50 <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e4c:	a90a      	add	r1, sp, #40	; 0x28
 8002e4e:	f841 5d0c 	str.w	r5, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7fe fc08 	bl	8001668 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 2;
 8002e5c:	9702      	str	r7, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e5e:	9504      	str	r5, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8002e60:	2305      	movs	r3, #5
 8002e62:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e64:	9505      	str	r5, [sp, #20]
  sConfig.Offset = 0;
 8002e66:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e68:	a901      	add	r1, sp, #4
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7fe fa3a 	bl	80012e4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8002e70:	2308      	movs	r3, #8
 8002e72:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
 8002e74:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e76:	a901      	add	r1, sp, #4
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7fe fa33 	bl	80012e4 <HAL_ADC_ConfigChannel>
}
 8002e7e:	b00b      	add	sp, #44	; 0x2c
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	2000045c 	.word	0x2000045c

08002e88 <SystemClock_Config>:
{
 8002e88:	b530      	push	{r4, r5, lr}
 8002e8a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e8c:	2502      	movs	r5, #2
 8002e8e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e90:	2301      	movs	r3, #1
 8002e92:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e94:	2310      	movs	r3, #16
 8002e96:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e98:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002e9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ea2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea4:	a80c      	add	r0, sp, #48	; 0x30
 8002ea6:	f7fe fded 	bl	8001a84 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eaa:	230f      	movs	r3, #15
 8002eac:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eae:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eb8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eba:	4629      	mov	r1, r5
 8002ebc:	a807      	add	r0, sp, #28
 8002ebe:	f7ff f91f 	bl	8002100 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002ec2:	2381      	movs	r3, #129	; 0x81
 8002ec4:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ec6:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV128;
 8002ec8:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002ecc:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ece:	4668      	mov	r0, sp
 8002ed0:	f7ff fa32 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ed4:	f7ff f9fe 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <SystemClock_Config+0x74>)
 8002eda:	fba3 3000 	umull	r3, r0, r3, r0
 8002ede:	0980      	lsrs	r0, r0, #6
 8002ee0:	f7fe fcb0 	bl	8001844 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ee4:	2004      	movs	r0, #4
 8002ee6:	f7fe fcc3 	bl	8001870 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002eea:	4622      	mov	r2, r4
 8002eec:	4621      	mov	r1, r4
 8002eee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef2:	f7fe fc69 	bl	80017c8 <HAL_NVIC_SetPriority>
}
 8002ef6:	b017      	add	sp, #92	; 0x5c
 8002ef8:	bd30      	pop	{r4, r5, pc}
 8002efa:	bf00      	nop
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <Disable_Digits>:
	}
	}
}

void Disable_Digits(void)
{
 8002f00:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET); //1
 8002f02:	4c0b      	ldr	r4, [pc, #44]	; (8002f30 <Disable_Digits+0x30>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7fe fdb4 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET); //2
 8002f10:	2201      	movs	r2, #1
 8002f12:	2110      	movs	r1, #16
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7fe fdaf 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET); //3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7fe fdaa 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET); //4
 8002f24:	2201      	movs	r2, #1
 8002f26:	2108      	movs	r1, #8
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7fe fda5 	bl	8001a78 <HAL_GPIO_WritePin>
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	48000400 	.word	0x48000400

08002f34 <set_all>:
}

void set_all(void)
{
 8002f34:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 8002f36:	2201      	movs	r2, #1
 8002f38:	2120      	movs	r1, #32
 8002f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3e:	f7fe fd9b 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002f42:	2201      	movs	r2, #1
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f4a:	f7fe fd95 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f56:	f7fe fd8f 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	480b      	ldr	r0, [pc, #44]	; (8002f8c <set_all+0x58>)
 8002f60:	f7fe fd8a 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002f64:	2201      	movs	r2, #1
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	4809      	ldr	r0, [pc, #36]	; (8002f90 <set_all+0x5c>)
 8002f6a:	f7fe fd85 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f78:	f7fe fd7e 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f86:	f7fe fd77 	bl	8001a78 <HAL_GPIO_WritePin>
 8002f8a:	bd08      	pop	{r3, pc}
 8002f8c:	48000400 	.word	0x48000400
 8002f90:	48000800 	.word	0x48000800

08002f94 <reset_all>:
}

void reset_all(void)
{
 8002f94:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 8002f96:	2200      	movs	r2, #0
 8002f98:	2120      	movs	r1, #32
 8002f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f9e:	f7fe fd6b 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	; 0x40
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002faa:	f7fe fd65 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb6:	f7fe fd5f 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET); //4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	480b      	ldr	r0, [pc, #44]	; (8002fec <reset_all+0x58>)
 8002fc0:	f7fe fd5a 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET); //5
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <reset_all+0x5c>)
 8002fca:	f7fe fd55 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET); //6
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd8:	f7fe fd4e 	bl	8001a78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); //7
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe6:	f7fe fd47 	bl	8001a78 <HAL_GPIO_WritePin>
 8002fea:	bd08      	pop	{r3, pc}
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48000800 	.word	0x48000800

08002ff4 <Digit_Maker>:
{
 8002ff4:	b508      	push	{r3, lr}
	switch (digit)
 8002ff6:	2809      	cmp	r0, #9
 8002ff8:	d814      	bhi.n	8003024 <Digit_Maker+0x30>
 8002ffa:	e8df f000 	tbb	[pc, r0]
 8002ffe:	057e      	.short	0x057e
 8003000:	47342515 	.word	0x47342515
 8003004:	76735e55 	.word	0x76735e55
		set_all();
 8003008:	f7ff ff94 	bl	8002f34 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 800300c:	2200      	movs	r2, #0
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003014:	f7fe fd30 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003020:	f7fe fd2a 	bl	8001a78 <HAL_GPIO_WritePin>
}
 8003024:	2001      	movs	r0, #1
 8003026:	bd08      	pop	{r3, pc}
		reset_all();
 8003028:	f7ff ffb4 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 800302c:	2201      	movs	r2, #1
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003034:	f7fe fd20 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8003038:	2201      	movs	r2, #1
 800303a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003042:	f7fe fd19 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8003046:	e7ed      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 8003048:	f7ff ffa4 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 800304c:	2201      	movs	r2, #1
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	482f      	ldr	r0, [pc, #188]	; (8003110 <Digit_Maker+0x11c>)
 8003052:	f7fe fd11 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8003056:	2201      	movs	r2, #1
 8003058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800305c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003060:	f7fe fd0a 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 8003064:	e7de      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 8003066:	f7ff ff95 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 800306a:	2201      	movs	r2, #1
 800306c:	2120      	movs	r1, #32
 800306e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003072:	f7fe fd01 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8003076:	2201      	movs	r2, #1
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	4826      	ldr	r0, [pc, #152]	; (8003114 <Digit_Maker+0x120>)
 800307c:	f7fe fcfc 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8003080:	2201      	movs	r2, #1
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	4822      	ldr	r0, [pc, #136]	; (8003110 <Digit_Maker+0x11c>)
 8003086:	f7fe fcf7 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 800308a:	e7cb      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 800308c:	f7ff ff82 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8003090:	2201      	movs	r2, #1
 8003092:	2140      	movs	r1, #64	; 0x40
 8003094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003098:	f7fe fcee 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 800309c:	2201      	movs	r2, #1
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	481b      	ldr	r0, [pc, #108]	; (8003110 <Digit_Maker+0x11c>)
 80030a2:	f7fe fce9 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 80030a6:	e7bd      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 80030a8:	f7ff ff74 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 80030ac:	2201      	movs	r2, #1
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b4:	f7fe fce0 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 80030b8:	e7b4      	b.n	8003024 <Digit_Maker+0x30>
		set_all();
 80030ba:	f7ff ff3b 	bl	8002f34 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 80030be:	2200      	movs	r2, #0
 80030c0:	2120      	movs	r1, #32
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c6:	f7fe fcd7 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 80030ca:	2200      	movs	r2, #0
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d2:	f7fe fcd1 	bl	8001a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 80030d6:	2200      	movs	r2, #0
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030de:	f7fe fccb 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 80030e2:	e79f      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 80030e4:	f7ff ff56 	bl	8002f94 <reset_all>
		break;
 80030e8:	e79c      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 80030ea:	f7ff ff53 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 80030ee:	2201      	movs	r2, #1
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <Digit_Maker+0x11c>)
 80030f4:	f7fe fcc0 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 80030f8:	e794      	b.n	8003024 <Digit_Maker+0x30>
		reset_all();
 80030fa:	f7ff ff4b 	bl	8002f94 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 80030fe:	2201      	movs	r2, #1
 8003100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003108:	f7fe fcb6 	bl	8001a78 <HAL_GPIO_WritePin>
		break;
 800310c:	e78a      	b.n	8003024 <Digit_Maker+0x30>
 800310e:	bf00      	nop
 8003110:	48000800 	.word	0x48000800
 8003114:	48000400 	.word	0x48000400

08003118 <Number_Display>:
{
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	b083      	sub	sp, #12
 800311e:	4607      	mov	r7, r0
 8003120:	468a      	mov	sl, r1
 8003122:	4693      	mov	fp, r2
 8003124:	9301      	str	r3, [sp, #4]
	int d4cplt = 0;
 8003126:	2400      	movs	r4, #0
	int d3cplt = 0;
 8003128:	46a1      	mov	r9, r4
	int d2cplt = 0;
 800312a:	46a0      	mov	r8, r4
	int d1cplt = 0;
 800312c:	4626      	mov	r6, r4
	int process = 1;
 800312e:	2501      	movs	r5, #1
	while (process)
 8003130:	e077      	b.n	8003222 <Number_Display+0x10a>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8003132:	2201      	movs	r2, #1
 8003134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003138:	484e      	ldr	r0, [pc, #312]	; (8003274 <Number_Display+0x15c>)
 800313a:	f7fe fc9d 	bl	8001a78 <HAL_GPIO_WritePin>
			if(d2==0)
 800313e:	f1ba 0f00 	cmp.w	sl, #0
 8003142:	d001      	beq.n	8003148 <Number_Display+0x30>
			d1cplt = 1;
 8003144:	462e      	mov	r6, r5
 8003146:	e06f      	b.n	8003228 <Number_Display+0x110>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8003148:	2201      	movs	r2, #1
 800314a:	2110      	movs	r1, #16
 800314c:	4849      	ldr	r0, [pc, #292]	; (8003274 <Number_Display+0x15c>)
 800314e:	f7fe fc93 	bl	8001a78 <HAL_GPIO_WritePin>
				if(d3==0)
 8003152:	f1bb 0f00 	cmp.w	fp, #0
 8003156:	d002      	beq.n	800315e <Number_Display+0x46>
				d2cplt = 1;
 8003158:	46a8      	mov	r8, r5
			d1cplt = 1;
 800315a:	462e      	mov	r6, r5
 800315c:	e064      	b.n	8003228 <Number_Display+0x110>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800315e:	2201      	movs	r2, #1
 8003160:	2120      	movs	r1, #32
 8003162:	4844      	ldr	r0, [pc, #272]	; (8003274 <Number_Display+0x15c>)
 8003164:	f7fe fc88 	bl	8001a78 <HAL_GPIO_WritePin>
					d3cplt = 1;
 8003168:	46a9      	mov	r9, r5
				d2cplt = 1;
 800316a:	46a8      	mov	r8, r5
			d1cplt = 1;
 800316c:	462e      	mov	r6, r5
 800316e:	e05b      	b.n	8003228 <Number_Display+0x110>
	if (LEDmsecFlag==1 && d1cplt==0)
 8003170:	2e00      	cmp	r6, #0
 8003172:	d15e      	bne.n	8003232 <Number_Display+0x11a>
		LEDmsecFlag = 0;
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <Number_Display+0x160>)
 8003176:	701e      	strb	r6, [r3, #0]
		Disable_Digits();
 8003178:	f7ff fec2 	bl	8002f00 <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 800317c:	4632      	mov	r2, r6
 800317e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003182:	483c      	ldr	r0, [pc, #240]	; (8003274 <Number_Display+0x15c>)
 8003184:	f7fe fc78 	bl	8001a78 <HAL_GPIO_WritePin>
				Digit_Maker(d1);
 8003188:	4638      	mov	r0, r7
 800318a:	f7ff ff33 	bl	8002ff4 <Digit_Maker>
		d1cplt=1;
 800318e:	462e      	mov	r6, r5
 8003190:	e04f      	b.n	8003232 <Number_Display+0x11a>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8003192:	2e01      	cmp	r6, #1
 8003194:	d152      	bne.n	800323c <Number_Display+0x124>
 8003196:	f1b8 0f00 	cmp.w	r8, #0
 800319a:	d14f      	bne.n	800323c <Number_Display+0x124>
		LEDmsecFlag = 0;
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <Number_Display+0x160>)
 800319e:	f883 8000 	strb.w	r8, [r3]
		Disable_Digits();
 80031a2:	f7ff fead 	bl	8002f00 <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80031a6:	4642      	mov	r2, r8
 80031a8:	2110      	movs	r1, #16
 80031aa:	4832      	ldr	r0, [pc, #200]	; (8003274 <Number_Display+0x15c>)
 80031ac:	f7fe fc64 	bl	8001a78 <HAL_GPIO_WritePin>
				Digit_Maker(d2);
 80031b0:	4650      	mov	r0, sl
 80031b2:	f7ff ff1f 	bl	8002ff4 <Digit_Maker>
		d2cplt=1;
 80031b6:	46b0      	mov	r8, r6
 80031b8:	e040      	b.n	800323c <Number_Display+0x124>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 80031ba:	2e01      	cmp	r6, #1
 80031bc:	d143      	bne.n	8003246 <Number_Display+0x12e>
 80031be:	f1b8 0f01 	cmp.w	r8, #1
 80031c2:	d140      	bne.n	8003246 <Number_Display+0x12e>
 80031c4:	f1b9 0f00 	cmp.w	r9, #0
 80031c8:	d13d      	bne.n	8003246 <Number_Display+0x12e>
		LEDmsecFlag = 0;
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <Number_Display+0x160>)
 80031cc:	f883 9000 	strb.w	r9, [r3]
		Disable_Digits();
 80031d0:	f7ff fe96 	bl	8002f00 <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80031d4:	464a      	mov	r2, r9
 80031d6:	2120      	movs	r1, #32
 80031d8:	4826      	ldr	r0, [pc, #152]	; (8003274 <Number_Display+0x15c>)
 80031da:	f7fe fc4d 	bl	8001a78 <HAL_GPIO_WritePin>
				Digit_Maker(d3);
 80031de:	4658      	mov	r0, fp
 80031e0:	f7ff ff08 	bl	8002ff4 <Digit_Maker>
		d3cplt=1;
 80031e4:	46c1      	mov	r9, r8
 80031e6:	e02e      	b.n	8003246 <Number_Display+0x12e>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 80031e8:	2e01      	cmp	r6, #1
 80031ea:	d131      	bne.n	8003250 <Number_Display+0x138>
 80031ec:	f1b8 0f01 	cmp.w	r8, #1
 80031f0:	d12e      	bne.n	8003250 <Number_Display+0x138>
 80031f2:	f1b9 0f01 	cmp.w	r9, #1
 80031f6:	d12b      	bne.n	8003250 <Number_Display+0x138>
 80031f8:	bb54      	cbnz	r4, 8003250 <Number_Display+0x138>
		LEDmsecFlag = 0;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <Number_Display+0x160>)
 80031fc:	701c      	strb	r4, [r3, #0]
		Disable_Digits();
 80031fe:	f7ff fe7f 	bl	8002f00 <Disable_Digits>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8003202:	4622      	mov	r2, r4
 8003204:	2108      	movs	r1, #8
 8003206:	481b      	ldr	r0, [pc, #108]	; (8003274 <Number_Display+0x15c>)
 8003208:	f7fe fc36 	bl	8001a78 <HAL_GPIO_WritePin>
		Digit_Maker(d4);
 800320c:	9801      	ldr	r0, [sp, #4]
 800320e:	f7ff fef1 	bl	8002ff4 <Digit_Maker>
		d4cplt=1;
 8003212:	464c      	mov	r4, r9
 8003214:	e01c      	b.n	8003250 <Number_Display+0x138>
		d4cplt = 0;
 8003216:	2400      	movs	r4, #0
		d3cplt = 0;
 8003218:	46a1      	mov	r9, r4
		d2cplt = 0;
 800321a:	46a0      	mov	r8, r4
		d1cplt = 0;
 800321c:	4626      	mov	r6, r4
 800321e:	e019      	b.n	8003254 <Number_Display+0x13c>
		process = 0;
 8003220:	2500      	movs	r5, #0
	while (process)
 8003222:	b31d      	cbz	r5, 800326c <Number_Display+0x154>
		if(d1==0)
 8003224:	2f00      	cmp	r7, #0
 8003226:	d084      	beq.n	8003132 <Number_Display+0x1a>
	if (LEDmsecFlag==1 && d1cplt==0)
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <Number_Display+0x160>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d09e      	beq.n	8003170 <Number_Display+0x58>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <Number_Display+0x160>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d0aa      	beq.n	8003192 <Number_Display+0x7a>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <Number_Display+0x160>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d0b9      	beq.n	80031ba <Number_Display+0xa2>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <Number_Display+0x160>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d0cb      	beq.n	80031e8 <Number_Display+0xd0>
	if (d4cplt == 1)
 8003250:	2c01      	cmp	r4, #1
 8003252:	d0e0      	beq.n	8003216 <Number_Display+0xfe>
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <Number_Display+0x164>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d0e0      	beq.n	8003220 <Number_Display+0x108>
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <Number_Display+0x168>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d1dc      	bne.n	8003222 <Number_Display+0x10a>
		process = 0;
 8003268:	2500      	movs	r5, #0
 800326a:	e7da      	b.n	8003222 <Number_Display+0x10a>
}
 800326c:	b003      	add	sp, #12
 800326e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003272:	bf00      	nop
 8003274:	48000400 	.word	0x48000400
 8003278:	200000f5 	.word	0x200000f5
 800327c:	20000882 	.word	0x20000882
 8003280:	200000ed 	.word	0x200000ed

08003284 <Number_Maker>:
{
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (number < 0)
 8003286:	2800      	cmp	r0, #0
 8003288:	db39      	blt.n	80032fe <Number_Maker+0x7a>
	digit4 = number % 10;
 800328a:	4d1e      	ldr	r5, [pc, #120]	; (8003304 <Number_Maker+0x80>)
 800328c:	fb85 3200 	smull	r3, r2, r5, r0
 8003290:	17c4      	asrs	r4, r0, #31
 8003292:	ebc4 02a2 	rsb	r2, r4, r2, asr #2
 8003296:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800329a:	004b      	lsls	r3, r1, #1
 800329c:	1ac3      	subs	r3, r0, r3
	number = number/10;
 800329e:	b212      	sxth	r2, r2
	digit3 = number % 10;
 80032a0:	fb85 1602 	smull	r1, r6, r5, r2
 80032a4:	17d1      	asrs	r1, r2, #31
 80032a6:	ebc1 01a6 	rsb	r1, r1, r6, asr #2
 80032aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032ae:	004e      	lsls	r6, r1, #1
 80032b0:	1b92      	subs	r2, r2, r6
	number = number/10;
 80032b2:	4915      	ldr	r1, [pc, #84]	; (8003308 <Number_Maker+0x84>)
 80032b4:	fb81 6100 	smull	r6, r1, r1, r0
 80032b8:	ebc4 1161 	rsb	r1, r4, r1, asr #5
 80032bc:	b209      	sxth	r1, r1
	digit2 = number % 10;
 80032be:	fb85 6701 	smull	r6, r7, r5, r1
 80032c2:	17ce      	asrs	r6, r1, #31
 80032c4:	ebc6 06a7 	rsb	r6, r6, r7, asr #2
 80032c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80032cc:	0077      	lsls	r7, r6, #1
 80032ce:	1bc9      	subs	r1, r1, r7
	number = number/10;
 80032d0:	4e0e      	ldr	r6, [pc, #56]	; (800330c <Number_Maker+0x88>)
 80032d2:	fb86 6000 	smull	r6, r0, r6, r0
 80032d6:	ebc4 10a0 	rsb	r0, r4, r0, asr #6
 80032da:	b200      	sxth	r0, r0
	digit1 = number % 10;
 80032dc:	fb85 5400 	smull	r5, r4, r5, r0
 80032e0:	17c5      	asrs	r5, r0, #31
 80032e2:	ebc5 05a4 	rsb	r5, r5, r4, asr #2
 80032e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80032ea:	006c      	lsls	r4, r5, #1
 80032ec:	1b00      	subs	r0, r0, r4
	Number_Display(digit1, digit2, digit3, digit4);
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	b252      	sxtb	r2, r2
 80032f2:	b249      	sxtb	r1, r1
 80032f4:	b240      	sxtb	r0, r0
 80032f6:	f7ff ff0f 	bl	8003118 <Number_Display>
}
 80032fa:	2001      	movs	r0, #1
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		number = number * minus;
 80032fe:	4240      	negs	r0, r0
 8003300:	b200      	sxth	r0, r0
 8003302:	e7c2      	b.n	800328a <Number_Maker+0x6>
 8003304:	66666667 	.word	0x66666667
 8003308:	51eb851f 	.word	0x51eb851f
 800330c:	10624dd3 	.word	0x10624dd3

08003310 <convertfromstring>:

uint8_t convertfromstring (char* string, int16_t* value)
{
	int16_t minus = 1;
	int16_t sum = 0;
	if (*string == '\0')
 8003310:	7803      	ldrb	r3, [r0, #0]
 8003312:	b1eb      	cbz	r3, 8003350 <convertfromstring+0x40>
{
 8003314:	b430      	push	{r4, r5}
	{
		return 0;
	}
	if (*string == '-')
 8003316:	2b2d      	cmp	r3, #45	; 0x2d
 8003318:	d002      	beq.n	8003320 <convertfromstring+0x10>
	int16_t minus = 1;
 800331a:	2501      	movs	r5, #1
 800331c:	2200      	movs	r2, #0
 800331e:	e00b      	b.n	8003338 <convertfromstring+0x28>
	{
		minus = -1;
		string++;
 8003320:	3001      	adds	r0, #1
		minus = -1;
 8003322:	f04f 35ff 	mov.w	r5, #4294967295
 8003326:	e7f9      	b.n	800331c <convertfromstring+0xc>
	}
	while ((*string >= '0') &&(*string <= '9'))
	{
		sum = 10 * sum;
 8003328:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800332c:	0054      	lsls	r4, r2, #1
 800332e:	b2a4      	uxth	r4, r4
		sum = sum + (*string - 0x30);
 8003330:	4423      	add	r3, r4
 8003332:	3b30      	subs	r3, #48	; 0x30
 8003334:	b21a      	sxth	r2, r3
		string++;
 8003336:	3001      	adds	r0, #1
	while ((*string >= '0') &&(*string <= '9'))
 8003338:	7803      	ldrb	r3, [r0, #0]
 800333a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800333e:	b2e4      	uxtb	r4, r4
 8003340:	2c09      	cmp	r4, #9
 8003342:	d9f1      	bls.n	8003328 <convertfromstring+0x18>
	}

	*value = minus * sum;
 8003344:	fb15 f302 	smulbb	r3, r5, r2
 8003348:	800b      	strh	r3, [r1, #0]
	return 1;
 800334a:	2001      	movs	r0, #1
}
 800334c:	bc30      	pop	{r4, r5}
 800334e:	4770      	bx	lr
		return 0;
 8003350:	2000      	movs	r0, #0
 8003352:	4770      	bx	lr

08003354 <HAL_SYSTICK_Callback>:
//	return 1;
//}

void HAL_SYSTICK_Callback(void)
{
	LEDmsecCntr++; // New millisecond timer for LED
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_SYSTICK_Callback+0x30>)
 8003356:	7813      	ldrb	r3, [r2, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	7013      	strb	r3, [r2, #0]
	ADCmsecCntr++;
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <HAL_SYSTICK_Callback+0x34>)
 8003360:	780b      	ldrb	r3, [r1, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	700b      	strb	r3, [r1, #0]
	     if (LEDmsecCntr>3)
 8003368:	7813      	ldrb	r3, [r2, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d905      	bls.n	800337c <HAL_SYSTICK_Callback+0x28>
	     {
	    	 LEDmsecCntr=0;
 8003370:	2200      	movs	r2, #0
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_SYSTICK_Callback+0x30>)
 8003374:	701a      	strb	r2, [r3, #0]
	    	 LEDmsecFlag = 1; // Flag to indicate 1000ms event
 8003376:	2201      	movs	r2, #1
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_SYSTICK_Callback+0x38>)
 800337a:	701a      	strb	r2, [r3, #0]
	     }
	     if (ADCmsecCntr>2000)
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <HAL_SYSTICK_Callback+0x34>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200000f4 	.word	0x200000f4
 8003388:	200000ec 	.word	0x200000ec
 800338c:	200000f5 	.word	0x200000f5

08003390 <HAL_ADC_ConvCpltCallback>:
	     }

}	

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003390:	b510      	push	{r4, lr}
	if(channel1==1)
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <HAL_ADC_ConvCpltCallback+0x80>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d008      	beq.n	80033ae <HAL_ADC_ConvCpltCallback+0x1e>
	        	channel1 = 0;
		}
	}
	else
	{
		if(v<70)
 800339c:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_ADC_ConvCpltCallback+0x84>)
 800339e:	681c      	ldr	r4, [r3, #0]
 80033a0:	2c45      	cmp	r4, #69	; 0x45
 80033a2:	dd16      	ble.n	80033d2 <HAL_ADC_ConvCpltCallback+0x42>
	        	v++;
		        channel1 = 1;
		}

	}
	if(c==70 && v==70)
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_ADC_ConvCpltCallback+0x88>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b46      	cmp	r3, #70	; 0x46
 80033aa:	d020      	beq.n	80033ee <HAL_ADC_ConvCpltCallback+0x5e>
 80033ac:	bd10      	pop	{r4, pc}
		if(c<70)
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_ADC_ConvCpltCallback+0x88>)
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	2c45      	cmp	r4, #69	; 0x45
 80033b4:	dcf6      	bgt.n	80033a4 <HAL_ADC_ConvCpltCallback+0x14>
	        	ADC_CurrentArray[c]=HAL_ADC_GetValue(&hadc1);
 80033b6:	4819      	ldr	r0, [pc, #100]	; (800341c <HAL_ADC_ConvCpltCallback+0x8c>)
 80033b8:	f7fd fe20 	bl	8000ffc <HAL_ADC_GetValue>
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_ADC_ConvCpltCallback+0x90>)
 80033be:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	        	c++;
 80033c2:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_ADC_ConvCpltCallback+0x88>)
 80033c4:	6813      	ldr	r3, [r2, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	6013      	str	r3, [r2, #0]
	        	channel1 = 0;
 80033ca:	2200      	movs	r2, #0
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_ADC_ConvCpltCallback+0x80>)
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e7e8      	b.n	80033a4 <HAL_ADC_ConvCpltCallback+0x14>
		        ADC_VoltageArray[v]=HAL_ADC_GetValue(&hadc1);
 80033d2:	4812      	ldr	r0, [pc, #72]	; (800341c <HAL_ADC_ConvCpltCallback+0x8c>)
 80033d4:	f7fd fe12 	bl	8000ffc <HAL_ADC_GetValue>
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_ADC_ConvCpltCallback+0x94>)
 80033da:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	        	v++;
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_ADC_ConvCpltCallback+0x84>)
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	6013      	str	r3, [r2, #0]
		        channel1 = 1;
 80033e6:	2201      	movs	r2, #1
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_ADC_ConvCpltCallback+0x80>)
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e7da      	b.n	80033a4 <HAL_ADC_ConvCpltCallback+0x14>
	if(c==70 && v==70)
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_ADC_ConvCpltCallback+0x84>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b46      	cmp	r3, #70	; 0x46
 80033f4:	d1da      	bne.n	80033ac <HAL_ADC_ConvCpltCallback+0x1c>
	{
		c=0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_ADC_ConvCpltCallback+0x88>)
 80033fa:	6013      	str	r3, [r2, #0]
		v=0;
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <HAL_ADC_ConvCpltCallback+0x84>)
 80033fe:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop_IT(&hadc1);
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003402:	f7fd fdd1 	bl	8000fa8 <HAL_ADC_Stop_IT>
		cplt = 1;
 8003406:	2201      	movs	r2, #1
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_ADC_ConvCpltCallback+0x98>)
 800340a:	701a      	strb	r2, [r3, #0]
	}
}
 800340c:	e7ce      	b.n	80033ac <HAL_ADC_ConvCpltCallback+0x1c>
 800340e:	bf00      	nop
 8003410:	20000136 	.word	0x20000136
 8003414:	20000108 	.word	0x20000108
 8003418:	200000f8 	.word	0x200000f8
 800341c:	2000045c 	.word	0x2000045c
 8003420:	200007b8 	.word	0x200007b8
 8003424:	20000520 	.word	0x20000520
 8003428:	200000fd 	.word	0x200000fd
 800342c:	00000000 	.word	0x00000000

08003430 <vconvert>:

float vconvert(int16_t* v_convarray, float* v_address)
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4606      	mov	r6, r0
 8003434:	460d      	mov	r5, r1
	int vcount = 0;
 8003436:	2400      	movs	r4, #0
	float vnew = 0;
	float vrms = 0;
	float vsum = 0;
	float vsquare = 0;

	while (vcount<71)
 8003438:	e026      	b.n	8003488 <vconvert+0x58>
	{
	vnew = *v_convarray; //turns into millivolts
 800343a:	f936 0b02 	ldrsh.w	r0, [r6], #2
	vnew = vnew - 1860.265;
 800343e:	ee07 0a90 	vmov	s15, r0
 8003442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003446:	ee17 0a90 	vmov	r0, s15
 800344a:	f7fd f821 	bl	8000490 <__aeabi_f2d>
 800344e:	a323      	add	r3, pc, #140	; (adr r3, 80034dc <vconvert+0xac>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f7fc febc 	bl	80001d0 <__aeabi_dsub>
 8003458:	f7fd fa80 	bl	800095c <__aeabi_d2f>
	vnew = vnew * Vdd;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <vconvert+0x90>)
 800345e:	edd3 7a00 	vldr	s15, [r3]
 8003462:	ee07 0a10 	vmov	s14, r0
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
	vnew = vnew * 1000; //turns into millivolts
 800346a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80034c4 <vconvert+0x94>
 800346e:	ee67 7a87 	vmul.f32	s15, s15, s14
	vnew = vnew * 220;
 8003472:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80034c8 <vconvert+0x98>
 8003476:	ee67 7a87 	vmul.f32	s15, s15, s14
	vnew = vnew / 4095;
 800347a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80034cc <vconvert+0x9c>
 800347e:	ee87 7aa6 	vdiv.f32	s14, s15, s13

	*v_address = vnew;
 8003482:	eca5 7a01 	vstmia	r5!, {s14}
	v_address++;
	v_convarray++;
	vcount++;
 8003486:	3401      	adds	r4, #1
	while (vcount<71)
 8003488:	2c46      	cmp	r4, #70	; 0x46
 800348a:	ddd6      	ble.n	800343a <vconvert+0xa>
 800348c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80034d0 <vconvert+0xa0>
 8003490:	2300      	movs	r3, #0
 8003492:	e009      	b.n	80034a8 <vconvert+0x78>
	}

	while (vsumcount<71)
	{
		vsquare =  VALUE_VoltageArray[vsumcount] * VALUE_VoltageArray[vsumcount];
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <vconvert+0xa4>)
 8003496:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800349a:	edd2 7a00 	vldr	s15, [r2]
 800349e:	ee67 7aa7 	vmul.f32	s15, s15, s15
		vsum = vsum+vsquare;
 80034a2:	ee37 7a27 	vadd.f32	s14, s14, s15
		vsumcount++;
 80034a6:	3301      	adds	r3, #1
	while (vsumcount<71)
 80034a8:	2b46      	cmp	r3, #70	; 0x46
 80034aa:	ddf3      	ble.n	8003494 <vconvert+0x64>
	}

	vrms = sqrtf(vsum/70);
 80034ac:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80034d8 <vconvert+0xa8>
 80034b0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80034b4:	f000 fba2 	bl	8003bfc <sqrtf>
	return vrms;
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	bf00      	nop
 80034bc:	f3af 8000 	nop.w
 80034c0:	2000005c 	.word	0x2000005c
 80034c4:	447a0000 	.word	0x447a0000
 80034c8:	435c0000 	.word	0x435c0000
 80034cc:	457ff000 	.word	0x457ff000
 80034d0:	00000000 	.word	0x00000000
 80034d4:	200002cc 	.word	0x200002cc
 80034d8:	428c0000 	.word	0x428c0000
 80034dc:	5c28f5c3 	.word	0x5c28f5c3
 80034e0:	409d110f 	.word	0x409d110f
 80034e4:	00000000 	.word	0x00000000

080034e8 <iconvert>:

float iconvert(int16_t* i_convarray, float*i_address)
{
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4606      	mov	r6, r0
 80034ec:	460d      	mov	r5, r1
	int icount = 0;
 80034ee:	2400      	movs	r4, #0
	int isumcount = 0;
	float irms = 0;
	float isum = 0;
	float isquare = 0;

	while (icount<61)
 80034f0:	e026      	b.n	8003540 <iconvert+0x58>
	{
	inew = *i_convarray; //turns into millivolts
 80034f2:	f936 0b02 	ldrsh.w	r0, [r6], #2
	inew = inew - 1860.265;
 80034f6:	ee07 0a90 	vmov	s15, r0
 80034fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fc ffc5 	bl	8000490 <__aeabi_f2d>
 8003506:	a322      	add	r3, pc, #136	; (adr r3, 8003590 <iconvert+0xa8>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f7fc fe60 	bl	80001d0 <__aeabi_dsub>
 8003510:	f7fd fa24 	bl	800095c <__aeabi_d2f>
	inew = inew * Vdd;
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <iconvert+0x90>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	ee07 0a10 	vmov	s14, r0
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
	inew = inew * 1000; //turns into millivolts
 8003522:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800357c <iconvert+0x94>
 8003526:	ee67 7a87 	vmul.f32	s15, s15, s14
	inew = inew * 13;
 800352a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800352e:	ee67 7a87 	vmul.f32	s15, s15, s14
	inew = inew / 4095;
 8003532:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003580 <iconvert+0x98>
 8003536:	ee87 7aa6 	vdiv.f32	s14, s15, s13

	*i_address = inew;
 800353a:	eca5 7a01 	vstmia	r5!, {s14}
	i_address++;
	i_convarray++;
	icount++;
 800353e:	3401      	adds	r4, #1
	while (icount<61)
 8003540:	2c3c      	cmp	r4, #60	; 0x3c
 8003542:	ddd6      	ble.n	80034f2 <iconvert+0xa>
 8003544:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003584 <iconvert+0x9c>
 8003548:	2300      	movs	r3, #0
 800354a:	e009      	b.n	8003560 <iconvert+0x78>
	}

	while (isumcount<71)
	{
		isquare =  VALUE_CurrentArray[isumcount] * VALUE_CurrentArray[isumcount];
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <iconvert+0xa0>)
 800354e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003552:	edd2 7a00 	vldr	s15, [r2]
 8003556:	ee67 7aa7 	vmul.f32	s15, s15, s15
		isum = isum+isquare;
 800355a:	ee37 7a27 	vadd.f32	s14, s14, s15
		isumcount++;
 800355e:	3301      	adds	r3, #1
	while (isumcount<71)
 8003560:	2b46      	cmp	r3, #70	; 0x46
 8003562:	ddf3      	ble.n	800354c <iconvert+0x64>
	}

	irms = sqrtf(isum/70);
 8003564:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800358c <iconvert+0xa4>
 8003568:	ee87 0a00 	vdiv.f32	s0, s14, s0
 800356c:	f000 fb46 	bl	8003bfc <sqrtf>
	return irms;
}
 8003570:	bd70      	pop	{r4, r5, r6, pc}
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	2000005c 	.word	0x2000005c
 800357c:	447a0000 	.word	0x447a0000
 8003580:	457ff000 	.word	0x457ff000
 8003584:	00000000 	.word	0x00000000
 8003588:	200005f8 	.word	0x200005f8
 800358c:	428c0000 	.word	0x428c0000
 8003590:	5c28f5c3 	.word	0x5c28f5c3
 8003594:	409d110f 	.word	0x409d110f

08003598 <Int2String>:

uint8_t Int2String(char* output_string, int32_t val, uint8_t maxlen)
{
 8003598:	b470      	push	{r4, r5, r6}
	if (maxlen == 0)
 800359a:	4614      	mov	r4, r2
 800359c:	b3ba      	cbz	r2, 800360e <Int2String+0x76>
		return 0;

	int numwritten = 0;

	if (val < 0)
 800359e:	2900      	cmp	r1, #0
 80035a0:	db0d      	blt.n	80035be <Int2String+0x26>
	int numwritten = 0;
 80035a2:	2200      	movs	r2, #0
		val = -val;
		numwritten = 1;
	}

	uint8_t digits = 0;
	if (val < 10)
 80035a4:	2909      	cmp	r1, #9
 80035a6:	dd12      	ble.n	80035ce <Int2String+0x36>
		digits = 1;
	else if (val < 100)
 80035a8:	2963      	cmp	r1, #99	; 0x63
 80035aa:	dd15      	ble.n	80035d8 <Int2String+0x40>
		digits = 2;
	else if (val < 1000)
 80035ac:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80035b0:	db14      	blt.n	80035dc <Int2String+0x44>
		digits = 3;
	else if (val < 10000)
 80035b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80035b6:	4299      	cmp	r1, r3
 80035b8:	dc12      	bgt.n	80035e0 <Int2String+0x48>
		digits = 4;
 80035ba:	2304      	movs	r3, #4
 80035bc:	e008      	b.n	80035d0 <Int2String+0x38>
		output_string[0] = '-';
 80035be:	232d      	movs	r3, #45	; 0x2d
 80035c0:	f800 3b01 	strb.w	r3, [r0], #1
		maxlen--;
 80035c4:	1e54      	subs	r4, r2, #1
 80035c6:	b2e4      	uxtb	r4, r4
		val = -val;
 80035c8:	4249      	negs	r1, r1
		numwritten = 1;
 80035ca:	2201      	movs	r2, #1
 80035cc:	e7ea      	b.n	80035a4 <Int2String+0xc>
		digits = 1;
 80035ce:	2301      	movs	r3, #1
	else
		digits = 5;

	if (digits > maxlen)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d218      	bcs.n	8003606 <Int2String+0x6e>
		return 0; // error - not enough space in output string!
 80035d4:	2000      	movs	r0, #0
 80035d6:	e01b      	b.n	8003610 <Int2String+0x78>
		digits = 2;
 80035d8:	2302      	movs	r3, #2
 80035da:	e7f9      	b.n	80035d0 <Int2String+0x38>
		digits = 3;
 80035dc:	2303      	movs	r3, #3
 80035de:	e7f7      	b.n	80035d0 <Int2String+0x38>
		digits = 5;
 80035e0:	2305      	movs	r3, #5
 80035e2:	e7f5      	b.n	80035d0 <Int2String+0x38>

	int writepos = digits;
	while (writepos > 0)
	{
		output_string[writepos-1] = (char) ((val % 10) + 48);
 80035e4:	1e5c      	subs	r4, r3, #1
 80035e6:	4d0b      	ldr	r5, [pc, #44]	; (8003614 <Int2String+0x7c>)
 80035e8:	fb85 3501 	smull	r3, r5, r5, r1
 80035ec:	17cb      	asrs	r3, r1, #31
 80035ee:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80035f2:	461e      	mov	r6, r3
 80035f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035f8:	005d      	lsls	r5, r3, #1
 80035fa:	1b4b      	subs	r3, r1, r5
 80035fc:	3330      	adds	r3, #48	; 0x30
 80035fe:	5503      	strb	r3, [r0, r4]
		val /= 10;
 8003600:	4631      	mov	r1, r6
		writepos--;
 8003602:	4623      	mov	r3, r4
		numwritten++;
 8003604:	3201      	adds	r2, #1
	while (writepos > 0)
 8003606:	2b00      	cmp	r3, #0
 8003608:	dcec      	bgt.n	80035e4 <Int2String+0x4c>
	}

	return numwritten;
 800360a:	b2d0      	uxtb	r0, r2
 800360c:	e000      	b.n	8003610 <Int2String+0x78>
		return 0;
 800360e:	4610      	mov	r0, r2
}
 8003610:	bc70      	pop	{r4, r5, r6}
 8003612:	4770      	bx	lr
 8003614:	66666667 	.word	0x66666667

08003618 <main>:
{
 8003618:	b508      	push	{r3, lr}
  HAL_Init();
 800361a:	f7fd fa05 	bl	8000a28 <HAL_Init>
  SystemClock_Config();
 800361e:	f7ff fc33 	bl	8002e88 <SystemClock_Config>
  MX_GPIO_Init();
 8003622:	f7ff fb4b 	bl	8002cbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003626:	f7ff fbdf 	bl	8002de8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800362a:	f7ff fbf5 	bl	8002e18 <MX_ADC1_Init>
  HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 800362e:	2201      	movs	r2, #1
 8003630:	49b0      	ldr	r1, [pc, #704]	; (80038f4 <main+0x2dc>)
 8003632:	48b1      	ldr	r0, [pc, #708]	; (80038f8 <main+0x2e0>)
 8003634:	f7fe ff64 	bl	8002500 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 8003638:	48b0      	ldr	r0, [pc, #704]	; (80038fc <main+0x2e4>)
 800363a:	f7fd fc17 	bl	8000e6c <HAL_ADC_Start_IT>
 800363e:	e111      	b.n	8003864 <main+0x24c>
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferA,sizeof(TransmitBufferA)-1,5);
 8003640:	2305      	movs	r3, #5
 8003642:	220d      	movs	r2, #13
 8003644:	49ae      	ldr	r1, [pc, #696]	; (8003900 <main+0x2e8>)
 8003646:	48ac      	ldr	r0, [pc, #688]	; (80038f8 <main+0x2e0>)
 8003648:	f7ff f92f 	bl	80028aa <HAL_UART_Transmit>
	    				    	break;
 800364c:	e107      	b.n	800385e <main+0x246>
	    				       	TempBuffer[0] = HoldBuffer[3];
 800364e:	48ad      	ldr	r0, [pc, #692]	; (8003904 <main+0x2ec>)
 8003650:	78c2      	ldrb	r2, [r0, #3]
 8003652:	4bad      	ldr	r3, [pc, #692]	; (8003908 <main+0x2f0>)
 8003654:	701a      	strb	r2, [r3, #0]
	    				    	TempBuffer[1] = HoldBuffer[4];
 8003656:	7902      	ldrb	r2, [r0, #4]
 8003658:	705a      	strb	r2, [r3, #1]
	    				    	TempBuffer[2] = HoldBuffer[5];
 800365a:	7942      	ldrb	r2, [r0, #5]
 800365c:	709a      	strb	r2, [r3, #2]
	    				    	TempBuffer[3] = HoldBuffer[6];
 800365e:	7982      	ldrb	r2, [r0, #6]
 8003660:	70da      	strb	r2, [r3, #3]
	    				    	TempBuffer[4] = HoldBuffer[7];
 8003662:	79c2      	ldrb	r2, [r0, #7]
 8003664:	711a      	strb	r2, [r3, #4]
	    				    	convertfromstring(HoldBuffer+3, &TempInteger);
 8003666:	49a9      	ldr	r1, [pc, #676]	; (800390c <main+0x2f4>)
 8003668:	3003      	adds	r0, #3
 800366a:	f7ff fe51 	bl	8003310 <convertfromstring>
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferF,sizeof(TransmitBufferF)-1,5);
 800366e:	2305      	movs	r3, #5
 8003670:	2204      	movs	r2, #4
 8003672:	49a7      	ldr	r1, [pc, #668]	; (8003910 <main+0x2f8>)
 8003674:	48a0      	ldr	r0, [pc, #640]	; (80038f8 <main+0x2e0>)
 8003676:	f7ff f918 	bl	80028aa <HAL_UART_Transmit>
	    				    	break;
 800367a:	e0f0      	b.n	800385e <main+0x246>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 800367c:	4ba2      	ldr	r3, [pc, #648]	; (8003908 <main+0x2f0>)
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b0d      	cmp	r3, #13
 8003682:	d029      	beq.n	80036d8 <main+0xc0>
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 8003684:	4ba0      	ldr	r3, [pc, #640]	; (8003908 <main+0x2f0>)
 8003686:	789b      	ldrb	r3, [r3, #2]
 8003688:	2b0d      	cmp	r3, #13
 800368a:	d037      	beq.n	80036fc <main+0xe4>
	    				    	if(TempBuffer[3] == '\r' && TempBuffer[4] == '\n')
 800368c:	4b9e      	ldr	r3, [pc, #632]	; (8003908 <main+0x2f0>)
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	2b0d      	cmp	r3, #13
 8003692:	d047      	beq.n	8003724 <main+0x10c>
	    				    	I_RMS = iconvert(ADC_CurrentArray,VALUE_CurrentArray);
 8003694:	499f      	ldr	r1, [pc, #636]	; (8003914 <main+0x2fc>)
 8003696:	48a0      	ldr	r0, [pc, #640]	; (8003918 <main+0x300>)
 8003698:	f7ff ff26 	bl	80034e8 <iconvert>
 800369c:	4c9f      	ldr	r4, [pc, #636]	; (800391c <main+0x304>)
 800369e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80036a2:	ee17 3a90 	vmov	r3, s15
 80036a6:	8023      	strh	r3, [r4, #0]
	    				    	V_RMS = vconvert(ADC_VoltageArray,VALUE_VoltageArray);
 80036a8:	499d      	ldr	r1, [pc, #628]	; (8003920 <main+0x308>)
 80036aa:	489e      	ldr	r0, [pc, #632]	; (8003924 <main+0x30c>)
 80036ac:	f7ff fec0 	bl	8003430 <vconvert>
 80036b0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80036b4:	4b9c      	ldr	r3, [pc, #624]	; (8003928 <main+0x310>)
 80036b6:	ed83 0a00 	vstr	s0, [r3]
	    				    	kprocess = 1;
 80036ba:	2201      	movs	r2, #1
 80036bc:	4b9b      	ldr	r3, [pc, #620]	; (800392c <main+0x314>)
 80036be:	601a      	str	r2, [r3, #0]
	    				      	num = Int2String(ibuff,I_RMS,10);
 80036c0:	220a      	movs	r2, #10
 80036c2:	8821      	ldrh	r1, [r4, #0]
 80036c4:	489a      	ldr	r0, [pc, #616]	; (8003930 <main+0x318>)
 80036c6:	f7ff ff67 	bl	8003598 <Int2String>
 80036ca:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <main+0x31c>)
 80036cc:	7018      	strb	r0, [r3, #0]
	    				      	inumvalue = num;
 80036ce:	4605      	mov	r5, r0
 80036d0:	4b99      	ldr	r3, [pc, #612]	; (8003938 <main+0x320>)
 80036d2:	6018      	str	r0, [r3, #0]
	    				      	position = 3+inumvalue;
 80036d4:	1cc2      	adds	r2, r0, #3
	    				      	while (num >0)
 80036d6:	e044      	b.n	8003762 <main+0x14a>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 80036d8:	4b8b      	ldr	r3, [pc, #556]	; (8003908 <main+0x2f0>)
 80036da:	789b      	ldrb	r3, [r3, #2]
 80036dc:	2b0a      	cmp	r3, #10
 80036de:	d1d1      	bne.n	8003684 <main+0x6c>
	    				    		TransmitBufferG[3] = TempBuffer[0];
 80036e0:	4b89      	ldr	r3, [pc, #548]	; (8003908 <main+0x2f0>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4995      	ldr	r1, [pc, #596]	; (800393c <main+0x324>)
 80036e6:	70cb      	strb	r3, [r1, #3]
	    				    		TransmitBufferG[4] = '\r';
 80036e8:	230d      	movs	r3, #13
 80036ea:	710b      	strb	r3, [r1, #4]
	    				    		TransmitBufferG[5] = '\n';
 80036ec:	230a      	movs	r3, #10
 80036ee:	714b      	strb	r3, [r1, #5]
	    				    		HAL_UART_Transmit(&huart1, TransmitBufferG,6,5);
 80036f0:	2305      	movs	r3, #5
 80036f2:	2206      	movs	r2, #6
 80036f4:	4880      	ldr	r0, [pc, #512]	; (80038f8 <main+0x2e0>)
 80036f6:	f7ff f8d8 	bl	80028aa <HAL_UART_Transmit>
 80036fa:	e7c3      	b.n	8003684 <main+0x6c>
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 80036fc:	4b82      	ldr	r3, [pc, #520]	; (8003908 <main+0x2f0>)
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	2b0a      	cmp	r3, #10
 8003702:	d1c3      	bne.n	800368c <main+0x74>
	    							TransmitBufferGT[3] = TempBuffer[0];
 8003704:	4b80      	ldr	r3, [pc, #512]	; (8003908 <main+0x2f0>)
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	498d      	ldr	r1, [pc, #564]	; (8003940 <main+0x328>)
 800370a:	70ca      	strb	r2, [r1, #3]
	    							TransmitBufferGT[4] = TempBuffer[1];
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	710b      	strb	r3, [r1, #4]
	    							TransmitBufferGT[5] = '\r';
 8003710:	230d      	movs	r3, #13
 8003712:	714b      	strb	r3, [r1, #5]
	    							TransmitBufferGT[6] = '\n';
 8003714:	230a      	movs	r3, #10
 8003716:	718b      	strb	r3, [r1, #6]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8003718:	2305      	movs	r3, #5
 800371a:	2207      	movs	r2, #7
 800371c:	4876      	ldr	r0, [pc, #472]	; (80038f8 <main+0x2e0>)
 800371e:	f7ff f8c4 	bl	80028aa <HAL_UART_Transmit>
 8003722:	e7b3      	b.n	800368c <main+0x74>
	    				    	if(TempBuffer[3] == '\r' && TempBuffer[4] == '\n')
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <main+0x2f0>)
 8003726:	791b      	ldrb	r3, [r3, #4]
 8003728:	2b0a      	cmp	r3, #10
 800372a:	d1b3      	bne.n	8003694 <main+0x7c>
	    							TransmitBufferGH[3] = TempBuffer[0];
 800372c:	4b76      	ldr	r3, [pc, #472]	; (8003908 <main+0x2f0>)
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	4984      	ldr	r1, [pc, #528]	; (8003944 <main+0x32c>)
 8003732:	70ca      	strb	r2, [r1, #3]
	    							TransmitBufferGH[4] = TempBuffer[1];
 8003734:	785a      	ldrb	r2, [r3, #1]
 8003736:	710a      	strb	r2, [r1, #4]
	    							TransmitBufferGH[5] = TempBuffer[2];
 8003738:	789b      	ldrb	r3, [r3, #2]
 800373a:	714b      	strb	r3, [r1, #5]
	    							TransmitBufferGH[6] = '\r';
 800373c:	230d      	movs	r3, #13
 800373e:	718b      	strb	r3, [r1, #6]
	    							TransmitBufferGH[7] = '\n';
 8003740:	230a      	movs	r3, #10
 8003742:	71cb      	strb	r3, [r1, #7]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGH,8,5);
 8003744:	2305      	movs	r3, #5
 8003746:	2208      	movs	r2, #8
 8003748:	486b      	ldr	r0, [pc, #428]	; (80038f8 <main+0x2e0>)
 800374a:	f7ff f8ae 	bl	80028aa <HAL_UART_Transmit>
 800374e:	e7a1      	b.n	8003694 <main+0x7c>
	    				      		TransmitBufferK[position-num] = ibuff[inumvalue-num];
 8003750:	1ad1      	subs	r1, r2, r3
 8003752:	1ae8      	subs	r0, r5, r3
 8003754:	4c76      	ldr	r4, [pc, #472]	; (8003930 <main+0x318>)
 8003756:	5c24      	ldrb	r4, [r4, r0]
 8003758:	487b      	ldr	r0, [pc, #492]	; (8003948 <main+0x330>)
 800375a:	5444      	strb	r4, [r0, r1]
									num--;
 800375c:	3b01      	subs	r3, #1
 800375e:	4975      	ldr	r1, [pc, #468]	; (8003934 <main+0x31c>)
 8003760:	700b      	strb	r3, [r1, #0]
	    				      	while (num >0)
 8003762:	4b74      	ldr	r3, [pc, #464]	; (8003934 <main+0x31c>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f2      	bne.n	8003750 <main+0x138>
	    				      	TransmitBufferK[position] = 0x2C;
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	4b76      	ldr	r3, [pc, #472]	; (8003948 <main+0x330>)
 800376e:	5499      	strb	r1, [r3, r2]
	    				      	position = position + 1;
 8003770:	3201      	adds	r2, #1
 8003772:	4c76      	ldr	r4, [pc, #472]	; (800394c <main+0x334>)
 8003774:	6022      	str	r2, [r4, #0]
	    				      	num = Int2String(vbuff,V_RMS,10);
 8003776:	220a      	movs	r2, #10
 8003778:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <main+0x310>)
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	4874      	ldr	r0, [pc, #464]	; (8003950 <main+0x338>)
 800377e:	f7ff ff0b 	bl	8003598 <Int2String>
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <main+0x31c>)
 8003784:	7018      	strb	r0, [r3, #0]
	    				      	vnumvalue = num;
 8003786:	4605      	mov	r5, r0
 8003788:	4b72      	ldr	r3, [pc, #456]	; (8003954 <main+0x33c>)
 800378a:	6018      	str	r0, [r3, #0]
	    				      	position = position + vnumvalue;
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	4402      	add	r2, r0
	    				      	while (num >0)
 8003790:	e008      	b.n	80037a4 <main+0x18c>
	    				      		TransmitBufferK[position-num] = vbuff[vnumvalue-num];
 8003792:	1ad1      	subs	r1, r2, r3
 8003794:	1ae8      	subs	r0, r5, r3
 8003796:	4c6e      	ldr	r4, [pc, #440]	; (8003950 <main+0x338>)
 8003798:	5c24      	ldrb	r4, [r4, r0]
 800379a:	486b      	ldr	r0, [pc, #428]	; (8003948 <main+0x330>)
 800379c:	5444      	strb	r4, [r0, r1]
									num--;
 800379e:	3b01      	subs	r3, #1
 80037a0:	4964      	ldr	r1, [pc, #400]	; (8003934 <main+0x31c>)
 80037a2:	700b      	strb	r3, [r1, #0]
	    				      	while (num >0)
 80037a4:	4b63      	ldr	r3, [pc, #396]	; (8003934 <main+0x31c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f2      	bne.n	8003792 <main+0x17a>
	    				      	TransmitBufferK[position] = 0x2C;
 80037ac:	4966      	ldr	r1, [pc, #408]	; (8003948 <main+0x330>)
 80037ae:	202c      	movs	r0, #44	; 0x2c
 80037b0:	5488      	strb	r0, [r1, r2]
	    				      	position++;
 80037b2:	1c53      	adds	r3, r2, #1
	    				      	TransmitBufferK[position] = '2';
 80037b4:	2232      	movs	r2, #50	; 0x32
 80037b6:	54ca      	strb	r2, [r1, r3]
	    				      	position++;
 80037b8:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = '5';
 80037ba:	2235      	movs	r2, #53	; 0x35
 80037bc:	54ca      	strb	r2, [r1, r3]
	    				      	position++;
 80037be:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = 0x2C;
 80037c0:	54c8      	strb	r0, [r1, r3]
	    				      	position++;
 80037c2:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = '0';
 80037c4:	2230      	movs	r2, #48	; 0x30
 80037c6:	54ca      	strb	r2, [r1, r3]
	    				      	position++;
 80037c8:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = 0x2C;
 80037ca:	54c8      	strb	r0, [r1, r3]
	    				      	position++;
 80037cc:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = '0';
 80037ce:	54ca      	strb	r2, [r1, r3]
	    				      	position++;
 80037d0:	3301      	adds	r3, #1
	    				      	TransmitBufferK[position] = 0x2C;
 80037d2:	54c8      	strb	r0, [r1, r3]
	    				      	position++;
 80037d4:	3301      	adds	r3, #1
    				      		TransmitBufferK[position] = 'O';
 80037d6:	224f      	movs	r2, #79	; 0x4f
 80037d8:	54ca      	strb	r2, [r1, r3]
    				      		position++;
 80037da:	3301      	adds	r3, #1
 80037dc:	4a5b      	ldr	r2, [pc, #364]	; (800394c <main+0x334>)
 80037de:	6013      	str	r3, [r2, #0]
	    				      	if(Element==1)
 80037e0:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <main+0x340>)
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	2a01      	cmp	r2, #1
 80037e6:	d07f      	beq.n	80038e8 <main+0x2d0>
	    				      	if(Element==0)
 80037e8:	b942      	cbnz	r2, 80037fc <main+0x1e4>
	    				      		TransmitBufferK[position] = 'F';
 80037ea:	4a58      	ldr	r2, [pc, #352]	; (800394c <main+0x334>)
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	4956      	ldr	r1, [pc, #344]	; (8003948 <main+0x330>)
 80037f0:	2046      	movs	r0, #70	; 0x46
 80037f2:	54c8      	strb	r0, [r1, r3]
	    				      		position++;
 80037f4:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'F';
 80037f6:	54c8      	strb	r0, [r1, r3]
	    				      		position++;
 80037f8:	3301      	adds	r3, #1
 80037fa:	6013      	str	r3, [r2, #0]
	    				      	TransmitBufferK[position] = 0x2C;
 80037fc:	4a53      	ldr	r2, [pc, #332]	; (800394c <main+0x334>)
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	202c      	movs	r0, #44	; 0x2c
 8003802:	4951      	ldr	r1, [pc, #324]	; (8003948 <main+0x330>)
 8003804:	54c8      	strb	r0, [r1, r3]
	    				      	position++;
 8003806:	3301      	adds	r3, #1
 8003808:	6013      	str	r3, [r2, #0]
	    				      	if(ValveOpen==1)
 800380a:	4a54      	ldr	r2, [pc, #336]	; (800395c <main+0x344>)
 800380c:	6811      	ldr	r1, [r2, #0]
 800380e:	2901      	cmp	r1, #1
 8003810:	f000 80ac 	beq.w	800396c <main+0x354>
    				      		if(ValveOpen==0)
 8003814:	b9a9      	cbnz	r1, 8003842 <main+0x22a>
	    				      		TransmitBufferK[position] = 'C';
 8003816:	494d      	ldr	r1, [pc, #308]	; (800394c <main+0x334>)
 8003818:	680b      	ldr	r3, [r1, #0]
 800381a:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <main+0x330>)
 800381c:	2043      	movs	r0, #67	; 0x43
 800381e:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 8003820:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'L';
 8003822:	204c      	movs	r0, #76	; 0x4c
 8003824:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 8003826:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'O';
 8003828:	204f      	movs	r0, #79	; 0x4f
 800382a:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 800382c:	3301      	adds	r3, #1
    				      			TransmitBufferK[position] = 'S';
 800382e:	2053      	movs	r0, #83	; 0x53
 8003830:	54d0      	strb	r0, [r2, r3]
    				      			position++;
 8003832:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'E';
 8003834:	2045      	movs	r0, #69	; 0x45
 8003836:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 8003838:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'D';
 800383a:	2044      	movs	r0, #68	; 0x44
 800383c:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 800383e:	3301      	adds	r3, #1
 8003840:	600b      	str	r3, [r1, #0]
				      		TransmitBufferK[position] = '\r';
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <main+0x334>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4940      	ldr	r1, [pc, #256]	; (8003948 <main+0x330>)
 8003848:	200d      	movs	r0, #13
 800384a:	5488      	strb	r0, [r1, r2]
				      		position++;
 800384c:	3201      	adds	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
				      		TransmitBufferK[position] = '\n';
 8003850:	230a      	movs	r3, #10
 8003852:	548b      	strb	r3, [r1, r2]
				      		HAL_UART_Transmit(&huart1, TransmitBufferK,position,5);
 8003854:	2305      	movs	r3, #5
 8003856:	b292      	uxth	r2, r2
 8003858:	4827      	ldr	r0, [pc, #156]	; (80038f8 <main+0x2e0>)
 800385a:	f7ff f826 	bl	80028aa <HAL_UART_Transmit>
	  		count = 0;
 800385e:	2200      	movs	r2, #0
 8003860:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <main+0x348>)
 8003862:	701a      	strb	r2, [r3, #0]
	  Number_Maker(TempInteger);
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <main+0x2f4>)
 8003866:	f9b3 0000 	ldrsh.w	r0, [r3]
 800386a:	f7ff fd0b 	bl	8003284 <Number_Maker>
	  if (ReceiveFlag)
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <main+0x34c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f6      	beq.n	8003864 <main+0x24c>
	  	ReceiveFlag = 0;
 8003876:	2200      	movs	r2, #0
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <main+0x34c>)
 800387a:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 800387c:	4c1d      	ldr	r4, [pc, #116]	; (80038f4 <main+0x2dc>)
 800387e:	2201      	movs	r2, #1
 8003880:	4621      	mov	r1, r4
 8003882:	481d      	ldr	r0, [pc, #116]	; (80038f8 <main+0x2e0>)
 8003884:	f7fe fe3c 	bl	8002500 <HAL_UART_Receive_IT>
	  	HoldBuffer[count++]= ReceiveBuffer[0];
 8003888:	4a35      	ldr	r2, [pc, #212]	; (8003960 <main+0x348>)
 800388a:	7811      	ldrb	r1, [r2, #0]
 800388c:	1c4b      	adds	r3, r1, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	7013      	strb	r3, [r2, #0]
 8003892:	7822      	ldrb	r2, [r4, #0]
 8003894:	481b      	ldr	r0, [pc, #108]	; (8003904 <main+0x2ec>)
 8003896:	5442      	strb	r2, [r0, r1]
	  	if (ReceiveBuffer[0] == '\n')
 8003898:	2a0a      	cmp	r2, #10
 800389a:	d1e3      	bne.n	8003864 <main+0x24c>
	  		HoldBuffer[count] = '\0';
 800389c:	4604      	mov	r4, r0
 800389e:	2200      	movs	r2, #0
 80038a0:	54c2      	strb	r2, [r0, r3]
	  		convertfromstring(HoldBuffer, &SignedInteger);
 80038a2:	4931      	ldr	r1, [pc, #196]	; (8003968 <main+0x350>)
 80038a4:	f7ff fd34 	bl	8003310 <convertfromstring>
	  		if (HoldBuffer[0] == '$')
 80038a8:	7823      	ldrb	r3, [r4, #0]
 80038aa:	2b24      	cmp	r3, #36	; 0x24
 80038ac:	d1d7      	bne.n	800385e <main+0x246>
	  			switch(HoldBuffer[1])
 80038ae:	7863      	ldrb	r3, [r4, #1]
 80038b0:	3b41      	subs	r3, #65	; 0x41
 80038b2:	2b0a      	cmp	r3, #10
 80038b4:	d8d3      	bhi.n	800385e <main+0x246>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <main+0x2a4>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	08003641 	.word	0x08003641
 80038c0:	0800385f 	.word	0x0800385f
 80038c4:	0800385f 	.word	0x0800385f
 80038c8:	0800385f 	.word	0x0800385f
 80038cc:	0800385f 	.word	0x0800385f
 80038d0:	0800364f 	.word	0x0800364f
 80038d4:	0800367d 	.word	0x0800367d
 80038d8:	0800385f 	.word	0x0800385f
 80038dc:	0800385f 	.word	0x0800385f
 80038e0:	0800385f 	.word	0x0800385f
 80038e4:	08003695 	.word	0x08003695
	    				      		TransmitBufferK[position] = 'N';
 80038e8:	204e      	movs	r0, #78	; 0x4e
 80038ea:	54c8      	strb	r0, [r1, r3]
	    				      		position++;
 80038ec:	3301      	adds	r3, #1
 80038ee:	4917      	ldr	r1, [pc, #92]	; (800394c <main+0x334>)
 80038f0:	600b      	str	r3, [r1, #0]
 80038f2:	e779      	b.n	80037e8 <main+0x1d0>
 80038f4:	200007b4 	.word	0x200007b4
 80038f8:	200004b0 	.word	0x200004b0
 80038fc:	2000045c 	.word	0x2000045c
 8003900:	20000000 	.word	0x20000000
 8003904:	200007a8 	.word	0x200007a8
 8003908:	200005ec 	.word	0x200005ec
 800390c:	200000f6 	.word	0x200000f6
 8003910:	20000010 	.word	0x20000010
 8003914:	200005f8 	.word	0x200005f8
 8003918:	200007b8 	.word	0x200007b8
 800391c:	200005f6 	.word	0x200005f6
 8003920:	200002cc 	.word	0x200002cc
 8003924:	20000520 	.word	0x20000520
 8003928:	20000884 	.word	0x20000884
 800392c:	20000060 	.word	0x20000060
 8003930:	20000788 	.word	0x20000788
 8003934:	200005e8 	.word	0x200005e8
 8003938:	20000100 	.word	0x20000100
 800393c:	20000018 	.word	0x20000018
 8003940:	2000002c 	.word	0x2000002c
 8003944:	20000020 	.word	0x20000020
 8003948:	20000034 	.word	0x20000034
 800394c:	20000104 	.word	0x20000104
 8003950:	20000118 	.word	0x20000118
 8003954:	2000010c 	.word	0x2000010c
 8003958:	200000f0 	.word	0x200000f0
 800395c:	20000058 	.word	0x20000058
 8003960:	200000fc 	.word	0x200000fc
 8003964:	20000882 	.word	0x20000882
 8003968:	20000880 	.word	0x20000880
	    				      		TransmitBufferK[position] = 'O';
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <main+0x374>)
 800396e:	204f      	movs	r0, #79	; 0x4f
 8003970:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 8003972:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'P';
 8003974:	2050      	movs	r0, #80	; 0x50
 8003976:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 8003978:	3301      	adds	r3, #1
	    				      		TransmitBufferK[position] = 'E';
 800397a:	2045      	movs	r0, #69	; 0x45
 800397c:	54d0      	strb	r0, [r2, r3]
	    				      		position++;
 800397e:	3301      	adds	r3, #1
    				      			TransmitBufferK[position] = 'N';
 8003980:	204e      	movs	r0, #78	; 0x4e
 8003982:	54d0      	strb	r0, [r2, r3]
    				      			position++;
 8003984:	3301      	adds	r3, #1
 8003986:	4a02      	ldr	r2, [pc, #8]	; (8003990 <main+0x378>)
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e743      	b.n	8003814 <main+0x1fc>
 800398c:	20000034 	.word	0x20000034
 8003990:	20000104 	.word	0x20000104

08003994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003994:	b500      	push	{lr}
 8003996:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003998:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <HAL_MspInit+0x78>)
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80039ac:	2007      	movs	r0, #7
 80039ae:	f7fd fef9 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	4611      	mov	r1, r2
 80039b6:	f06f 000b 	mvn.w	r0, #11
 80039ba:	f7fd ff05 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	4611      	mov	r1, r2
 80039c2:	f06f 000a 	mvn.w	r0, #10
 80039c6:	f7fd feff 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	4611      	mov	r1, r2
 80039ce:	f06f 0009 	mvn.w	r0, #9
 80039d2:	f7fd fef9 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	4611      	mov	r1, r2
 80039da:	f06f 0004 	mvn.w	r0, #4
 80039de:	f7fd fef3 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	4611      	mov	r1, r2
 80039e6:	f06f 0003 	mvn.w	r0, #3
 80039ea:	f7fd feed 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	4611      	mov	r1, r2
 80039f2:	f06f 0001 	mvn.w	r0, #1
 80039f6:	f7fd fee7 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	4611      	mov	r1, r2
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	f7fd fee1 	bl	80017c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a06:	b003      	add	sp, #12
 8003a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003a10:	6803      	ldr	r3, [r0, #0]
 8003a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a16:	d000      	beq.n	8003a1a <HAL_ADC_MspInit+0xa>
 8003a18:	4770      	bx	lr
{
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003a1e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003a22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a2c:	615a      	str	r2, [r3, #20]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a38:	230c      	movs	r3, #12
 8003a3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2400      	movs	r4, #0
 8003a42:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a44:	a901      	add	r1, sp, #4
 8003a46:	4806      	ldr	r0, [pc, #24]	; (8003a60 <HAL_ADC_MspInit+0x50>)
 8003a48:	f7fd ff4c 	bl	80018e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4621      	mov	r1, r4
 8003a50:	2012      	movs	r0, #18
 8003a52:	f7fd feb9 	bl	80017c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003a56:	2012      	movs	r0, #18
 8003a58:	f7fd fee8 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a5c:	b006      	add	sp, #24
 8003a5e:	bd10      	pop	{r4, pc}
 8003a60:	48000800 	.word	0x48000800

08003a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003a64:	6802      	ldr	r2, [r0, #0]
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_UART_MspInit+0x58>)
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d000      	beq.n	8003a6e <HAL_UART_MspInit+0xa>
 8003a6c:	4770      	bx	lr
{
 8003a6e:	b500      	push	{lr}
 8003a70:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a72:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7c:	619a      	str	r2, [r3, #24]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a88:	2330      	movs	r3, #48	; 0x30
 8003a8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a90:	2301      	movs	r3, #1
 8003a92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a98:	2307      	movs	r3, #7
 8003a9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9c:	a901      	add	r1, sp, #4
 8003a9e:	4808      	ldr	r0, [pc, #32]	; (8003ac0 <HAL_UART_MspInit+0x5c>)
 8003aa0:	f7fd ff20 	bl	80018e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	2025      	movs	r0, #37	; 0x25
 8003aaa:	f7fd fe8d 	bl	80017c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aae:	2025      	movs	r0, #37	; 0x25
 8003ab0:	f7fd febc 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ab4:	b007      	add	sp, #28
 8003ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aba:	bf00      	nop
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	48000800 	.word	0x48000800

08003ac4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003ac4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac6:	f7fc ffc1 	bl	8000a4c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003aca:	f7fd fee1 	bl	8001890 <HAL_SYSTICK_IRQHandler>
 8003ace:	bd08      	pop	{r3, pc}

08003ad0 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 8003ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ad2:	4802      	ldr	r0, [pc, #8]	; (8003adc <ADC1_2_IRQHandler+0xc>)
 8003ad4:	f7fd fa9a 	bl	800100c <HAL_ADC_IRQHandler>
 8003ad8:	bd08      	pop	{r3, pc}
 8003ada:	bf00      	nop
 8003adc:	2000045c 	.word	0x2000045c

08003ae0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8003ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ae2:	4803      	ldr	r0, [pc, #12]	; (8003af0 <USART1_IRQHandler+0x10>)
 8003ae4:	f7ff f83a 	bl	8002b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  ReceiveFlag = 1;
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <USART1_IRQHandler+0x14>)
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	bd08      	pop	{r3, pc}
 8003af0:	200004b0 	.word	0x200004b0
 8003af4:	20000882 	.word	0x20000882

08003af8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af8:	4915      	ldr	r1, [pc, #84]	; (8003b50 <SystemInit+0x58>)
 8003afa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003afe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <SystemInit+0x5c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003b10:	6858      	ldr	r0, [r3, #4]
 8003b12:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <SystemInit+0x60>)
 8003b14:	4002      	ands	r2, r0
 8003b16:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b22:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b32:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	f022 020f 	bic.w	r2, r2, #15
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003b3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <SystemInit+0x64>)
 8003b40:	4002      	ands	r2, r0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b4c:	608b      	str	r3, [r1, #8]
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	f87fc00c 	.word	0xf87fc00c
 8003b5c:	ff00fccc 	.word	0xff00fccc

08003b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b66:	e003      	b.n	8003b70 <LoopCopyDataInit>

08003b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b6e:	3104      	adds	r1, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b70:	480b      	ldr	r0, [pc, #44]	; (8003ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b78:	d3f6      	bcc.n	8003b68 <CopyDataInit>
	ldr	r2, =_sbss
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b7c:	e002      	b.n	8003b84 <LoopFillZerobss>

08003b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b80:	f842 3b04 	str.w	r3, [r2], #4

08003b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <LoopForever+0x16>)
	cmp	r2, r3
 8003b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b88:	d3f9      	bcc.n	8003b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b8a:	f7ff ffb5 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f000 f811 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b92:	f7ff fd41 	bl	8003618 <main>

08003b96 <LoopForever>:

LoopForever:
    b LoopForever
 8003b96:	e7fe      	b.n	8003b96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b98:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003b9c:	08003d9c 	.word	0x08003d9c
	ldr	r0, =_sdata
 8003ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ba4:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 8003ba8:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 8003bac:	20000a18 	.word	0x20000a18

08003bb0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <BusFault_Handler>
	...

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0d      	ldr	r6, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1ba4      	subs	r4, r4, r6
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	42a5      	cmp	r5, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4e0b      	ldr	r6, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 f8b8 	bl	8003d3c <_init>
 8003bcc:	1ba4      	subs	r4, r4, r6
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	42a5      	cmp	r5, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bdc:	4798      	blx	r3
 8003bde:	3501      	adds	r5, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be6:	4798      	blx	r3
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003d94 	.word	0x08003d94
 8003bf0:	08003d94 	.word	0x08003d94
 8003bf4:	08003d94 	.word	0x08003d94
 8003bf8:	08003d98 	.word	0x08003d98

08003bfc <sqrtf>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	ed2d 8b02 	vpush	{d8}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	eeb0 8a40 	vmov.f32	s16, s0
 8003c08:	f000 f848 	bl	8003c9c <__ieee754_sqrtf>
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <sqrtf+0x98>)
 8003c0e:	f993 4000 	ldrsb.w	r4, [r3]
 8003c12:	1c63      	adds	r3, r4, #1
 8003c14:	d02c      	beq.n	8003c70 <sqrtf+0x74>
 8003c16:	eeb4 8a48 	vcmp.f32	s16, s16
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	d627      	bvs.n	8003c70 <sqrtf+0x74>
 8003c20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d522      	bpl.n	8003c70 <sqrtf+0x74>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <sqrtf+0x9c>)
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	ee18 0a10 	vmov	r0, s16
 8003c36:	2300      	movs	r3, #0
 8003c38:	9308      	str	r3, [sp, #32]
 8003c3a:	f7fc fc29 	bl	8000490 <__aeabi_f2d>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	b9ac      	cbnz	r4, 8003c78 <sqrtf+0x7c>
 8003c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c50:	4668      	mov	r0, sp
 8003c52:	f000 f86a 	bl	8003d2a <matherr>
 8003c56:	b1b8      	cbz	r0, 8003c88 <sqrtf+0x8c>
 8003c58:	9b08      	ldr	r3, [sp, #32]
 8003c5a:	b11b      	cbz	r3, 8003c64 <sqrtf+0x68>
 8003c5c:	f000 f868 	bl	8003d30 <__errno>
 8003c60:	9b08      	ldr	r3, [sp, #32]
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c68:	f7fc fe78 	bl	800095c <__aeabi_d2f>
 8003c6c:	ee00 0a10 	vmov	s0, r0
 8003c70:	b00a      	add	sp, #40	; 0x28
 8003c72:	ecbd 8b02 	vpop	{d8}
 8003c76:	bd10      	pop	{r4, pc}
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fc fd86 	bl	800078c <__aeabi_ddiv>
 8003c80:	2c02      	cmp	r4, #2
 8003c82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003c86:	d1e3      	bne.n	8003c50 <sqrtf+0x54>
 8003c88:	f000 f852 	bl	8003d30 <__errno>
 8003c8c:	2321      	movs	r3, #33	; 0x21
 8003c8e:	6003      	str	r3, [r0, #0]
 8003c90:	e7e2      	b.n	8003c58 <sqrtf+0x5c>
 8003c92:	bf00      	nop
 8003c94:	20000068 	.word	0x20000068
 8003c98:	08003d8c 	.word	0x08003d8c

08003c9c <__ieee754_sqrtf>:
 8003c9c:	ee10 2a10 	vmov	r2, s0
 8003ca0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003ca4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	d302      	bcc.n	8003cb2 <__ieee754_sqrtf+0x16>
 8003cac:	eea0 0a00 	vfma.f32	s0, s0, s0
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
 8003cb2:	b3b1      	cbz	r1, 8003d22 <__ieee754_sqrtf+0x86>
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	da04      	bge.n	8003cc2 <__ieee754_sqrtf+0x26>
 8003cb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003cbc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
 8003cc2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003cc6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003cca:	d204      	bcs.n	8003cd6 <__ieee754_sqrtf+0x3a>
 8003ccc:	2100      	movs	r1, #0
 8003cce:	0210      	lsls	r0, r2, #8
 8003cd0:	d528      	bpl.n	8003d24 <__ieee754_sqrtf+0x88>
 8003cd2:	3901      	subs	r1, #1
 8003cd4:	1a5b      	subs	r3, r3, r1
 8003cd6:	3b7f      	subs	r3, #127	; 0x7f
 8003cd8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003cdc:	07d9      	lsls	r1, r3, #31
 8003cde:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ce2:	bf48      	it	mi
 8003ce4:	0052      	lslmi	r2, r2, #1
 8003ce6:	1059      	asrs	r1, r3, #1
 8003ce8:	2300      	movs	r3, #0
 8003cea:	0052      	lsls	r2, r2, #1
 8003cec:	2419      	movs	r4, #25
 8003cee:	461e      	mov	r6, r3
 8003cf0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003cf4:	1835      	adds	r5, r6, r0
 8003cf6:	4295      	cmp	r5, r2
 8003cf8:	bfde      	ittt	le
 8003cfa:	182e      	addle	r6, r5, r0
 8003cfc:	1b52      	suble	r2, r2, r5
 8003cfe:	181b      	addle	r3, r3, r0
 8003d00:	3c01      	subs	r4, #1
 8003d02:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d06:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003d0a:	d1f3      	bne.n	8003cf4 <__ieee754_sqrtf+0x58>
 8003d0c:	b112      	cbz	r2, 8003d14 <__ieee754_sqrtf+0x78>
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	105b      	asrs	r3, r3, #1
 8003d16:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8003d1a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8003d1e:	ee00 3a10 	vmov	s0, r3
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	0052      	lsls	r2, r2, #1
 8003d26:	3101      	adds	r1, #1
 8003d28:	e7d1      	b.n	8003cce <__ieee754_sqrtf+0x32>

08003d2a <matherr>:
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	4770      	bx	lr
	...

08003d30 <__errno>:
 8003d30:	4b01      	ldr	r3, [pc, #4]	; (8003d38 <__errno+0x8>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000006c 	.word	0x2000006c

08003d3c <_init>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr

08003d48 <_fini>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr
