
C:\Users\18301088\Desktop\Demo2.9\Debug\Demo2.9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          000002b0  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002ec  200002ec  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000137d9  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002446  00000000  00000000  00033845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005cc3  00000000  00000000  00035c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008d0  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000880  00000000  00000000  0003c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d1bf  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000089b9  00000000  00000000  00059c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a27db  00000000  00000000  00062618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00104df3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000162c  00000000  00000000  00104e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003068 	.word	0x08003068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003068 	.word	0x08003068

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_InitTick+0x24>)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_InitTick+0x28>)
 80001d2:	fba3 3000 	umull	r3, r0, r3, r0
 80001d6:	0980      	lsrs	r0, r0, #6
 80001d8:	f000 ff1a 	bl	8001010 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fed6 	bl	8000f94 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000038 	.word	0x20000038
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 feb5 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f002 fdf8 	bl	8002e00 <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000068 	.word	0x20000068

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000068 	.word	0x20000068

08000234 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000234:	4770      	bx	lr

08000236 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000236:	4770      	bx	lr

08000238 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000238:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800023a:	6802      	ldr	r2, [r0, #0]
 800023c:	6893      	ldr	r3, [r2, #8]
 800023e:	f003 0303 	and.w	r3, r3, #3
 8000242:	2b01      	cmp	r3, #1
 8000244:	d011      	beq.n	800026a <ADC_Disable+0x32>
 8000246:	2300      	movs	r3, #0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d037      	beq.n	80002bc <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800024c:	6893      	ldr	r3, [r2, #8]
 800024e:	f003 030d 	and.w	r3, r3, #13
 8000252:	2b01      	cmp	r3, #1
 8000254:	d011      	beq.n	800027a <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000256:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000258:	f043 0310 	orr.w	r3, r3, #16
 800025c:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800025e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000266:	2001      	movs	r0, #1
 8000268:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	f013 0f01 	tst.w	r3, #1
 8000270:	d101      	bne.n	8000276 <ADC_Disable+0x3e>
 8000272:	2300      	movs	r3, #0
 8000274:	e7e8      	b.n	8000248 <ADC_Disable+0x10>
 8000276:	2301      	movs	r3, #1
 8000278:	e7e6      	b.n	8000248 <ADC_Disable+0x10>
 800027a:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 800027c:	6893      	ldr	r3, [r2, #8]
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6093      	str	r3, [r2, #8]
 8000284:	6803      	ldr	r3, [r0, #0]
 8000286:	2203      	movs	r2, #3
 8000288:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800028a:	f7ff ffcd 	bl	8000228 <HAL_GetTick>
 800028e:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f013 0f01 	tst.w	r3, #1
 8000298:	d00e      	beq.n	80002b8 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800029a:	f7ff ffc5 	bl	8000228 <HAL_GetTick>
 800029e:	1b40      	subs	r0, r0, r5
 80002a0:	2802      	cmp	r0, #2
 80002a2:	d9f5      	bls.n	8000290 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 80002b4:	2001      	movs	r0, #1
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002b8:	2000      	movs	r0, #0
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	2000      	movs	r0, #0
}
 80002be:	bd38      	pop	{r3, r4, r5, pc}

080002c0 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80002c0:	6803      	ldr	r3, [r0, #0]
 80002c2:	689a      	ldr	r2, [r3, #8]
 80002c4:	f012 0f0c 	tst.w	r2, #12
 80002c8:	d062      	beq.n	8000390 <ADC_ConversionStop+0xd0>
{
 80002ca:	b570      	push	{r4, r5, r6, lr}
 80002cc:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80002d4:	d002      	beq.n	80002dc <ADC_ConversionStop+0x1c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80002d6:	69c2      	ldr	r2, [r0, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80002d8:	2a01      	cmp	r2, #1
 80002da:	d038      	beq.n	800034e <ADC_ConversionStop+0x8e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80002dc:	2960      	cmp	r1, #96	; 0x60
 80002de:	d00c      	beq.n	80002fa <ADC_ConversionStop+0x3a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80002e0:	6823      	ldr	r3, [r4, #0]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	f012 0f04 	tst.w	r2, #4
 80002e8:	d007      	beq.n	80002fa <ADC_ConversionStop+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80002ea:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80002ec:	f012 0f02 	tst.w	r2, #2
 80002f0:	d103      	bne.n	80002fa <ADC_ConversionStop+0x3a>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80002f2:	689a      	ldr	r2, [r3, #8]
 80002f4:	f042 0210 	orr.w	r2, r2, #16
 80002f8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80002fa:	290c      	cmp	r1, #12
 80002fc:	d00c      	beq.n	8000318 <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80002fe:	6823      	ldr	r3, [r4, #0]
 8000300:	689a      	ldr	r2, [r3, #8]
 8000302:	f012 0f08 	tst.w	r2, #8
 8000306:	d007      	beq.n	8000318 <ADC_ConversionStop+0x58>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000308:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800030a:	f012 0f02 	tst.w	r2, #2
 800030e:	d103      	bne.n	8000318 <ADC_ConversionStop+0x58>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	f042 0220 	orr.w	r2, r2, #32
 8000316:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8000318:	2960      	cmp	r1, #96	; 0x60
 800031a:	d035      	beq.n	8000388 <ADC_ConversionStop+0xc8>
 800031c:	296c      	cmp	r1, #108	; 0x6c
 800031e:	d131      	bne.n	8000384 <ADC_ConversionStop+0xc4>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000320:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000322:	f7ff ff81 	bl	8000228 <HAL_GetTick>
 8000326:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000328:	6823      	ldr	r3, [r4, #0]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	421d      	tst	r5, r3
 800032e:	d02d      	beq.n	800038c <ADC_ConversionStop+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000330:	f7ff ff7a 	bl	8000228 <HAL_GetTick>
 8000334:	1b80      	subs	r0, r0, r6
 8000336:	280b      	cmp	r0, #11
 8000338:	d9f6      	bls.n	8000328 <ADC_ConversionStop+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000342:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800034a:	2001      	movs	r0, #1
 800034c:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800034e:	6982      	ldr	r2, [r0, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000350:	2a01      	cmp	r2, #1
 8000352:	d1c3      	bne.n	80002dc <ADC_ConversionStop+0x1c>
 8000354:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f011 0f40 	tst.w	r1, #64	; 0x40
 800035c:	d10e      	bne.n	800037c <ADC_ConversionStop+0xbc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <ADC_ConversionStop+0xd4>)
 8000360:	428a      	cmp	r2, r1
 8000362:	d801      	bhi.n	8000368 <ADC_ConversionStop+0xa8>
        Conversion_Timeout_CPU_cycles ++;
 8000364:	3201      	adds	r2, #1
 8000366:	e7f6      	b.n	8000356 <ADC_ConversionStop+0x96>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000370:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	64a3      	str	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 8000378:	2001      	movs	r0, #1
 800037a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800037c:	2240      	movs	r2, #64	; 0x40
 800037e:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000380:	210c      	movs	r1, #12
 8000382:	e7ab      	b.n	80002dc <ADC_ConversionStop+0x1c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000384:	2504      	movs	r5, #4
        break;
 8000386:	e7cc      	b.n	8000322 <ADC_ConversionStop+0x62>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000388:	2508      	movs	r5, #8
 800038a:	e7ca      	b.n	8000322 <ADC_ConversionStop+0x62>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800038c:	2000      	movs	r0, #0
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	000993ff 	.word	0x000993ff

08000398 <ADC_Enable>:
{
 8000398:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800039a:	6802      	ldr	r2, [r0, #0]
 800039c:	6893      	ldr	r3, [r2, #8]
 800039e:	f003 0303 	and.w	r3, r3, #3
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d010      	beq.n	80003c8 <ADC_Enable+0x30>
 80003a6:	2300      	movs	r3, #0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d133      	bne.n	8000414 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80003ac:	6891      	ldr	r1, [r2, #8]
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <ADC_Enable+0x80>)
 80003b0:	4219      	tst	r1, r3
 80003b2:	d011      	beq.n	80003d8 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80003c4:	2001      	movs	r0, #1
 80003c6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003c8:	6813      	ldr	r3, [r2, #0]
 80003ca:	f013 0f01 	tst.w	r3, #1
 80003ce:	d101      	bne.n	80003d4 <ADC_Enable+0x3c>
 80003d0:	2300      	movs	r3, #0
 80003d2:	e7e9      	b.n	80003a8 <ADC_Enable+0x10>
 80003d4:	2301      	movs	r3, #1
 80003d6:	e7e7      	b.n	80003a8 <ADC_Enable+0x10>
 80003d8:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80003da:	6893      	ldr	r3, [r2, #8]
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80003e2:	f7ff ff21 	bl	8000228 <HAL_GetTick>
 80003e6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003e8:	6823      	ldr	r3, [r4, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f013 0f01 	tst.w	r3, #1
 80003f0:	d10e      	bne.n	8000410 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003f2:	f7ff ff19 	bl	8000228 <HAL_GetTick>
 80003f6:	1b40      	subs	r0, r0, r5
 80003f8:	2802      	cmp	r0, #2
 80003fa:	d9f5      	bls.n	80003e8 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000404:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800040c:	2001      	movs	r0, #1
 800040e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000410:	2000      	movs	r0, #0
 8000412:	bd38      	pop	{r3, r4, r5, pc}
 8000414:	2000      	movs	r0, #0
}
 8000416:	bd38      	pop	{r3, r4, r5, pc}
 8000418:	8000003f 	.word	0x8000003f

0800041c <HAL_ADC_Init>:
{
 800041c:	b530      	push	{r4, r5, lr}
 800041e:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000420:	2300      	movs	r3, #0
 8000422:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000424:	2800      	cmp	r0, #0
 8000426:	f000 80fb 	beq.w	8000620 <HAL_ADC_Init+0x204>
 800042a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800042c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800042e:	f013 0f10 	tst.w	r3, #16
 8000432:	d151      	bne.n	80004d8 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000434:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000436:	b1ab      	cbz	r3, 8000464 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000438:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800043a:	6823      	ldr	r3, [r4, #0]
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000442:	d003      	beq.n	800044c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000444:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000446:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800044a:	d046      	beq.n	80004da <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 800044c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800044e:	f023 0312 	bic.w	r3, r3, #18
 8000452:	f043 0310 	orr.w	r3, r3, #16
 8000456:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000458:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000460:	2001      	movs	r0, #1
 8000462:	e03a      	b.n	80004da <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000464:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000466:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000468:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800046a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800046e:	f002 fd05 	bl	8002e7c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000472:	6823      	ldr	r3, [r4, #0]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800047a:	d001      	beq.n	8000480 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800047c:	2000      	movs	r0, #0
 800047e:	e7dc      	b.n	800043a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000480:	4620      	mov	r0, r4
 8000482:	f7ff fed9 	bl	8000238 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	f013 0f10 	tst.w	r3, #16
 800048c:	d1d5      	bne.n	800043a <HAL_ADC_Init+0x1e>
 800048e:	2800      	cmp	r0, #0
 8000490:	d1d3      	bne.n	800043a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000494:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000498:	f023 0302 	bic.w	r3, r3, #2
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80004a2:	6822      	ldr	r2, [r4, #0]
 80004a4:	6893      	ldr	r3, [r2, #8]
 80004a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80004aa:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004ac:	6822      	ldr	r2, [r4, #0]
 80004ae:	6893      	ldr	r3, [r2, #8]
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004b6:	4b5b      	ldr	r3, [pc, #364]	; (8000624 <HAL_ADC_Init+0x208>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a5b      	ldr	r2, [pc, #364]	; (8000628 <HAL_ADC_Init+0x20c>)
 80004bc:	fba2 2303 	umull	r2, r3, r2, r3
 80004c0:	0c9b      	lsrs	r3, r3, #18
 80004c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004c6:	005a      	lsls	r2, r3, #1
 80004c8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80004ca:	9b00      	ldr	r3, [sp, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0b4      	beq.n	800043a <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80004d0:	9b00      	ldr	r3, [sp, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	e7f8      	b.n	80004ca <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004d8:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004dc:	f013 0f10 	tst.w	r3, #16
 80004e0:	f040 8095 	bne.w	800060e <HAL_ADC_Init+0x1f2>
 80004e4:	2800      	cmp	r0, #0
 80004e6:	f040 8092 	bne.w	800060e <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004ea:	6822      	ldr	r2, [r4, #0]
 80004ec:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004ee:	f013 0304 	ands.w	r3, r3, #4
 80004f2:	f040 808c 	bne.w	800060e <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80004f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004f8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80004fc:	f041 0102 	orr.w	r1, r1, #2
 8000500:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000502:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000506:	d055      	beq.n	80005b4 <HAL_ADC_Init+0x198>
 8000508:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800050c:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800050e:	6891      	ldr	r1, [r2, #8]
 8000510:	f001 0103 	and.w	r1, r1, #3
 8000514:	2901      	cmp	r1, #1
 8000516:	d050      	beq.n	80005ba <HAL_ADC_Init+0x19e>
 8000518:	2200      	movs	r2, #0
 800051a:	b972      	cbnz	r2, 800053a <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800051c:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800051e:	b12d      	cbz	r5, 800052c <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000520:	68a9      	ldr	r1, [r5, #8]
 8000522:	f001 0103 	and.w	r1, r1, #3
 8000526:	2901      	cmp	r1, #1
 8000528:	d04f      	beq.n	80005ca <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800052a:	b932      	cbnz	r2, 800053a <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800052c:	493f      	ldr	r1, [pc, #252]	; (800062c <HAL_ADC_Init+0x210>)
 800052e:	688a      	ldr	r2, [r1, #8]
 8000530:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000534:	6865      	ldr	r5, [r4, #4]
 8000536:	432a      	orrs	r2, r5
 8000538:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800053a:	69e2      	ldr	r2, [r4, #28]
 800053c:	0351      	lsls	r1, r2, #13
 800053e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000540:	2d01      	cmp	r5, #1
 8000542:	d001      	beq.n	8000548 <HAL_ADC_Init+0x12c>
 8000544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000548:	430b      	orrs	r3, r1
 800054a:	68e1      	ldr	r1, [r4, #12]
 800054c:	430b      	orrs	r3, r1
 800054e:	68a1      	ldr	r1, [r4, #8]
 8000550:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000552:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000554:	2901      	cmp	r1, #1
 8000556:	d03e      	beq.n	80005d6 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800055a:	2a01      	cmp	r2, #1
 800055c:	d002      	beq.n	8000564 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800055e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000560:	430a      	orrs	r2, r1
 8000562:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000564:	6822      	ldr	r2, [r4, #0]
 8000566:	6891      	ldr	r1, [r2, #8]
 8000568:	f011 0f0c 	tst.w	r1, #12
 800056c:	d10b      	bne.n	8000586 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800056e:	68d1      	ldr	r1, [r2, #12]
 8000570:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000574:	f021 0102 	bic.w	r1, r1, #2
 8000578:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800057a:	69a1      	ldr	r1, [r4, #24]
 800057c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000584:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000586:	6821      	ldr	r1, [r4, #0]
 8000588:	68cd      	ldr	r5, [r1, #12]
 800058a:	4a29      	ldr	r2, [pc, #164]	; (8000630 <HAL_ADC_Init+0x214>)
 800058c:	402a      	ands	r2, r5
 800058e:	4313      	orrs	r3, r2
 8000590:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000592:	6923      	ldr	r3, [r4, #16]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d031      	beq.n	80005fc <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000598:	6822      	ldr	r2, [r4, #0]
 800059a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800059c:	f023 030f 	bic.w	r3, r3, #15
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80005a2:	2300      	movs	r3, #0
 80005a4:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80005a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6463      	str	r3, [r4, #68]	; 0x44
 80005b2:	e033      	b.n	800061c <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005b4:	491f      	ldr	r1, [pc, #124]	; (8000634 <HAL_ADC_Init+0x218>)
 80005b6:	9101      	str	r1, [sp, #4]
 80005b8:	e7a9      	b.n	800050e <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005ba:	6812      	ldr	r2, [r2, #0]
 80005bc:	f012 0f01 	tst.w	r2, #1
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x1aa>
 80005c2:	2200      	movs	r2, #0
 80005c4:	e7a9      	b.n	800051a <HAL_ADC_Init+0xfe>
 80005c6:	2201      	movs	r2, #1
 80005c8:	e7a7      	b.n	800051a <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005ca:	6829      	ldr	r1, [r5, #0]
 80005cc:	f011 0f01 	tst.w	r1, #1
 80005d0:	d0ab      	beq.n	800052a <HAL_ADC_Init+0x10e>
 80005d2:	2201      	movs	r2, #1
 80005d4:	e7a9      	b.n	800052a <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005d6:	b932      	cbnz	r2, 80005e6 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005da:	3a01      	subs	r2, #1
 80005dc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80005e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e4:	e7b8      	b.n	8000558 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 80005e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80005ec:	f042 0220 	orr.w	r2, r2, #32
 80005f0:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005f4:	f042 0201 	orr.w	r2, r2, #1
 80005f8:	64a2      	str	r2, [r4, #72]	; 0x48
 80005fa:	e7ad      	b.n	8000558 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005fc:	6821      	ldr	r1, [r4, #0]
 80005fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	6a22      	ldr	r2, [r4, #32]
 8000606:	3a01      	subs	r2, #1
 8000608:	4313      	orrs	r3, r2
 800060a:	630b      	str	r3, [r1, #48]	; 0x30
 800060c:	e7c9      	b.n	80005a2 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 800060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000610:	f023 0312 	bic.w	r3, r3, #18
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 800061a:	2001      	movs	r0, #1
}
 800061c:	b017      	add	sp, #92	; 0x5c
 800061e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
 8000622:	e7fb      	b.n	800061c <HAL_ADC_Init+0x200>
 8000624:	20000038 	.word	0x20000038
 8000628:	431bde83 	.word	0x431bde83
 800062c:	50000300 	.word	0x50000300
 8000630:	fff0c007 	.word	0xfff0c007
 8000634:	50000100 	.word	0x50000100

08000638 <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000638:	6803      	ldr	r3, [r0, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f013 0f04 	tst.w	r3, #4
 8000640:	d002      	beq.n	8000648 <HAL_ADC_Start_IT+0x10>
    tmp_hal_status = HAL_BUSY;
 8000642:	2302      	movs	r3, #2
}
 8000644:	4618      	mov	r0, r3
 8000646:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000648:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_Start_IT+0x1c>
 8000650:	2302      	movs	r3, #2
 8000652:	e7f7      	b.n	8000644 <HAL_ADC_Start_IT+0xc>
{
 8000654:	b510      	push	{r4, lr}
 8000656:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000658:	2301      	movs	r3, #1
 800065a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800065e:	f7ff fe9b 	bl	8000398 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000662:	4603      	mov	r3, r0
 8000664:	2800      	cmp	r0, #0
 8000666:	d17c      	bne.n	8000762 <HAL_ADC_Start_IT+0x12a>
      ADC_STATE_CLR_SET(hadc->State,
 8000668:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800066a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800066e:	f022 0201 	bic.w	r2, r2, #1
 8000672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000676:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <HAL_ADC_Start_IT+0x134>)
 800067a:	6892      	ldr	r2, [r2, #8]
 800067c:	f012 0f1f 	tst.w	r2, #31
 8000680:	d043      	beq.n	800070a <HAL_ADC_Start_IT+0xd2>
 8000682:	6821      	ldr	r1, [r4, #0]
 8000684:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000688:	d03f      	beq.n	800070a <HAL_ADC_Start_IT+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800068a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800068c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000690:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000692:	4a37      	ldr	r2, [pc, #220]	; (8000770 <HAL_ADC_Start_IT+0x138>)
 8000694:	4291      	cmp	r1, r2
 8000696:	d048      	beq.n	800072a <HAL_ADC_Start_IT+0xf2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000698:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800069a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800069e:	d051      	beq.n	8000744 <HAL_ADC_Start_IT+0x10c>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80006a2:	f022 0206 	bic.w	r2, r2, #6
 80006a6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006ae:	6822      	ldr	r2, [r4, #0]
 80006b0:	211c      	movs	r1, #28
 80006b2:	6011      	str	r1, [r2, #0]
      switch(hadc->Init.EOCSelection)
 80006b4:	6962      	ldr	r2, [r4, #20]
 80006b6:	2a08      	cmp	r2, #8
 80006b8:	d147      	bne.n	800074a <HAL_ADC_Start_IT+0x112>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80006ba:	6821      	ldr	r1, [r4, #0]
 80006bc:	684a      	ldr	r2, [r1, #4]
 80006be:	f022 0204 	bic.w	r2, r2, #4
 80006c2:	604a      	str	r2, [r1, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80006c4:	6821      	ldr	r1, [r4, #0]
 80006c6:	684a      	ldr	r2, [r1, #4]
 80006c8:	f042 0208 	orr.w	r2, r2, #8
 80006cc:	604a      	str	r2, [r1, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80006ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d040      	beq.n	8000756 <HAL_ADC_Start_IT+0x11e>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80006d4:	4a25      	ldr	r2, [pc, #148]	; (800076c <HAL_ADC_Start_IT+0x134>)
 80006d6:	6892      	ldr	r2, [r2, #8]
 80006d8:	f012 0f1f 	tst.w	r2, #31
 80006dc:	d00f      	beq.n	80006fe <HAL_ADC_Start_IT+0xc6>
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <HAL_ADC_Start_IT+0x134>)
 80006e0:	6892      	ldr	r2, [r2, #8]
 80006e2:	f002 021f 	and.w	r2, r2, #31
 80006e6:	2a05      	cmp	r2, #5
 80006e8:	d009      	beq.n	80006fe <HAL_ADC_Start_IT+0xc6>
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <HAL_ADC_Start_IT+0x134>)
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	f002 021f 	and.w	r2, r2, #31
 80006f2:	2a09      	cmp	r2, #9
 80006f4:	d003      	beq.n	80006fe <HAL_ADC_Start_IT+0xc6>
 80006f6:	6822      	ldr	r2, [r4, #0]
 80006f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80006fc:	d134      	bne.n	8000768 <HAL_ADC_Start_IT+0x130>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80006fe:	6821      	ldr	r1, [r4, #0]
 8000700:	688a      	ldr	r2, [r1, #8]
 8000702:	f042 0204 	orr.w	r2, r2, #4
 8000706:	608a      	str	r2, [r1, #8]
 8000708:	e02e      	b.n	8000768 <HAL_ADC_Start_IT+0x130>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800070a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800070c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000710:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000712:	6822      	ldr	r2, [r4, #0]
 8000714:	68d2      	ldr	r2, [r2, #12]
 8000716:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800071a:	d0bd      	beq.n	8000698 <HAL_ADC_Start_IT+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800071c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800071e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000726:	6462      	str	r2, [r4, #68]	; 0x44
 8000728:	e7b6      	b.n	8000698 <HAL_ADC_Start_IT+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800072a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800072e:	68d2      	ldr	r2, [r2, #12]
 8000730:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000734:	d0b0      	beq.n	8000698 <HAL_ADC_Start_IT+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000736:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000738:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800073c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000740:	6462      	str	r2, [r4, #68]	; 0x44
 8000742:	e7a9      	b.n	8000698 <HAL_ADC_Start_IT+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8000744:	2200      	movs	r2, #0
 8000746:	64a2      	str	r2, [r4, #72]	; 0x48
 8000748:	e7ae      	b.n	80006a8 <HAL_ADC_Start_IT+0x70>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800074a:	6821      	ldr	r1, [r4, #0]
 800074c:	684a      	ldr	r2, [r1, #4]
 800074e:	f042 020c 	orr.w	r2, r2, #12
 8000752:	604a      	str	r2, [r1, #4]
          break;
 8000754:	e7bb      	b.n	80006ce <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000756:	6821      	ldr	r1, [r4, #0]
 8000758:	684a      	ldr	r2, [r1, #4]
 800075a:	f022 0210 	bic.w	r2, r2, #16
 800075e:	604a      	str	r2, [r1, #4]
 8000760:	e7b8      	b.n	80006d4 <HAL_ADC_Start_IT+0x9c>
      __HAL_UNLOCK(hadc);
 8000762:	2200      	movs	r2, #0
 8000764:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd10      	pop	{r4, pc}
 800076c:	50000300 	.word	0x50000300
 8000770:	50000100 	.word	0x50000100

08000774 <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000774:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000778:	2b01      	cmp	r3, #1
 800077a:	d102      	bne.n	8000782 <HAL_ADC_Stop_IT+0xe>
 800077c:	2302      	movs	r3, #2
}
 800077e:	4618      	mov	r0, r3
 8000780:	4770      	bx	lr
{
 8000782:	b510      	push	{r4, lr}
 8000784:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000786:	2301      	movs	r3, #1
 8000788:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800078c:	216c      	movs	r1, #108	; 0x6c
 800078e:	f7ff fd97 	bl	80002c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000792:	4603      	mov	r3, r0
 8000794:	b120      	cbz	r0, 80007a0 <HAL_ADC_Stop_IT+0x2c>
  __HAL_UNLOCK(hadc);
 8000796:	2200      	movs	r2, #0
 8000798:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 800079c:	4618      	mov	r0, r3
 800079e:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	6853      	ldr	r3, [r2, #4]
 80007a4:	f023 031c 	bic.w	r3, r3, #28
 80007a8:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 80007aa:	4620      	mov	r0, r4
 80007ac:	f7ff fd44 	bl	8000238 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80007b0:	4603      	mov	r3, r0
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d1ef      	bne.n	8000796 <HAL_ADC_Stop_IT+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007b8:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80007bc:	f022 0201 	bic.w	r2, r2, #1
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	6462      	str	r2, [r4, #68]	; 0x44
 80007c6:	e7e6      	b.n	8000796 <HAL_ADC_Stop_IT+0x22>

080007c8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80007c8:	6803      	ldr	r3, [r0, #0]
 80007ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80007cc:	4770      	bx	lr

080007ce <HAL_ADCEx_InjectedConvCpltCallback>:
{
 80007ce:	4770      	bx	lr

080007d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
{
 80007d0:	4770      	bx	lr

080007d2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
{
 80007d2:	4770      	bx	lr

080007d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_ADC_IRQHandler>:
{
 80007d8:	b510      	push	{r4, lr}
 80007da:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007dc:	6803      	ldr	r3, [r0, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f012 0f04 	tst.w	r2, #4
 80007e4:	d003      	beq.n	80007ee <HAL_ADC_IRQHandler+0x16>
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	f012 0f04 	tst.w	r2, #4
 80007ec:	d107      	bne.n	80007fe <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80007ee:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007f0:	f012 0f08 	tst.w	r2, #8
 80007f4:	d052      	beq.n	800089c <HAL_ADC_IRQHandler+0xc4>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	f012 0f08 	tst.w	r2, #8
 80007fc:	d04e      	beq.n	800089c <HAL_ADC_IRQHandler+0xc4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000800:	f012 0f10 	tst.w	r2, #16
 8000804:	d103      	bne.n	800080e <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000806:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800080c:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800080e:	4aa7      	ldr	r2, [pc, #668]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 8000810:	6892      	ldr	r2, [r2, #8]
 8000812:	f012 0f1f 	tst.w	r2, #31
 8000816:	d012      	beq.n	800083e <HAL_ADC_IRQHandler+0x66>
 8000818:	4aa4      	ldr	r2, [pc, #656]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 800081a:	6892      	ldr	r2, [r2, #8]
 800081c:	f002 021f 	and.w	r2, r2, #31
 8000820:	2a05      	cmp	r2, #5
 8000822:	d00c      	beq.n	800083e <HAL_ADC_IRQHandler+0x66>
 8000824:	4aa1      	ldr	r2, [pc, #644]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 8000826:	6892      	ldr	r2, [r2, #8]
 8000828:	f002 021f 	and.w	r2, r2, #31
 800082c:	2a09      	cmp	r2, #9
 800082e:	d006      	beq.n	800083e <HAL_ADC_IRQHandler+0x66>
 8000830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000834:	d003      	beq.n	800083e <HAL_ADC_IRQHandler+0x66>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	68d1      	ldr	r1, [r2, #12]
 800083c:	e000      	b.n	8000840 <HAL_ADC_IRQHandler+0x68>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800083e:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000846:	d123      	bne.n	8000890 <HAL_ADC_IRQHandler+0xb8>
 8000848:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800084c:	d120      	bne.n	8000890 <HAL_ADC_IRQHandler+0xb8>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	f012 0f08 	tst.w	r2, #8
 8000854:	d01c      	beq.n	8000890 <HAL_ADC_IRQHandler+0xb8>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	f012 0f04 	tst.w	r2, #4
 800085c:	d110      	bne.n	8000880 <HAL_ADC_IRQHandler+0xa8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	f022 020c 	bic.w	r2, r2, #12
 8000864:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000866:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800086c:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800086e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000870:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000874:	d10c      	bne.n	8000890 <HAL_ADC_IRQHandler+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6463      	str	r3, [r4, #68]	; 0x44
 800087e:	e007      	b.n	8000890 <HAL_ADC_IRQHandler+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000888:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ConvCpltCallback(hadc);
 8000890:	4620      	mov	r0, r4
 8000892:	f002 fa67 	bl	8002d64 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	220c      	movs	r2, #12
 800089a:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f012 0f20 	tst.w	r2, #32
 80008a4:	d003      	beq.n	80008ae <HAL_ADC_IRQHandler+0xd6>
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	f012 0f20 	tst.w	r2, #32
 80008ac:	d107      	bne.n	80008be <HAL_ADC_IRQHandler+0xe6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80008ae:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80008b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80008b4:	d071      	beq.n	800099a <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80008bc:	d06d      	beq.n	800099a <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80008be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80008c4:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80008c6:	4a79      	ldr	r2, [pc, #484]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 80008c8:	6892      	ldr	r2, [r2, #8]
 80008ca:	f012 0f1f 	tst.w	r2, #31
 80008ce:	d012      	beq.n	80008f6 <HAL_ADC_IRQHandler+0x11e>
 80008d0:	4a76      	ldr	r2, [pc, #472]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 80008d2:	6892      	ldr	r2, [r2, #8]
 80008d4:	f002 021f 	and.w	r2, r2, #31
 80008d8:	2a05      	cmp	r2, #5
 80008da:	d00c      	beq.n	80008f6 <HAL_ADC_IRQHandler+0x11e>
 80008dc:	4a73      	ldr	r2, [pc, #460]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 80008de:	6892      	ldr	r2, [r2, #8]
 80008e0:	f002 021f 	and.w	r2, r2, #31
 80008e4:	2a09      	cmp	r2, #9
 80008e6:	d006      	beq.n	80008f6 <HAL_ADC_IRQHandler+0x11e>
 80008e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008ec:	d003      	beq.n	80008f6 <HAL_ADC_IRQHandler+0x11e>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f2:	68d1      	ldr	r1, [r2, #12]
 80008f4:	e000      	b.n	80008f8 <HAL_ADC_IRQHandler+0x120>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80008f6:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80008f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fa:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80008fe:	d009      	beq.n	8000914 <HAL_ADC_IRQHandler+0x13c>
 8000900:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8000904:	d143      	bne.n	800098e <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000906:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000908:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800090c:	d13f      	bne.n	800098e <HAL_ADC_IRQHandler+0x1b6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800090e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8000912:	d13c      	bne.n	800098e <HAL_ADC_IRQHandler+0x1b6>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f012 0f40 	tst.w	r2, #64	; 0x40
 800091a:	d038      	beq.n	800098e <HAL_ADC_IRQHandler+0x1b6>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800091c:	4a63      	ldr	r2, [pc, #396]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 800091e:	6892      	ldr	r2, [r2, #8]
 8000920:	f012 0f1f 	tst.w	r2, #31
 8000924:	d012      	beq.n	800094c <HAL_ADC_IRQHandler+0x174>
 8000926:	4a61      	ldr	r2, [pc, #388]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 8000928:	6892      	ldr	r2, [r2, #8]
 800092a:	f002 021f 	and.w	r2, r2, #31
 800092e:	2a06      	cmp	r2, #6
 8000930:	d00c      	beq.n	800094c <HAL_ADC_IRQHandler+0x174>
 8000932:	4a5e      	ldr	r2, [pc, #376]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 8000934:	6892      	ldr	r2, [r2, #8]
 8000936:	f002 021f 	and.w	r2, r2, #31
 800093a:	2a07      	cmp	r2, #7
 800093c:	d006      	beq.n	800094c <HAL_ADC_IRQHandler+0x174>
 800093e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000942:	d003      	beq.n	800094c <HAL_ADC_IRQHandler+0x174>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000944:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000948:	68d2      	ldr	r2, [r2, #12]
 800094a:	e000      	b.n	800094e <HAL_ADC_IRQHandler+0x176>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800094c:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800094e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000952:	d11c      	bne.n	800098e <HAL_ADC_IRQHandler+0x1b6>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f012 0f08 	tst.w	r2, #8
 800095a:	d110      	bne.n	800097e <HAL_ADC_IRQHandler+0x1a6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000962:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800096a:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800096c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800096e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000972:	d10c      	bne.n	800098e <HAL_ADC_IRQHandler+0x1b6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6463      	str	r3, [r4, #68]	; 0x44
 800097c:	e007      	b.n	800098e <HAL_ADC_IRQHandler+0x1b6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800097e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000986:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800098e:	4620      	mov	r0, r4
 8000990:	f7ff ff1d 	bl	80007ce <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	2260      	movs	r2, #96	; 0x60
 8000998:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80009a2:	d003      	beq.n	80009ac <HAL_ADC_IRQHandler+0x1d4>
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009aa:	d136      	bne.n	8000a1a <HAL_ADC_IRQHandler+0x242>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80009b4:	d003      	beq.n	80009be <HAL_ADC_IRQHandler+0x1e6>
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80009bc:	d138      	bne.n	8000a30 <HAL_ADC_IRQHandler+0x258>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80009c6:	d003      	beq.n	80009d0 <HAL_ADC_IRQHandler+0x1f8>
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80009ce:	d13b      	bne.n	8000a48 <HAL_ADC_IRQHandler+0x270>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f012 0f10 	tst.w	r2, #16
 80009d8:	d015      	beq.n	8000a06 <HAL_ADC_IRQHandler+0x22e>
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	f012 0f10 	tst.w	r2, #16
 80009e0:	d011      	beq.n	8000a06 <HAL_ADC_IRQHandler+0x22e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80009e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009e4:	2a01      	cmp	r2, #1
 80009e6:	d009      	beq.n	80009fc <HAL_ADC_IRQHandler+0x224>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80009e8:	4a30      	ldr	r2, [pc, #192]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 80009ea:	6892      	ldr	r2, [r2, #8]
 80009ec:	f012 0f1f 	tst.w	r2, #31
 80009f0:	d136      	bne.n	8000a60 <HAL_ADC_IRQHandler+0x288>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	f013 0f01 	tst.w	r3, #1
 80009f8:	d139      	bne.n	8000a6e <HAL_ADC_IRQHandler+0x296>
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80009fa:	2200      	movs	r2, #0
    if (overrun_error == 1U)
 80009fc:	2a01      	cmp	r2, #1
 80009fe:	d03a      	beq.n	8000a76 <HAL_ADC_IRQHandler+0x29e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	2210      	movs	r2, #16
 8000a04:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000a0e:	d003      	beq.n	8000a18 <HAL_ADC_IRQHandler+0x240>
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000a16:	d13a      	bne.n	8000a8e <HAL_ADC_IRQHandler+0x2b6>
 8000a18:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a20:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff fc06 	bl	8000234 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e7bd      	b.n	80009ac <HAL_ADC_IRQHandler+0x1d4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a36:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f7ff feca 	bl	80007d2 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e7ba      	b.n	80009be <HAL_ADC_IRQHandler+0x1e6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000a48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff febf 	bl	80007d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e7b7      	b.n	80009d0 <HAL_ADC_IRQHandler+0x1f8>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_ADC_IRQHandler+0x2d4>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8000a68:	d103      	bne.n	8000a72 <HAL_ADC_IRQHandler+0x29a>
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	e7c6      	b.n	80009fc <HAL_ADC_IRQHandler+0x224>
          overrun_error = 1U;  
 8000a6e:	2201      	movs	r2, #1
 8000a70:	e7c4      	b.n	80009fc <HAL_ADC_IRQHandler+0x224>
          overrun_error = 1U;  
 8000a72:	2201      	movs	r2, #1
 8000a74:	e7c2      	b.n	80009fc <HAL_ADC_IRQHandler+0x224>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000a7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000a86:	4620      	mov	r0, r4
 8000a88:	f7ff fbd5 	bl	8000236 <HAL_ADC_ErrorCallback>
 8000a8c:	e7b8      	b.n	8000a00 <HAL_ADC_IRQHandler+0x228>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000a8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a94:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000a96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000a98:	f042 0208 	orr.w	r2, r2, #8
 8000a9c:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fe93 	bl	80007d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8000aaa:	e7b5      	b.n	8000a18 <HAL_ADC_IRQHandler+0x240>
 8000aac:	50000300 	.word	0x50000300

08000ab0 <HAL_ADC_ConfigChannel>:
{
 8000ab0:	b470      	push	{r4, r5, r6}
 8000ab2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8000ab8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	f000 81ad 	beq.w	8000e1c <HAL_ADC_ConfigChannel+0x36c>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000aca:	6800      	ldr	r0, [r0, #0]
 8000acc:	6882      	ldr	r2, [r0, #8]
 8000ace:	f012 0f04 	tst.w	r2, #4
 8000ad2:	f040 8196 	bne.w	8000e02 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8000ad6:	684a      	ldr	r2, [r1, #4]
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d831      	bhi.n	8000b40 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8000adc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000ade:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ae2:	0055      	lsls	r5, r2, #1
 8000ae4:	221f      	movs	r2, #31
 8000ae6:	40aa      	lsls	r2, r5
 8000ae8:	ea24 0202 	bic.w	r2, r4, r2
 8000aec:	680c      	ldr	r4, [r1, #0]
 8000aee:	40ac      	lsls	r4, r5
 8000af0:	4322      	orrs	r2, r4
 8000af2:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	6882      	ldr	r2, [r0, #8]
 8000af8:	f012 0f0c 	tst.w	r2, #12
 8000afc:	d168      	bne.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000afe:	680a      	ldr	r2, [r1, #0]
 8000b00:	2a09      	cmp	r2, #9
 8000b02:	d94e      	bls.n	8000ba2 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b04:	6984      	ldr	r4, [r0, #24]
 8000b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b0a:	3a1e      	subs	r2, #30
 8000b0c:	2507      	movs	r5, #7
 8000b0e:	4095      	lsls	r5, r2
 8000b10:	ea24 0405 	bic.w	r4, r4, r5
 8000b14:	688d      	ldr	r5, [r1, #8]
 8000b16:	fa05 f202 	lsl.w	r2, r5, r2
 8000b1a:	4322      	orrs	r2, r4
 8000b1c:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b1e:	6948      	ldr	r0, [r1, #20]
 8000b20:	681c      	ldr	r4, [r3, #0]
 8000b22:	68e2      	ldr	r2, [r4, #12]
 8000b24:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8000b2e:	6908      	ldr	r0, [r1, #16]
 8000b30:	3801      	subs	r0, #1
 8000b32:	2803      	cmp	r0, #3
 8000b34:	f200 808f 	bhi.w	8000c56 <HAL_ADC_ConfigChannel+0x1a6>
 8000b38:	e8df f000 	tbb	[pc, r0]
 8000b3c:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8000b40:	2a09      	cmp	r2, #9
 8000b42:	d80e      	bhi.n	8000b62 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000b44:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000b46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b4a:	0055      	lsls	r5, r2, #1
 8000b4c:	3d1e      	subs	r5, #30
 8000b4e:	221f      	movs	r2, #31
 8000b50:	40aa      	lsls	r2, r5
 8000b52:	ea24 0202 	bic.w	r2, r4, r2
 8000b56:	680c      	ldr	r4, [r1, #0]
 8000b58:	fa04 f505 	lsl.w	r5, r4, r5
 8000b5c:	432a      	orrs	r2, r5
 8000b5e:	6342      	str	r2, [r0, #52]	; 0x34
 8000b60:	e7c8      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8000b62:	2a0e      	cmp	r2, #14
 8000b64:	d80e      	bhi.n	8000b84 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b66:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000b68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b6c:	0055      	lsls	r5, r2, #1
 8000b6e:	3d3c      	subs	r5, #60	; 0x3c
 8000b70:	221f      	movs	r2, #31
 8000b72:	40aa      	lsls	r2, r5
 8000b74:	ea24 0202 	bic.w	r2, r4, r2
 8000b78:	680c      	ldr	r4, [r1, #0]
 8000b7a:	fa04 f505 	lsl.w	r5, r4, r5
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	6382      	str	r2, [r0, #56]	; 0x38
 8000b82:	e7b7      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000b84:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000b86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b8a:	0055      	lsls	r5, r2, #1
 8000b8c:	3d5a      	subs	r5, #90	; 0x5a
 8000b8e:	221f      	movs	r2, #31
 8000b90:	40aa      	lsls	r2, r5
 8000b92:	ea24 0202 	bic.w	r2, r4, r2
 8000b96:	680c      	ldr	r4, [r1, #0]
 8000b98:	fa04 f505 	lsl.w	r5, r4, r5
 8000b9c:	432a      	orrs	r2, r5
 8000b9e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000ba0:	e7a8      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ba2:	6944      	ldr	r4, [r0, #20]
 8000ba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ba8:	2507      	movs	r5, #7
 8000baa:	4095      	lsls	r5, r2
 8000bac:	ea24 0405 	bic.w	r4, r4, r5
 8000bb0:	688d      	ldr	r5, [r1, #8]
 8000bb2:	fa05 f202 	lsl.w	r2, r5, r2
 8000bb6:	4322      	orrs	r2, r4
 8000bb8:	6142      	str	r2, [r0, #20]
 8000bba:	e7b0      	b.n	8000b1e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000bbc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000bbe:	4d98      	ldr	r5, [pc, #608]	; (8000e20 <HAL_ADC_ConfigChannel+0x370>)
 8000bc0:	4005      	ands	r5, r0
 8000bc2:	6808      	ldr	r0, [r1, #0]
 8000bc4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc8:	4315      	orrs	r5, r2
 8000bca:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000bce:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	6882      	ldr	r2, [r0, #8]
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d06f      	beq.n	8000cbc <HAL_ADC_ConfigChannel+0x20c>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	f040 811a 	bne.w	8000e18 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000be4:	68cc      	ldr	r4, [r1, #12]
 8000be6:	2c01      	cmp	r4, #1
 8000be8:	d070      	beq.n	8000ccc <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bea:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000bee:	680e      	ldr	r6, [r1, #0]
 8000bf0:	2501      	movs	r5, #1
 8000bf2:	40b5      	lsls	r5, r6
 8000bf4:	ea24 0405 	bic.w	r4, r4, r5
 8000bf8:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000bfc:	6809      	ldr	r1, [r1, #0]
 8000bfe:	2910      	cmp	r1, #16
 8000c00:	f000 808d 	beq.w	8000d1e <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c04:	2911      	cmp	r1, #17
 8000c06:	f000 80af 	beq.w	8000d68 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c0a:	2912      	cmp	r1, #18
 8000c0c:	f000 80b2 	beq.w	8000d74 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2000      	movs	r0, #0
 8000c12:	e0fb      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000c14:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000c16:	4d82      	ldr	r5, [pc, #520]	; (8000e20 <HAL_ADC_ConfigChannel+0x370>)
 8000c18:	4005      	ands	r5, r0
 8000c1a:	6808      	ldr	r0, [r1, #0]
 8000c1c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000c20:	4315      	orrs	r5, r2
 8000c22:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000c26:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8000c28:	e7d2      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000c2a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000c2c:	4d7c      	ldr	r5, [pc, #496]	; (8000e20 <HAL_ADC_ConfigChannel+0x370>)
 8000c2e:	4005      	ands	r5, r0
 8000c30:	6808      	ldr	r0, [r1, #0]
 8000c32:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000c36:	4315      	orrs	r5, r2
 8000c38:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000c3c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8000c3e:	e7c7      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000c40:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000c42:	4877      	ldr	r0, [pc, #476]	; (8000e20 <HAL_ADC_ConfigChannel+0x370>)
 8000c44:	4028      	ands	r0, r5
 8000c46:	680d      	ldr	r5, [r1, #0]
 8000c48:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000c4c:	4302      	orrs	r2, r0
 8000c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000c52:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8000c54:	e7bc      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000c58:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c5c:	6808      	ldr	r0, [r1, #0]
 8000c5e:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8000c62:	d01c      	beq.n	8000c9e <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000c68:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c6c:	680c      	ldr	r4, [r1, #0]
 8000c6e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c72:	d019      	beq.n	8000ca8 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000c78:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c7c:	680c      	ldr	r4, [r1, #0]
 8000c7e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c82:	d016      	beq.n	8000cb2 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c88:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c8c:	680c      	ldr	r4, [r1, #0]
 8000c8e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c92:	d19d      	bne.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000c94:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c9a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000c9c:	e798      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000c9e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000ca0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ca4:	6622      	str	r2, [r4, #96]	; 0x60
 8000ca6:	e7dd      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000ca8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000caa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cae:	6642      	str	r2, [r0, #100]	; 0x64
 8000cb0:	e7e0      	b.n	8000c74 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000cb2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000cb8:	6682      	str	r2, [r0, #104]	; 0x68
 8000cba:	e7e3      	b.n	8000c84 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cbc:	6802      	ldr	r2, [r0, #0]
 8000cbe:	f012 0f01 	tst.w	r2, #1
 8000cc2:	d101      	bne.n	8000cc8 <HAL_ADC_ConfigChannel+0x218>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e78a      	b.n	8000bde <HAL_ADC_ConfigChannel+0x12e>
 8000cc8:	2201      	movs	r2, #1
 8000cca:	e788      	b.n	8000bde <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ccc:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000cd0:	680e      	ldr	r6, [r1, #0]
 8000cd2:	2501      	movs	r5, #1
 8000cd4:	40b5      	lsls	r5, r6
 8000cd6:	432c      	orrs	r4, r5
 8000cd8:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cdc:	6808      	ldr	r0, [r1, #0]
 8000cde:	2809      	cmp	r0, #9
 8000ce0:	d90e      	bls.n	8000d00 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000ce2:	681e      	ldr	r6, [r3, #0]
 8000ce4:	69b4      	ldr	r4, [r6, #24]
 8000ce6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000cea:	381b      	subs	r0, #27
 8000cec:	2507      	movs	r5, #7
 8000cee:	4085      	lsls	r5, r0
 8000cf0:	ea24 0405 	bic.w	r4, r4, r5
 8000cf4:	688d      	ldr	r5, [r1, #8]
 8000cf6:	fa05 f000 	lsl.w	r0, r5, r0
 8000cfa:	4320      	orrs	r0, r4
 8000cfc:	61b0      	str	r0, [r6, #24]
 8000cfe:	e77d      	b.n	8000bfc <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d00:	681e      	ldr	r6, [r3, #0]
 8000d02:	6974      	ldr	r4, [r6, #20]
 8000d04:	3001      	adds	r0, #1
 8000d06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d0a:	2507      	movs	r5, #7
 8000d0c:	4085      	lsls	r5, r0
 8000d0e:	ea24 0405 	bic.w	r4, r4, r5
 8000d12:	688d      	ldr	r5, [r1, #8]
 8000d14:	fa05 f000 	lsl.w	r0, r5, r0
 8000d18:	4320      	orrs	r0, r4
 8000d1a:	6170      	str	r0, [r6, #20]
 8000d1c:	e76e      	b.n	8000bfc <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d1e:	4841      	ldr	r0, [pc, #260]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000d20:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d22:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d26:	f47f af6d 	bne.w	8000c04 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000d30:	d027      	beq.n	8000d82 <HAL_ADC_ConfigChannel+0x2d2>
 8000d32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d36:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d38:	68a0      	ldr	r0, [r4, #8]
 8000d3a:	f000 0003 	and.w	r0, r0, #3
 8000d3e:	2801      	cmp	r0, #1
 8000d40:	d022      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x2d8>
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d157      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d46:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d48:	b135      	cbz	r5, 8000d58 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d4a:	68a8      	ldr	r0, [r5, #8]
 8000d4c:	f000 0003 	and.w	r0, r0, #3
 8000d50:	2801      	cmp	r0, #1
 8000d52:	d01f      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d14e      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d58:	2910      	cmp	r1, #16
 8000d5a:	d021      	beq.n	8000da0 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000d5c:	2911      	cmp	r1, #17
 8000d5e:	d039      	beq.n	8000dd4 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000d60:	2912      	cmp	r1, #18
 8000d62:	d041      	beq.n	8000de8 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d64:	2000      	movs	r0, #0
 8000d66:	e051      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d68:	482e      	ldr	r0, [pc, #184]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000d6a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d6c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000d70:	d0db      	beq.n	8000d2a <HAL_ADC_ConfigChannel+0x27a>
 8000d72:	e74a      	b.n	8000c0a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000d74:	482b      	ldr	r0, [pc, #172]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000d76:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d78:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000d7c:	d0d5      	beq.n	8000d2a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e044      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d82:	4829      	ldr	r0, [pc, #164]	; (8000e28 <HAL_ADC_ConfigChannel+0x378>)
 8000d84:	9001      	str	r0, [sp, #4]
 8000d86:	e7d7      	b.n	8000d38 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	f010 0f01 	tst.w	r0, #1
 8000d8e:	d0d8      	beq.n	8000d42 <HAL_ADC_ConfigChannel+0x292>
 8000d90:	2201      	movs	r2, #1
 8000d92:	e7d6      	b.n	8000d42 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d94:	6828      	ldr	r0, [r5, #0]
 8000d96:	f010 0f01 	tst.w	r0, #1
 8000d9a:	d0db      	beq.n	8000d54 <HAL_ADC_ConfigChannel+0x2a4>
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	e7d9      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000da0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000da4:	d1da      	bne.n	8000d5c <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000da6:	491f      	ldr	r1, [pc, #124]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000da8:	688a      	ldr	r2, [r1, #8]
 8000daa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dae:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000db0:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_ADC_ConfigChannel+0x37c>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	491e      	ldr	r1, [pc, #120]	; (8000e30 <HAL_ADC_ConfigChannel+0x380>)
 8000db6:	fbb2 f1f1 	udiv	r1, r2, r1
 8000dba:	220a      	movs	r2, #10
 8000dbc:	fb02 f201 	mul.w	r2, r2, r1
 8000dc0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000dc2:	e002      	b.n	8000dca <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8000dc4:	9a00      	ldr	r2, [sp, #0]
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000dca:	9a00      	ldr	r2, [sp, #0]
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d1f9      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e01b      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000dd4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000dd8:	d1c2      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000dda:	4912      	ldr	r1, [pc, #72]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000ddc:	688a      	ldr	r2, [r1, #8]
 8000dde:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000de2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000de6:	e011      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000de8:	490e      	ldr	r1, [pc, #56]	; (8000e24 <HAL_ADC_ConfigChannel+0x374>)
 8000dea:	688a      	ldr	r2, [r1, #8]
 8000dec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000df0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	2000      	movs	r0, #0
 8000df4:	e00a      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000df8:	f042 0220 	orr.w	r2, r2, #32
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e004      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e04:	f042 0220 	orr.w	r2, r2, #32
 8000e08:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000e0a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000e12:	b017      	add	sp, #92	; 0x5c
 8000e14:	bc70      	pop	{r4, r5, r6}
 8000e16:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e7f7      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	e7f8      	b.n	8000e12 <HAL_ADC_ConfigChannel+0x362>
 8000e20:	83fff000 	.word	0x83fff000
 8000e24:	50000300 	.word	0x50000300
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	20000038 	.word	0x20000038
 8000e30:	000f4240 	.word	0x000f4240

08000e34 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000e34:	b470      	push	{r4, r5, r6}
 8000e36:	b097      	sub	sp, #92	; 0x5c
 8000e38:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e3a:	6802      	ldr	r2, [r0, #0]
 8000e3c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000e40:	d040      	beq.n	8000ec4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000e42:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e46:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000e48:	9801      	ldr	r0, [sp, #4]
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	f000 8088 	beq.w	8000f60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8000e50:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8000e54:	2c01      	cmp	r4, #1
 8000e56:	f000 8085 	beq.w	8000f64 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8000e5a:	2401      	movs	r4, #1
 8000e5c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000e60:	6892      	ldr	r2, [r2, #8]
 8000e62:	f012 0f04 	tst.w	r2, #4
 8000e66:	d168      	bne.n	8000f3a <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000e68:	6882      	ldr	r2, [r0, #8]
 8000e6a:	f012 0f04 	tst.w	r2, #4
 8000e6e:	d164      	bne.n	8000f3a <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e70:	680a      	ldr	r2, [r1, #0]
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d037      	beq.n	8000ee6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000e76:	4d3c      	ldr	r5, [pc, #240]	; (8000f68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000e78:	68aa      	ldr	r2, [r5, #8]
 8000e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e7e:	684c      	ldr	r4, [r1, #4]
 8000e80:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000e82:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8000e86:	4322      	orrs	r2, r4
 8000e88:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e8a:	681c      	ldr	r4, [r3, #0]
 8000e8c:	68a2      	ldr	r2, [r4, #8]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	2a01      	cmp	r2, #1
 8000e94:	d019      	beq.n	8000eca <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8000e96:	2200      	movs	r2, #0
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d159      	bne.n	8000f50 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000e9c:	6884      	ldr	r4, [r0, #8]
 8000e9e:	f004 0403 	and.w	r4, r4, #3
 8000ea2:	2c01      	cmp	r4, #1
 8000ea4:	d019      	beq.n	8000eda <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d154      	bne.n	8000f54 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000eaa:	4c2f      	ldr	r4, [pc, #188]	; (8000f68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000eac:	68a2      	ldr	r2, [r4, #8]
 8000eae:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000eb2:	f022 020f 	bic.w	r2, r2, #15
 8000eb6:	6808      	ldr	r0, [r1, #0]
 8000eb8:	6889      	ldr	r1, [r1, #8]
 8000eba:	4301      	orrs	r1, r0
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	e03f      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec4:	4829      	ldr	r0, [pc, #164]	; (8000f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000ec6:	9001      	str	r0, [sp, #4]
 8000ec8:	e7be      	b.n	8000e48 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000eca:	6822      	ldr	r2, [r4, #0]
 8000ecc:	f012 0f01 	tst.w	r2, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	e7e0      	b.n	8000e98 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	e7de      	b.n	8000e98 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000eda:	6800      	ldr	r0, [r0, #0]
 8000edc:	f010 0f01 	tst.w	r0, #1
 8000ee0:	d0e1      	beq.n	8000ea6 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	e7df      	b.n	8000ea6 <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000ee6:	4920      	ldr	r1, [pc, #128]	; (8000f68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000ee8:	688a      	ldr	r2, [r1, #8]
 8000eea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000eee:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	688a      	ldr	r2, [r1, #8]
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	2a01      	cmp	r2, #1
 8000efa:	d010      	beq.n	8000f1e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8000efc:	2200      	movs	r2, #0
 8000efe:	bb5a      	cbnz	r2, 8000f58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f00:	6881      	ldr	r1, [r0, #8]
 8000f02:	f001 0103 	and.w	r1, r1, #3
 8000f06:	2901      	cmp	r1, #1
 8000f08:	d011      	beq.n	8000f2e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f0a:	bb3a      	cbnz	r2, 8000f5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000f0e:	688a      	ldr	r2, [r1, #8]
 8000f10:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000f14:	f022 020f 	bic.w	r2, r2, #15
 8000f18:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	e012      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f1e:	680a      	ldr	r2, [r1, #0]
 8000f20:	f012 0f01 	tst.w	r2, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000f26:	2200      	movs	r2, #0
 8000f28:	e7e9      	b.n	8000efe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	e7e7      	b.n	8000efe <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f2e:	6801      	ldr	r1, [r0, #0]
 8000f30:	f011 0f01 	tst.w	r1, #1
 8000f34:	d0e9      	beq.n	8000f0a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8000f36:	2201      	movs	r2, #1
 8000f38:	e7e7      	b.n	8000f0a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000f4a:	b017      	add	sp, #92	; 0x5c
 8000f4c:	bc70      	pop	{r4, r5, r6}
 8000f4e:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f50:	2000      	movs	r0, #0
 8000f52:	e7f7      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000f54:	2000      	movs	r0, #0
 8000f56:	e7f5      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7f3      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	e7f1      	b.n	8000f44 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8000f60:	2001      	movs	r0, #1
 8000f62:	e7f2      	b.n	8000f4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8000f64:	2002      	movs	r0, #2
 8000f66:	e7f0      	b.n	8000f4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8000f68:	50000300 	.word	0x50000300
 8000f6c:	50000100 	.word	0x50000100

08000f70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f78:	041b      	lsls	r3, r3, #16
 8000f7a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f7c:	0200      	lsls	r0, r0, #8
 8000f7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f82:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000f84:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000f88:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f8c:	60d0      	str	r0, [r2, #12]
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_NVIC_SetPriority+0x5c>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9e:	f1c3 0407 	rsb	r4, r3, #7
 8000fa2:	2c04      	cmp	r4, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa8:	1d1d      	adds	r5, r3, #4
 8000faa:	2d06      	cmp	r5, #6
 8000fac:	d917      	bls.n	8000fde <HAL_NVIC_SetPriority+0x4a>
 8000fae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	2501      	movs	r5, #1
 8000fb2:	fa05 f404 	lsl.w	r4, r5, r4
 8000fb6:	3c01      	subs	r4, #1
 8000fb8:	4021      	ands	r1, r4
 8000fba:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	fa05 f303 	lsl.w	r3, r5, r3
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	db0b      	blt.n	8000fe2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	0109      	lsls	r1, r1, #4
 8000fcc:	b2c9      	uxtb	r1, r1
 8000fce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000fd2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fd6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fda:	bc30      	pop	{r4, r5}
 8000fdc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e7e6      	b.n	8000fb0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	f000 000f 	and.w	r0, r0, #15
 8000fe6:	0109      	lsls	r1, r1, #4
 8000fe8:	b2c9      	uxtb	r1, r1
 8000fea:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_NVIC_SetPriority+0x60>)
 8000fec:	5419      	strb	r1, [r3, r0]
 8000fee:	e7f4      	b.n	8000fda <HAL_NVIC_SetPriority+0x46>
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	e000ed14 	.word	0xe000ed14

08000ff8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ff8:	0942      	lsrs	r2, r0, #5
 8000ffa:	f000 001f 	and.w	r0, r0, #31
 8000ffe:	2301      	movs	r3, #1
 8001000:	fa03 f000 	lsl.w	r0, r3, r0
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <HAL_NVIC_EnableIRQ+0x14>)
 8001006:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	3801      	subs	r0, #1
 8001012:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001016:	d20a      	bcs.n	800102e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_SYSTICK_Config+0x24>)
 800101a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	21f0      	movs	r1, #240	; 0xf0
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_SYSTICK_Config+0x28>)
 8001020:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	2000      	movs	r0, #0
 8001026:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800103c:	2804      	cmp	r0, #4
 800103e:	d005      	beq.n	800104c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800104c:	4a02      	ldr	r2, [pc, #8]	; (8001058 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4770      	bx	lr
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800105c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800105e:	f001 fe27 	bl	8002cb0 <HAL_SYSTICK_Callback>
 8001062:	bd08      	pop	{r3, pc}

08001064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001064:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001066:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800106a:	2b02      	cmp	r3, #2
 800106c:	d003      	beq.n	8001076 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	2304      	movs	r3, #4
 8001070:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001076:	6802      	ldr	r2, [r0, #0]
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f023 030e 	bic.w	r3, r3, #14
 800107e:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001080:	6802      	ldr	r2, [r0, #0]
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800108a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800108c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800108e:	2201      	movs	r2, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001096:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	2300      	movs	r3, #0
 800109c:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80010a2:	b113      	cbz	r3, 80010aa <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 80010a4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2000      	movs	r0, #0
 80010a8:	bd08      	pop	{r3, pc}
 80010aa:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 80010ac:	bd08      	pop	{r3, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80010b4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010b6:	e088      	b.n	80011ca <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010b8:	08de      	lsrs	r6, r3, #3
 80010ba:	3608      	adds	r6, #8
 80010bc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c0:	f003 0e07 	and.w	lr, r3, #7
 80010c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010c8:	270f      	movs	r7, #15
 80010ca:	fa07 f70e 	lsl.w	r7, r7, lr
 80010ce:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d2:	690f      	ldr	r7, [r1, #16]
 80010d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80010d8:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80010da:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80010de:	e083      	b.n	80011e8 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e4:	68cf      	ldr	r7, [r1, #12]
 80010e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80010ea:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80010ec:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f4:	684e      	ldr	r6, [r1, #4]
 80010f6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010fa:	409e      	lsls	r6, r3
 80010fc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80010fe:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001100:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001104:	688d      	ldr	r5, [r1, #8]
 8001106:	fa05 f50e 	lsl.w	r5, r5, lr
 800110a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800110c:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110e:	684c      	ldr	r4, [r1, #4]
 8001110:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001114:	d058      	beq.n	80011c8 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4c47      	ldr	r4, [pc, #284]	; (8001234 <HAL_GPIO_Init+0x184>)
 8001118:	69a5      	ldr	r5, [r4, #24]
 800111a:	f045 0501 	orr.w	r5, r5, #1
 800111e:	61a5      	str	r5, [r4, #24]
 8001120:	69a4      	ldr	r4, [r4, #24]
 8001122:	f004 0401 	and.w	r4, r4, #1
 8001126:	9401      	str	r4, [sp, #4]
 8001128:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800112a:	089d      	lsrs	r5, r3, #2
 800112c:	1cae      	adds	r6, r5, #2
 800112e:	4c42      	ldr	r4, [pc, #264]	; (8001238 <HAL_GPIO_Init+0x188>)
 8001130:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001134:	f003 0603 	and.w	r6, r3, #3
 8001138:	00b6      	lsls	r6, r6, #2
 800113a:	270f      	movs	r7, #15
 800113c:	40b7      	lsls	r7, r6
 800113e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001142:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001146:	d06c      	beq.n	8001222 <HAL_GPIO_Init+0x172>
 8001148:	4f3c      	ldr	r7, [pc, #240]	; (800123c <HAL_GPIO_Init+0x18c>)
 800114a:	42b8      	cmp	r0, r7
 800114c:	d06b      	beq.n	8001226 <HAL_GPIO_Init+0x176>
 800114e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001152:	42b8      	cmp	r0, r7
 8001154:	d069      	beq.n	800122a <HAL_GPIO_Init+0x17a>
 8001156:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800115a:	42b8      	cmp	r0, r7
 800115c:	d05f      	beq.n	800121e <HAL_GPIO_Init+0x16e>
 800115e:	2705      	movs	r7, #5
 8001160:	fa07 f606 	lsl.w	r6, r7, r6
 8001164:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001166:	3502      	adds	r5, #2
 8001168:	4e33      	ldr	r6, [pc, #204]	; (8001238 <HAL_GPIO_Init+0x188>)
 800116a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116e:	4c34      	ldr	r4, [pc, #208]	; (8001240 <HAL_GPIO_Init+0x190>)
 8001170:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001172:	43d4      	mvns	r4, r2
 8001174:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001178:	684f      	ldr	r7, [r1, #4]
 800117a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800117e:	d001      	beq.n	8001184 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001180:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001184:	4d2e      	ldr	r5, [pc, #184]	; (8001240 <HAL_GPIO_Init+0x190>)
 8001186:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001188:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800118a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	684f      	ldr	r7, [r1, #4]
 8001190:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001194:	d001      	beq.n	800119a <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001196:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800119a:	4d29      	ldr	r5, [pc, #164]	; (8001240 <HAL_GPIO_Init+0x190>)
 800119c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	684f      	ldr	r7, [r1, #4]
 80011a6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80011aa:	d001      	beq.n	80011b0 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 80011ac:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80011b0:	4d23      	ldr	r5, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x190>)
 80011b2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80011b4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	684e      	ldr	r6, [r1, #4]
 80011ba:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80011be:	d001      	beq.n	80011c4 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80011c0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80011c4:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <HAL_GPIO_Init+0x190>)
 80011c6:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80011c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011ca:	680a      	ldr	r2, [r1, #0]
 80011cc:	fa32 f403 	lsrs.w	r4, r2, r3
 80011d0:	d02d      	beq.n	800122e <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011d2:	2501      	movs	r5, #1
 80011d4:	409d      	lsls	r5, r3
    if(iocurrent)
 80011d6:	402a      	ands	r2, r5
 80011d8:	d0f6      	beq.n	80011c8 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	684c      	ldr	r4, [r1, #4]
 80011dc:	2c02      	cmp	r4, #2
 80011de:	f43f af6b 	beq.w	80010b8 <HAL_GPIO_Init+0x8>
 80011e2:	2c12      	cmp	r4, #18
 80011e4:	f43f af68 	beq.w	80010b8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80011e8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011ee:	2403      	movs	r4, #3
 80011f0:	fa04 f40e 	lsl.w	r4, r4, lr
 80011f4:	43e4      	mvns	r4, r4
 80011f6:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	684f      	ldr	r7, [r1, #4]
 80011fa:	f007 0703 	and.w	r7, r7, #3
 80011fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8001202:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001204:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001206:	684e      	ldr	r6, [r1, #4]
 8001208:	1e77      	subs	r7, r6, #1
 800120a:	2f01      	cmp	r7, #1
 800120c:	f67f af68 	bls.w	80010e0 <HAL_GPIO_Init+0x30>
 8001210:	2e11      	cmp	r6, #17
 8001212:	f43f af65 	beq.w	80010e0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001216:	2e12      	cmp	r6, #18
 8001218:	f47f af72 	bne.w	8001100 <HAL_GPIO_Init+0x50>
 800121c:	e760      	b.n	80010e0 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800121e:	2703      	movs	r7, #3
 8001220:	e79e      	b.n	8001160 <HAL_GPIO_Init+0xb0>
 8001222:	2700      	movs	r7, #0
 8001224:	e79c      	b.n	8001160 <HAL_GPIO_Init+0xb0>
 8001226:	2701      	movs	r7, #1
 8001228:	e79a      	b.n	8001160 <HAL_GPIO_Init+0xb0>
 800122a:	2702      	movs	r7, #2
 800122c:	e798      	b.n	8001160 <HAL_GPIO_Init+0xb0>
  }
}
 800122e:	b003      	add	sp, #12
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	b90a      	cbnz	r2, 800124a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001246:	6281      	str	r1, [r0, #40]	; 0x28
 8001248:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124a:	6181      	str	r1, [r0, #24]
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	6803      	ldr	r3, [r0, #0]
 8001258:	f013 0f01 	tst.w	r3, #1
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800125e:	4bb5      	ldr	r3, [pc, #724]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d046      	beq.n	80012f8 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800126a:	4bb2      	ldr	r3, [pc, #712]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d03b      	beq.n	80012ee <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001276:	6863      	ldr	r3, [r4, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	f000 808e 	beq.w	800139c <HAL_RCC_OscConfig+0x14c>
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 8091 	bne.w	80013a8 <HAL_RCC_OscConfig+0x158>
 8001286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800128a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800129c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800129e:	4aa5      	ldr	r2, [pc, #660]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80012a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012a2:	f023 030f 	bic.w	r3, r3, #15
 80012a6:	68a1      	ldr	r1, [r4, #8]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8094 	beq.w	80013dc <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7fe ffb8 	bl	8000228 <HAL_GetTick>
 80012b8:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012be:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b9c      	ldr	r3, [pc, #624]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	4219      	tst	r1, r3
 80012de:	d122      	bne.n	8001326 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7fe ffa2 	bl	8000228 <HAL_GetTick>
 80012e4:	1b40      	subs	r0, r0, r5
 80012e6:	2864      	cmp	r0, #100	; 0x64
 80012e8:	d9e7      	bls.n	80012ba <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80012ea:	2003      	movs	r0, #3
 80012ec:	e2ab      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ee:	4b91      	ldr	r3, [pc, #580]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012f6:	d0be      	beq.n	8001276 <HAL_RCC_OscConfig+0x26>
 80012f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b8c      	ldr	r3, [pc, #560]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	4219      	tst	r1, r3
 800131c:	d003      	beq.n	8001326 <HAL_RCC_OscConfig+0xd6>
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8289 	beq.w	8001838 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f013 0f02 	tst.w	r3, #2
 800132c:	f000 809c 	beq.w	8001468 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001330:	4b80      	ldr	r3, [pc, #512]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f013 0f0c 	tst.w	r3, #12
 8001338:	d072      	beq.n	8001420 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133a:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d067      	beq.n	8001416 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001346:	6923      	ldr	r3, [r4, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80cb 	beq.w	80014e4 <HAL_RCC_OscConfig+0x294>
 800134e:	2201      	movs	r2, #1
 8001350:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7fe ff60 	bl	8000228 <HAL_GetTick>
 8001368:	4605      	mov	r5, r0
 800136a:	2302      	movs	r3, #2
 800136c:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	2302      	movs	r3, #2
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2201      	movs	r2, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	4219      	tst	r1, r3
 800138a:	f040 809c 	bne.w	80014c6 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7fe ff4b 	bl	8000228 <HAL_GetTick>
 8001392:	1b40      	subs	r0, r0, r5
 8001394:	2802      	cmp	r0, #2
 8001396:	d9e8      	bls.n	800136a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001398:	2003      	movs	r0, #3
 800139a:	e254      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	4a65      	ldr	r2, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 800139e:	6813      	ldr	r3, [r2, #0]
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e77a      	b.n	800129e <HAL_RCC_OscConfig+0x4e>
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d009      	beq.n	80013c2 <HAL_RCC_OscConfig+0x172>
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e76d      	b.n	800129e <HAL_RCC_OscConfig+0x4e>
 80013c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013c6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e760      	b.n	800129e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80013dc:	f7fe ff24 	bl	8000228 <HAL_GetTick>
 80013e0:	4605      	mov	r5, r0
 80013e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	4219      	tst	r1, r3
 8001406:	d08e      	beq.n	8001326 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7fe ff0e 	bl	8000228 <HAL_GetTick>
 800140c:	1b40      	subs	r0, r0, r5
 800140e:	2864      	cmp	r0, #100	; 0x64
 8001410:	d9e7      	bls.n	80013e2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e217      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800141e:	d192      	bne.n	8001346 <HAL_RCC_OscConfig+0xf6>
 8001420:	2302      	movs	r3, #2
 8001422:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	2302      	movs	r3, #2
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2201      	movs	r2, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	4219      	tst	r1, r3
 8001440:	d004      	beq.n	800144c <HAL_RCC_OscConfig+0x1fc>
 8001442:	6923      	ldr	r3, [r4, #16]
 8001444:	4293      	cmp	r3, r2
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
 800144a:	e1fc      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4839      	ldr	r0, [pc, #228]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 800144e:	6803      	ldr	r3, [r0, #0]
 8001450:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001454:	6961      	ldr	r1, [r4, #20]
 8001456:	22f8      	movs	r2, #248	; 0xf8
 8001458:	fa92 f2a2 	rbit	r2, r2
 800145c:	fab2 f282 	clz	r2, r2
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	4313      	orrs	r3, r2
 8001466:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	f013 0f08 	tst.w	r3, #8
 800146e:	f000 808d 	beq.w	800158c <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	69a3      	ldr	r3, [r4, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d061      	beq.n	800153c <HAL_RCC_OscConfig+0x2ec>
 8001478:	2101      	movs	r1, #1
 800147a:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	fab2 f282 	clz	r2, r2
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x2e8>)
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7fe fecd 	bl	8000228 <HAL_GetTick>
 800148e:	4605      	mov	r5, r0
 8001490:	2302      	movs	r3, #2
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80014a0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2201      	movs	r2, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	4219      	tst	r1, r3
 80014b6:	d169      	bne.n	800158c <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7fe feb6 	bl	8000228 <HAL_GetTick>
 80014bc:	1b40      	subs	r0, r0, r5
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9e6      	bls.n	8001490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e1bf      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 80014c8:	6803      	ldr	r3, [r0, #0]
 80014ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014ce:	6961      	ldr	r1, [r4, #20]
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	fa92 f2a2 	rbit	r2, r2
 80014d6:	fab2 f282 	clz	r2, r2
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	4313      	orrs	r3, r2
 80014e0:	6003      	str	r3, [r0, #0]
 80014e2:	e7c1      	b.n	8001468 <HAL_RCC_OscConfig+0x218>
 80014e4:	2301      	movs	r3, #1
 80014e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014fc:	f7fe fe94 	bl	8000228 <HAL_GetTick>
 8001500:	4605      	mov	r5, r0
 8001502:	2302      	movs	r3, #2
 8001504:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RCC_OscConfig+0x2e4>)
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	2302      	movs	r3, #2
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2201      	movs	r2, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	4219      	tst	r1, r3
 8001522:	d0a1      	beq.n	8001468 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001524:	f7fe fe80 	bl	8000228 <HAL_GetTick>
 8001528:	1b40      	subs	r0, r0, r5
 800152a:	2802      	cmp	r0, #2
 800152c:	d9e9      	bls.n	8001502 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800152e:	2003      	movs	r0, #3
 8001530:	e189      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	10908120 	.word	0x10908120
 800153c:	2201      	movs	r2, #1
 800153e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	4bc1      	ldr	r3, [pc, #772]	; (800184c <HAL_RCC_OscConfig+0x5fc>)
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7fe fe6a 	bl	8000228 <HAL_GetTick>
 8001554:	4605      	mov	r5, r0
 8001556:	2302      	movs	r3, #2
 8001558:	fa93 f2a3 	rbit	r2, r3
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4aba      	ldr	r2, [pc, #744]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001566:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2201      	movs	r2, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	4219      	tst	r1, r3
 800157c:	d006      	beq.n	800158c <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7fe fe53 	bl	8000228 <HAL_GetTick>
 8001582:	1b40      	subs	r0, r0, r5
 8001584:	2802      	cmp	r0, #2
 8001586:	d9e6      	bls.n	8001556 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001588:	2003      	movs	r0, #3
 800158a:	e15c      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f013 0f04 	tst.w	r3, #4
 8001592:	f000 80b3 	beq.w	80016fc <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4bae      	ldr	r3, [pc, #696]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800159e:	d126      	bne.n	80015ee <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4bab      	ldr	r3, [pc, #684]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015a8:	61da      	str	r2, [r3, #28]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015b4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4ba7      	ldr	r3, [pc, #668]	; (8001854 <HAL_RCC_OscConfig+0x604>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015be:	d018      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	68e3      	ldr	r3, [r4, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d029      	beq.n	800161a <HAL_RCC_OscConfig+0x3ca>
 80015c6:	bb73      	cbnz	r3, 8001626 <HAL_RCC_OscConfig+0x3d6>
 80015c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	621a      	str	r2, [r3, #32]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e0:	68e3      	ldr	r3, [r4, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d05d      	beq.n	80016a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7fe fe1f 	bl	8000228 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	e047      	b.n	800167e <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2500      	movs	r5, #0
 80015f0:	e7e1      	b.n	80015b6 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4a98      	ldr	r2, [pc, #608]	; (8001854 <HAL_RCC_OscConfig+0x604>)
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015fc:	f7fe fe14 	bl	8000228 <HAL_GetTick>
 8001600:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b94      	ldr	r3, [pc, #592]	; (8001854 <HAL_RCC_OscConfig+0x604>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800160a:	d1d9      	bne.n	80015c0 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160c:	f7fe fe0c 	bl	8000228 <HAL_GetTick>
 8001610:	1b80      	subs	r0, r0, r6
 8001612:	2864      	cmp	r0, #100	; 0x64
 8001614:	d9f5      	bls.n	8001602 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8001616:	2003      	movs	r0, #3
 8001618:	e115      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	4a8d      	ldr	r2, [pc, #564]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 800161c:	6a13      	ldr	r3, [r2, #32]
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e7dc      	b.n	80015e0 <HAL_RCC_OscConfig+0x390>
 8001626:	2b05      	cmp	r3, #5
 8001628:	d009      	beq.n	800163e <HAL_RCC_OscConfig+0x3ee>
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	621a      	str	r2, [r3, #32]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	e7d0      	b.n	80015e0 <HAL_RCC_OscConfig+0x390>
 800163e:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	f042 0204 	orr.w	r2, r2, #4
 8001646:	621a      	str	r2, [r3, #32]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	621a      	str	r2, [r3, #32]
 8001650:	e7c6      	b.n	80015e0 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001654:	6a19      	ldr	r1, [r3, #32]
 8001656:	2302      	movs	r3, #2
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2201      	movs	r2, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	4219      	tst	r1, r3
 800166c:	d145      	bne.n	80016fa <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7fe fddb 	bl	8000228 <HAL_GetTick>
 8001672:	1b80      	subs	r0, r0, r6
 8001674:	f241 3388 	movw	r3, #5000	; 0x1388
 8001678:	4298      	cmp	r0, r3
 800167a:	f200 80df 	bhi.w	800183c <HAL_RCC_OscConfig+0x5ec>
 800167e:	2302      	movs	r3, #2
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d0dd      	beq.n	8001652 <HAL_RCC_OscConfig+0x402>
 8001696:	2302      	movs	r3, #2
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 800169e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016a0:	e7d9      	b.n	8001656 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7fe fdc1 	bl	8000228 <HAL_GetTick>
 80016a6:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x486>
 80016aa:	4b69      	ldr	r3, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 80016ac:	6a19      	ldr	r1, [r3, #32]
 80016ae:	2302      	movs	r3, #2
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	2201      	movs	r2, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	4219      	tst	r1, r3
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7fe fdaf 	bl	8000228 <HAL_GetTick>
 80016ca:	1b80      	subs	r0, r0, r6
 80016cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80016d0:	4298      	cmp	r0, r3
 80016d2:	f200 80b5 	bhi.w	8001840 <HAL_RCC_OscConfig+0x5f0>
 80016d6:	2302      	movs	r3, #2
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d0dd      	beq.n	80016aa <HAL_RCC_OscConfig+0x45a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 80016f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016f8:	e7d9      	b.n	80016ae <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016fa:	bbb5      	cbnz	r5, 800176a <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	69e3      	ldr	r3, [r4, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80a0 	beq.w	8001844 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001706:	6852      	ldr	r2, [r2, #4]
 8001708:	f002 020c 	and.w	r2, r2, #12
 800170c:	2a08      	cmp	r2, #8
 800170e:	f000 80a3 	beq.w	8001858 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	2b02      	cmp	r3, #2
 8001714:	d02f      	beq.n	8001776 <HAL_RCC_OscConfig+0x526>
 8001716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001726:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7fe fd7a 	bl	8000228 <HAL_GetTick>
 8001734:	4604      	mov	r4, r0
 8001736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2201      	movs	r2, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	4219      	tst	r1, r3
 800175a:	d06b      	beq.n	8001834 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7fe fd64 	bl	8000228 <HAL_GetTick>
 8001760:	1b00      	subs	r0, r0, r4
 8001762:	2802      	cmp	r0, #2
 8001764:	d9e7      	bls.n	8001736 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	e06d      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	4a39      	ldr	r2, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 800176c:	69d3      	ldr	r3, [r2, #28]
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	e7c2      	b.n	80016fc <HAL_RCC_OscConfig+0x4ac>
 8001776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001790:	f7fe fd4a 	bl	8000228 <HAL_GetTick>
 8001794:	4605      	mov	r5, r0
 8001796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	2201      	movs	r2, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	4219      	tst	r1, r3
 80017ba:	d006      	beq.n	80017ca <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017bc:	f7fe fd34 	bl	8000228 <HAL_GetTick>
 80017c0:	1b40      	subs	r0, r0, r5
 80017c2:	2802      	cmp	r0, #2
 80017c4:	d9e7      	bls.n	8001796 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 80017c6:	2003      	movs	r0, #3
 80017c8:	e03d      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ca:	4921      	ldr	r1, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 80017cc:	684b      	ldr	r3, [r1, #4]
 80017ce:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80017d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017d4:	6a20      	ldr	r0, [r4, #32]
 80017d6:	4302      	orrs	r2, r0
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017f6:	f7fe fd17 	bl	8000228 <HAL_GetTick>
 80017fa:	4604      	mov	r4, r0
 80017fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001800:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_OscConfig+0x600>)
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2201      	movs	r2, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	4219      	tst	r1, r3
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe fd01 	bl	8000228 <HAL_GetTick>
 8001826:	1b00      	subs	r0, r0, r4
 8001828:	2802      	cmp	r0, #2
 800182a:	d9e7      	bls.n	80017fc <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 800182c:	2003      	movs	r0, #3
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
 8001834:	2000      	movs	r0, #0
 8001836:	e006      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
 800183a:	e004      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800183c:	2003      	movs	r0, #3
 800183e:	e002      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001840:	2003      	movs	r0, #3
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001844:	2000      	movs	r0, #0
}
 8001846:	b002      	add	sp, #8
 8001848:	bd70      	pop	{r4, r5, r6, pc}
 800184a:	bf00      	nop
 800184c:	10908120 	.word	0x10908120
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e7f4      	b.n	8001846 <HAL_RCC_OscConfig+0x5f6>

0800185c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800185e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001860:	f003 020c 	and.w	r2, r3, #12
 8001864:	2a08      	cmp	r2, #8
 8001866:	d124      	bne.n	80018b2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001868:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 800186c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001870:	fa92 f2a2 	rbit	r2, r2
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	fa21 f202 	lsr.w	r2, r1, r2
 800187c:	490f      	ldr	r1, [pc, #60]	; (80018bc <HAL_RCC_GetSysClockFreq+0x60>)
 800187e:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001884:	f002 020f 	and.w	r2, r2, #15
 8001888:	210f      	movs	r1, #15
 800188a:	fa91 f1a1 	rbit	r1, r1
 800188e:	fab1 f181 	clz	r1, r1
 8001892:	40ca      	lsrs	r2, r1
 8001894:	490a      	ldr	r1, [pc, #40]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001896:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001898:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800189c:	d103      	bne.n	80018a6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x68>)
 80018a0:	fb03 f000 	mul.w	r0, r3, r0
 80018a4:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x6c>)
 80018a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ac:	fb03 f000 	mul.w	r0, r3, r0
 80018b0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	08003080 	.word	0x08003080
 80018c0:	08003090 	.word	0x08003090
 80018c4:	003d0900 	.word	0x003d0900
 80018c8:	007a1200 	.word	0x007a1200

080018cc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018cc:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d20c      	bcs.n	80018f2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d8:	4a6d      	ldr	r2, [pc, #436]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	f023 0307 	bic.w	r3, r3, #7
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	4299      	cmp	r1, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	4770      	bx	lr
{
 80018f2:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	f013 0f02 	tst.w	r3, #2
 80018fa:	d006      	beq.n	800190a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fc:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	6853      	ldr	r3, [r2, #4]
 8001900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001904:	6884      	ldr	r4, [r0, #8]
 8001906:	4323      	orrs	r3, r4
 8001908:	6053      	str	r3, [r2, #4]
 800190a:	460d      	mov	r5, r1
 800190c:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190e:	6803      	ldr	r3, [r0, #0]
 8001910:	f013 0f01 	tst.w	r3, #1
 8001914:	d07a      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	6843      	ldr	r3, [r0, #4]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d02f      	beq.n	800197c <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191c:	2b02      	cmp	r3, #2
 800191e:	d042      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xda>
 8001920:	2202      	movs	r2, #2
 8001922:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4a5b      	ldr	r2, [pc, #364]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	6810      	ldr	r0, [r2, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	fa92 f2a2 	rbit	r2, r2
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4210      	tst	r0, r2
 8001940:	f000 80a4 	beq.w	8001a8c <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001944:	4953      	ldr	r1, [pc, #332]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	684a      	ldr	r2, [r1, #4]
 8001948:	f022 0203 	bic.w	r2, r2, #3
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001950:	f7fe fc6a 	bl	8000228 <HAL_GetTick>
 8001954:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d039      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195c:	2b02      	cmp	r3, #2
 800195e:	d046      	beq.n	80019ee <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f013 0f0c 	tst.w	r3, #12
 8001968:	d050      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7fe fc5d 	bl	8000228 <HAL_GetTick>
 800196e:	1b80      	subs	r0, r0, r6
 8001970:	f241 3388 	movw	r3, #5000	; 0x1388
 8001974:	4298      	cmp	r0, r3
 8001976:	d9f3      	bls.n	8001960 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001978:	2003      	movs	r0, #3
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001980:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001984:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	6810      	ldr	r0, [r2, #0]
 8001988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	4210      	tst	r0, r2
 80019a0:	d1d0      	bne.n	8001944 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	4a39      	ldr	r2, [pc, #228]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	6810      	ldr	r0, [r2, #0]
 80019b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4210      	tst	r0, r2
 80019ca:	d1bb      	bne.n	8001944 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d017      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7fe fc24 	bl	8000228 <HAL_GetTick>
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d9f2      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7fe fc15 	bl	8000228 <HAL_GetTick>
 80019fe:	1b80      	subs	r0, r0, r6
 8001a00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d9f2      	bls.n	80019ee <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8001a08:	2003      	movs	r0, #3
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	429d      	cmp	r5, r3
 8001a16:	d20c      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f023 0307 	bic.w	r3, r3, #7
 8001a20:	432b      	orrs	r3, r5
 8001a22:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	429d      	cmp	r5, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
}
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	f013 0f04 	tst.w	r3, #4
 8001a38:	d006      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	6853      	ldr	r3, [r2, #4]
 8001a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a42:	68e1      	ldr	r1, [r4, #12]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	f013 0f08 	tst.w	r3, #8
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a50:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a58:	6921      	ldr	r1, [r4, #16]
 8001a5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a5e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a60:	f7ff fefc 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6c:	22f0      	movs	r2, #240	; 0xf0
 8001a6e:	fa92 f2a2 	rbit	r2, r2
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	40d3      	lsrs	r3, r2
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	40d8      	lsrs	r0, r3
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7fe fba0 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001a88:	2000      	movs	r0, #0
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	080030a0 	.word	0x080030a0
 8001a9c:	20000038 	.word	0x20000038

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001aa0:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000038 	.word	0x20000038

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001aae:	f7ff fff7 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	fab2 f282 	clz	r2, r2
 8001ac6:	40d3      	lsrs	r3, r2
 8001ac8:	4a02      	ldr	r2, [pc, #8]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001acc:	40d8      	lsrs	r0, r3
 8001ace:	bd08      	pop	{r3, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	080030b0 	.word	0x080030b0

08001ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ada:	f7ff ffe1 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ae6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	40d3      	lsrs	r3, r2
 8001af4:	4a02      	ldr	r2, [pc, #8]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001af8:	40d8      	lsrs	r0, r3
 8001afa:	bd08      	pop	{r3, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080030b0 	.word	0x080030b0

08001b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b0a:	6803      	ldr	r3, [r0, #0]
 8001b0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b10:	d044      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b12:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b1a:	d179      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b61      	ldr	r3, [pc, #388]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b1e:	69da      	ldr	r2, [r3, #28]
 8001b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b24:	61da      	str	r2, [r3, #28]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b30:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b3a:	d06b      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b40:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b44:	d021      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001b46:	6862      	ldr	r2, [r4, #4]
 8001b48:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d01c      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b50:	4854      	ldr	r0, [pc, #336]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b52:	6a01      	ldr	r1, [r0, #32]
 8001b54:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	4f51      	ldr	r7, [pc, #324]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b66:	443a      	add	r2, r7
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	f04f 0e01 	mov.w	lr, #1
 8001b6e:	f8c2 e000 	str.w	lr, [r2]
 8001b72:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	443b      	add	r3, r7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b82:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b84:	f011 0f01 	tst.w	r1, #1
 8001b88:	d158      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b8a:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b8c:	6a13      	ldr	r3, [r2, #32]
 8001b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b92:	6861      	ldr	r1, [r4, #4]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d17a      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	f013 0f01 	tst.w	r3, #1
 8001ba2:	d006      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba4:	4a3f      	ldr	r2, [pc, #252]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ba6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	68a1      	ldr	r1, [r4, #8]
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f013 0f20 	tst.w	r3, #32
 8001bb8:	d006      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bba:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bbe:	f023 0310 	bic.w	r3, r3, #16
 8001bc2:	68e1      	ldr	r1, [r4, #12]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bce:	d006      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001bd0:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bd4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001bd8:	6921      	ldr	r1, [r4, #16]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001be4:	d006      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001be6:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001be8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bee:	6961      	ldr	r1, [r4, #20]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001bfa:	d051      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c04:	69a1      	ldr	r1, [r4, #24]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c0a:	2000      	movs	r0, #0
}
 8001c0c:	b003      	add	sp, #12
 8001c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	2500      	movs	r5, #0
 8001c12:	e78e      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fb03 	bl	8000228 <HAL_GetTick>
 8001c22:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c2c:	d186      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7fe fafb 	bl	8000228 <HAL_GetTick>
 8001c32:	1b80      	subs	r0, r0, r6
 8001c34:	2864      	cmp	r0, #100	; 0x64
 8001c36:	d9f5      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e7e7      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001c3c:	f7fe faf4 	bl	8000228 <HAL_GetTick>
 8001c40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	e014      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2201      	movs	r2, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	4219      	tst	r1, r3
 8001c5e:	d194      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe fae2 	bl	8000228 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c6a:	4298      	cmp	r0, r3
 8001c6c:	d816      	bhi.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d0de      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001c86:	2302      	movs	r3, #2
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c90:	e7da      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	69d3      	ldr	r3, [r2, #28]
 8001c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	e77f      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	e7b5      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e7b3      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	10908100 	.word	0x10908100

08001cb0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb0:	6802      	ldr	r2, [r0, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cb8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001cca:	4770      	bx	lr

08001ccc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ccc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	d047      	beq.n	8001d6e <HAL_UART_Receive_IT+0xa2>
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d047      	beq.n	8001d72 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8001ce2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d045      	beq.n	8001d76 <HAL_UART_Receive_IT+0xaa>
 8001cea:	2301      	movs	r3, #1
 8001cec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8001cf0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8001cf2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001cf6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001cfa:	6883      	ldr	r3, [r0, #8]
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d006      	beq.n	8001d10 <HAL_UART_Receive_IT+0x44>
 8001d02:	b9a3      	cbnz	r3, 8001d2e <HAL_UART_Receive_IT+0x62>
 8001d04:	6903      	ldr	r3, [r0, #16]
 8001d06:	b973      	cbnz	r3, 8001d26 <HAL_UART_Receive_IT+0x5a>
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d0e:	e011      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
 8001d10:	6903      	ldr	r3, [r0, #16]
 8001d12:	b923      	cbnz	r3, 8001d1e <HAL_UART_Receive_IT+0x52>
 8001d14:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d18:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d1c:	e00a      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
 8001d1e:	23ff      	movs	r3, #255	; 0xff
 8001d20:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d24:	e006      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
 8001d26:	237f      	movs	r3, #127	; 0x7f
 8001d28:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d2c:	e002      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
 8001d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d32:	d012      	beq.n	8001d5a <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d38:	2222      	movs	r2, #34	; 0x22
 8001d3a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8001d3e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d42:	6801      	ldr	r1, [r0, #0]
 8001d44:	688a      	ldr	r2, [r1, #8]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d4c:	6801      	ldr	r1, [r0, #0]
 8001d4e:	680a      	ldr	r2, [r1, #0]
 8001d50:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001d54:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8001d56:	4618      	mov	r0, r3
 8001d58:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001d5a:	6903      	ldr	r3, [r0, #16]
 8001d5c:	b91b      	cbnz	r3, 8001d66 <HAL_UART_Receive_IT+0x9a>
 8001d5e:	237f      	movs	r3, #127	; 0x7f
 8001d60:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d64:	e7e6      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
 8001d66:	233f      	movs	r3, #63	; 0x3f
 8001d68:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d6c:	e7e2      	b.n	8001d34 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
 8001d70:	4770      	bx	lr
 8001d72:	2001      	movs	r0, #1
 8001d74:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001d76:	2002      	movs	r0, #2
}
 8001d78:	4770      	bx	lr

08001d7a <HAL_UART_TxCpltCallback>:
{
 8001d7a:	4770      	bx	lr

08001d7c <HAL_UART_RxCpltCallback>:
{
 8001d7c:	4770      	bx	lr

08001d7e <HAL_UART_ErrorCallback>:
{
 8001d7e:	4770      	bx	lr

08001d80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d80:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001d82:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001d8a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001d8e:	f7ff fff6 	bl	8001d7e <HAL_UART_ErrorCallback>
 8001d92:	bd08      	pop	{r3, pc}

08001d94 <UART_SetConfig>:
{
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d98:	6883      	ldr	r3, [r0, #8]
 8001d9a:	6902      	ldr	r2, [r0, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	6942      	ldr	r2, [r0, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	69c2      	ldr	r2, [r0, #28]
 8001da4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001da6:	6801      	ldr	r1, [r0, #0]
 8001da8:	6808      	ldr	r0, [r1, #0]
 8001daa:	4a64      	ldr	r2, [pc, #400]	; (8001f3c <UART_SetConfig+0x1a8>)
 8001dac:	4002      	ands	r2, r0
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	6853      	ldr	r3, [r2, #4]
 8001db6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dba:	68e1      	ldr	r1, [r4, #12]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001dc0:	69a3      	ldr	r3, [r4, #24]
 8001dc2:	6a22      	ldr	r2, [r4, #32]
 8001dc4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001dc6:	6821      	ldr	r1, [r4, #0]
 8001dc8:	688a      	ldr	r2, [r1, #8]
 8001dca:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dd2:	6825      	ldr	r5, [r4, #0]
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <UART_SetConfig+0x1ac>)
 8001dd6:	429d      	cmp	r5, r3
 8001dd8:	d015      	beq.n	8001e06 <UART_SetConfig+0x72>
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <UART_SetConfig+0x1b0>)
 8001ddc:	429d      	cmp	r5, r3
 8001dde:	d029      	beq.n	8001e34 <UART_SetConfig+0xa0>
 8001de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de4:	429d      	cmp	r5, r3
 8001de6:	d021      	beq.n	8001e2c <UART_SetConfig+0x98>
 8001de8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dea:	69e2      	ldr	r2, [r4, #28]
 8001dec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001df0:	d022      	beq.n	8001e38 <UART_SetConfig+0xa4>
    switch (clocksource)
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	f200 809f 	bhi.w	8001f36 <UART_SetConfig+0x1a2>
 8001df8:	e8df f003 	tbb	[pc, r3]
 8001dfc:	9d7c7166 	.word	0x9d7c7166
 8001e00:	9d9d9d88 	.word	0x9d9d9d88
 8001e04:	93          	.byte	0x93
 8001e05:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e06:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d809      	bhi.n	8001e28 <UART_SetConfig+0x94>
 8001e14:	e8df f003 	tbb	[pc, r3]
 8001e18:	0c060402 	.word	0x0c060402
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e7e4      	b.n	8001dea <UART_SetConfig+0x56>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e7e2      	b.n	8001dea <UART_SetConfig+0x56>
 8001e24:	2308      	movs	r3, #8
 8001e26:	e7e0      	b.n	8001dea <UART_SetConfig+0x56>
 8001e28:	2310      	movs	r3, #16
 8001e2a:	e7de      	b.n	8001dea <UART_SetConfig+0x56>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e7dc      	b.n	8001dea <UART_SetConfig+0x56>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e7da      	b.n	8001dea <UART_SetConfig+0x56>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e7d8      	b.n	8001dea <UART_SetConfig+0x56>
    switch (clocksource)
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d842      	bhi.n	8001ec2 <UART_SetConfig+0x12e>
 8001e3c:	e8df f003 	tbb	[pc, r3]
 8001e40:	41221705 	.word	0x41221705
 8001e44:	4141412d 	.word	0x4141412d
 8001e48:	38          	.byte	0x38
 8001e49:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e4a:	f7ff fe2f 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	0853      	lsrs	r3, r2, #1
 8001e52:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e5a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e5c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001e5e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e62:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001e66:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	60d3      	str	r3, [r2, #12]
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e6e:	f7ff fe33 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 8001e72:	6862      	ldr	r2, [r4, #4]
 8001e74:	0853      	lsrs	r3, r2, #1
 8001e76:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e7e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e80:	2000      	movs	r0, #0
        break;
 8001e82:	e7ec      	b.n	8001e5e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e84:	6862      	ldr	r2, [r4, #4]
 8001e86:	0853      	lsrs	r3, r2, #1
 8001e88:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001e8c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e94:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e96:	2000      	movs	r0, #0
        break;
 8001e98:	e7e1      	b.n	8001e5e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e9a:	f7ff fcdf 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001e9e:	6862      	ldr	r2, [r4, #4]
 8001ea0:	0853      	lsrs	r3, r2, #1
 8001ea2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eaa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eac:	2000      	movs	r0, #0
        break;
 8001eae:	e7d6      	b.n	8001e5e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eb0:	6862      	ldr	r2, [r4, #4]
 8001eb2:	0853      	lsrs	r3, r2, #1
 8001eb4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ebc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ebe:	2000      	movs	r0, #0
        break;
 8001ec0:	e7cd      	b.n	8001e5e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e7ca      	b.n	8001e5e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ec8:	f7ff fdf0 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8001ecc:	6863      	ldr	r3, [r4, #4]
 8001ece:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ed2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed6:	b280      	uxth	r0, r0
 8001ed8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eda:	2000      	movs	r0, #0
        break;
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ede:	f7ff fdfb 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 8001ee2:	6863      	ldr	r3, [r4, #4]
 8001ee4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ee8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eec:	b280      	uxth	r0, r0
 8001eee:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ef0:	2000      	movs	r0, #0
        break;
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ef4:	6862      	ldr	r2, [r4, #4]
 8001ef6:	0853      	lsrs	r3, r2, #1
 8001ef8:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001efc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f08:	2000      	movs	r0, #0
        break;
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f0c:	f7ff fca6 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001f10:	6863      	ldr	r3, [r4, #4]
 8001f12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f1a:	b280      	uxth	r0, r0
 8001f1c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f1e:	2000      	movs	r0, #0
        break;
 8001f20:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f22:	6862      	ldr	r2, [r4, #4]
 8001f24:	0853      	lsrs	r3, r2, #1
 8001f26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f32:	2000      	movs	r0, #0
        break;
 8001f34:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
}
 8001f38:	bd38      	pop	{r3, r4, r5, pc}
 8001f3a:	bf00      	nop
 8001f3c:	efff69f3 	.word	0xefff69f3
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40004400 	.word	0x40004400

08001f48 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f4a:	f013 0f01 	tst.w	r3, #1
 8001f4e:	d006      	beq.n	8001f5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f58:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f60:	f013 0f02 	tst.w	r3, #2
 8001f64:	d006      	beq.n	8001f74 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f66:	6802      	ldr	r2, [r0, #0]
 8001f68:	6853      	ldr	r3, [r2, #4]
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f70:	430b      	orrs	r3, r1
 8001f72:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f76:	f013 0f04 	tst.w	r3, #4
 8001f7a:	d006      	beq.n	8001f8a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f7c:	6802      	ldr	r2, [r0, #0]
 8001f7e:	6853      	ldr	r3, [r2, #4]
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f8c:	f013 0f08 	tst.w	r3, #8
 8001f90:	d006      	beq.n	8001fa0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f92:	6802      	ldr	r2, [r0, #0]
 8001f94:	6853      	ldr	r3, [r2, #4]
 8001f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f9a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fa2:	f013 0f10 	tst.w	r3, #16
 8001fa6:	d006      	beq.n	8001fb6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	6893      	ldr	r3, [r2, #8]
 8001fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fb8:	f013 0f20 	tst.w	r3, #32
 8001fbc:	d006      	beq.n	8001fcc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	6893      	ldr	r3, [r2, #8]
 8001fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fc6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fd2:	d00a      	beq.n	8001fea <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	6853      	ldr	r3, [r2, #4]
 8001fd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fdc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe8:	d00b      	beq.n	8002002 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ff0:	d006      	beq.n	8002000 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ff2:	6802      	ldr	r2, [r0, #0]
 8001ff4:	6853      	ldr	r3, [r2, #4]
 8001ff6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ffa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6053      	str	r3, [r2, #4]
 8002000:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002002:	6802      	ldr	r2, [r0, #0]
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800200a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800200c:	430b      	orrs	r3, r1
 800200e:	6053      	str	r3, [r2, #4]
 8002010:	e7eb      	b.n	8001fea <UART_AdvFeatureConfig+0xa2>

08002012 <UART_WaitOnFlagUntilTimeout>:
{
 8002012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	4605      	mov	r5, r0
 8002018:	460f      	mov	r7, r1
 800201a:	4616      	mov	r6, r2
 800201c:	4698      	mov	r8, r3
 800201e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	ea37 0303 	bics.w	r3, r7, r3
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	42b3      	cmp	r3, r6
 8002030:	d11e      	bne.n	8002070 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002032:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002036:	d0f3      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002038:	b12c      	cbz	r4, 8002046 <UART_WaitOnFlagUntilTimeout+0x34>
 800203a:	f7fe f8f5 	bl	8000228 <HAL_GetTick>
 800203e:	eba0 0008 	sub.w	r0, r0, r8
 8002042:	4284      	cmp	r4, r0
 8002044:	d2ec      	bcs.n	8002020 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002046:	682a      	ldr	r2, [r5, #0]
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800204e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002050:	682a      	ldr	r2, [r5, #0]
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800205a:	2320      	movs	r3, #32
 800205c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002060:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002064:	2300      	movs	r3, #0
 8002066:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800206a:	2003      	movs	r0, #3
 800206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002070:	2000      	movs	r0, #0
}
 8002072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002076 <HAL_UART_Transmit>:
{
 8002076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800207e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	d004      	beq.n	8002092 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
}
 800208a:	4618      	mov	r0, r3
 800208c:	b002      	add	sp, #8
 800208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8002098:	2900      	cmp	r1, #0
 800209a:	d04e      	beq.n	800213a <HAL_UART_Transmit+0xc4>
 800209c:	2a00      	cmp	r2, #0
 800209e:	d04e      	beq.n	800213e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80020a0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_UART_Transmit+0x36>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e7ee      	b.n	800208a <HAL_UART_Transmit+0x14>
 80020ac:	2301      	movs	r3, #1
 80020ae:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b6:	2321      	movs	r3, #33	; 0x21
 80020b8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80020bc:	f7fe f8b4 	bl	8000228 <HAL_GetTick>
 80020c0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80020c2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80020c6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	782a      	ldrb	r2, [r5, #0]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80020d2:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 80020d4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b1e3      	cbz	r3, 8002116 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80020dc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ea:	9600      	str	r6, [sp, #0]
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff ff8d 	bl	8002012 <UART_WaitOnFlagUntilTimeout>
 80020f8:	bb18      	cbnz	r0, 8002142 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fa:	68a3      	ldr	r3, [r4, #8]
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d1e4      	bne.n	80020cc <HAL_UART_Transmit+0x56>
 8002102:	6923      	ldr	r3, [r4, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e1      	bne.n	80020cc <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800210e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002112:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002114:	e7de      	b.n	80020d4 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	9600      	str	r6, [sp, #0]
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ff77 	bl	8002012 <UART_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	b108      	cbz	r0, 800212c <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e7ae      	b.n	800208a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800212c:	2220      	movs	r2, #32
 800212e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002132:	2200      	movs	r2, #0
 8002134:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8002138:	e7a7      	b.n	800208a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e7a5      	b.n	800208a <HAL_UART_Transmit+0x14>
 800213e:	2301      	movs	r3, #1
 8002140:	e7a3      	b.n	800208a <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e7a1      	b.n	800208a <HAL_UART_Transmit+0x14>

08002146 <UART_CheckIdleState>:
{
 8002146:	b530      	push	{r4, r5, lr}
 8002148:	b083      	sub	sp, #12
 800214a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214c:	2300      	movs	r3, #0
 800214e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002150:	f7fe f86a 	bl	8000228 <HAL_GetTick>
 8002154:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f013 0f08 	tst.w	r3, #8
 800215e:	d10e      	bne.n	800217e <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f013 0f04 	tst.w	r3, #4
 8002168:	d117      	bne.n	800219a <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800216a:	2320      	movs	r3, #32
 800216c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002174:	2000      	movs	r0, #0
 8002176:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800217a:	b003      	add	sp, #12
 800217c:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4603      	mov	r3, r0
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff40 	bl	8002012 <UART_WaitOnFlagUntilTimeout>
 8002192:	2800      	cmp	r0, #0
 8002194:	d0e4      	beq.n	8002160 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002196:	2003      	movs	r0, #3
 8002198:	e7ef      	b.n	800217a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800219a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	462b      	mov	r3, r5
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff ff32 	bl	8002012 <UART_WaitOnFlagUntilTimeout>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0db      	beq.n	800216a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80021b2:	2003      	movs	r0, #3
 80021b4:	e7e1      	b.n	800217a <UART_CheckIdleState+0x34>

080021b6 <HAL_UART_Init>:
  if(huart == NULL)
 80021b6:	b378      	cbz	r0, 8002218 <HAL_UART_Init+0x62>
{
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80021bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80021c0:	b30b      	cbz	r3, 8002206 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80021c2:	2324      	movs	r3, #36	; 0x24
 80021c4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80021c8:	6822      	ldr	r2, [r4, #0]
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff fdde 	bl	8001d94 <UART_SetConfig>
 80021d8:	2801      	cmp	r0, #1
 80021da:	d01f      	beq.n	800221c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021de:	b9bb      	cbnz	r3, 8002210 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	6853      	ldr	r3, [r2, #4]
 80021e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021e8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	6893      	ldr	r3, [r2, #8]
 80021ee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80021f2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ffa1 	bl	8002146 <UART_CheckIdleState>
 8002204:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002206:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800220a:	f000 fe61 	bl	8002ed0 <HAL_UART_MspInit>
 800220e:	e7d8      	b.n	80021c2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fe99 	bl	8001f48 <UART_AdvFeatureConfig>
 8002216:	e7e3      	b.n	80021e0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002218:	2001      	movs	r0, #1
 800221a:	4770      	bx	lr
}
 800221c:	bd10      	pop	{r4, pc}

0800221e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800221e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b21      	cmp	r3, #33	; 0x21
 8002226:	d001      	beq.n	800222c <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002228:	2002      	movs	r0, #2
  }
}
 800222a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800222c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002230:	b29b      	uxth	r3, r3
 8002232:	b193      	cbz	r3, 800225a <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002234:	6883      	ldr	r3, [r0, #8]
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d01a      	beq.n	8002272 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800223c:	6802      	ldr	r2, [r0, #0]
 800223e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002248:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002256:	2000      	movs	r0, #0
 8002258:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800225a:	6802      	ldr	r2, [r0, #0]
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002262:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002264:	6802      	ldr	r2, [r0, #0]
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002272:	6903      	ldr	r3, [r0, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e1      	bne.n	800223c <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002278:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002284:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002286:	3302      	adds	r3, #2
 8002288:	64c3      	str	r3, [r0, #76]	; 0x4c
 800228a:	e7dd      	b.n	8002248 <UART_Transmit_IT+0x2a>

0800228c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800228c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800228e:	6801      	ldr	r1, [r0, #0]
 8002290:	680b      	ldr	r3, [r1, #0]
 8002292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002296:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002298:	2320      	movs	r3, #32
 800229a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800229e:	f7ff fd6c 	bl	8001d7a <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80022a2:	2000      	movs	r0, #0
 80022a4:	bd08      	pop	{r3, pc}

080022a6 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80022a6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b22      	cmp	r3, #34	; 0x22
 80022b2:	d006      	beq.n	80022c2 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80022b4:	6802      	ldr	r2, [r0, #0]
 80022b6:	6993      	ldr	r3, [r2, #24]
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80022be:	2002      	movs	r0, #2
 80022c0:	4770      	bx	lr
{
 80022c2:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022c8:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ca:	6881      	ldr	r1, [r0, #8]
 80022cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80022d0:	d00f      	beq.n	80022f2 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80022d2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80022d4:	1c4c      	adds	r4, r1, #1
 80022d6:	6544      	str	r4, [r0, #84]	; 0x54
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	401a      	ands	r2, r3
 80022dc:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80022de:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80022ec:	b15b      	cbz	r3, 8002306 <UART_Receive_IT+0x60>
    return HAL_OK;
 80022ee:	2000      	movs	r0, #0
  }
}
 80022f0:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f2:	6901      	ldr	r1, [r0, #16]
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d1ec      	bne.n	80022d2 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80022f8:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80022fa:	401a      	ands	r2, r3
 80022fc:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80022fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002300:	3302      	adds	r3, #2
 8002302:	6543      	str	r3, [r0, #84]	; 0x54
 8002304:	e7eb      	b.n	80022de <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002306:	6802      	ldr	r2, [r0, #0]
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800230e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002310:	6802      	ldr	r2, [r0, #0]
 8002312:	6893      	ldr	r3, [r2, #8]
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800231a:	2320      	movs	r3, #32
 800231c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002320:	f7ff fd2c 	bl	8001d7c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002324:	2000      	movs	r0, #0
 8002326:	bd10      	pop	{r4, pc}

08002328 <HAL_UART_IRQHandler>:
{
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800232c:	6802      	ldr	r2, [r0, #0]
 800232e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002330:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002332:	f013 050f 	ands.w	r5, r3, #15
 8002336:	d105      	bne.n	8002344 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002338:	f013 0f20 	tst.w	r3, #32
 800233c:	d002      	beq.n	8002344 <HAL_UART_IRQHandler+0x1c>
 800233e:	f011 0f20 	tst.w	r1, #32
 8002342:	d160      	bne.n	8002406 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002344:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002346:	2d00      	cmp	r5, #0
 8002348:	d072      	beq.n	8002430 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800234a:	f010 0501 	ands.w	r5, r0, #1
 800234e:	d102      	bne.n	8002356 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002350:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002354:	d06c      	beq.n	8002430 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002356:	f013 0f01 	tst.w	r3, #1
 800235a:	d007      	beq.n	800236c <HAL_UART_IRQHandler+0x44>
 800235c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002360:	d004      	beq.n	800236c <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002362:	2001      	movs	r0, #1
 8002364:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002366:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002368:	4302      	orrs	r2, r0
 800236a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236c:	f013 0f02 	tst.w	r3, #2
 8002370:	d007      	beq.n	8002382 <HAL_UART_IRQHandler+0x5a>
 8002372:	b135      	cbz	r5, 8002382 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	2002      	movs	r0, #2
 8002378:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002382:	f013 0f04 	tst.w	r3, #4
 8002386:	d007      	beq.n	8002398 <HAL_UART_IRQHandler+0x70>
 8002388:	b135      	cbz	r5, 8002398 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	2004      	movs	r0, #4
 800238e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002390:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002392:	f042 0202 	orr.w	r2, r2, #2
 8002396:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002398:	f013 0f08 	tst.w	r3, #8
 800239c:	d009      	beq.n	80023b2 <HAL_UART_IRQHandler+0x8a>
 800239e:	f011 0f20 	tst.w	r1, #32
 80023a2:	d100      	bne.n	80023a6 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023a4:	b12d      	cbz	r5, 80023b2 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	2008      	movs	r0, #8
 80023aa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023ae:	4302      	orrs	r2, r0
 80023b0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d04d      	beq.n	8002454 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b8:	f013 0f20 	tst.w	r3, #32
 80023bc:	d002      	beq.n	80023c4 <HAL_UART_IRQHandler+0x9c>
 80023be:	f011 0f20 	tst.w	r1, #32
 80023c2:	d123      	bne.n	800240c <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80023c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80023c6:	f013 0f08 	tst.w	r3, #8
 80023ca:	d104      	bne.n	80023d6 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80023d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023d4:	d026      	beq.n	8002424 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff fc6a 	bl	8001cb0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023e4:	d01a      	beq.n	800241c <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ec:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80023ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023f0:	b183      	cbz	r3, 8002414 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_UART_IRQHandler+0x158>)
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023f6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80023f8:	f7fe fe34 	bl	8001064 <HAL_DMA_Abort_IT>
 80023fc:	b350      	cbz	r0, 8002454 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002400:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002402:	4798      	blx	r3
 8002404:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002406:	f7ff ff4e 	bl	80022a6 <UART_Receive_IT>
      return;
 800240a:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800240c:	4620      	mov	r0, r4
 800240e:	f7ff ff4a 	bl	80022a6 <UART_Receive_IT>
 8002412:	e7d7      	b.n	80023c4 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fcb2 	bl	8001d7e <HAL_UART_ErrorCallback>
 800241a:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fcae 	bl	8001d7e <HAL_UART_ErrorCallback>
 8002422:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002424:	4620      	mov	r0, r4
 8002426:	f7ff fcaa 	bl	8001d7e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800242e:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002434:	d002      	beq.n	800243c <HAL_UART_IRQHandler+0x114>
 8002436:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800243a:	d10c      	bne.n	8002456 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800243c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002440:	d002      	beq.n	8002448 <HAL_UART_IRQHandler+0x120>
 8002442:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002446:	d112      	bne.n	800246e <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002448:	f013 0f40 	tst.w	r3, #64	; 0x40
 800244c:	d002      	beq.n	8002454 <HAL_UART_IRQHandler+0x12c>
 800244e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002452:	d110      	bne.n	8002476 <HAL_UART_IRQHandler+0x14e>
 8002454:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002456:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800245a:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800245c:	2320      	movs	r3, #32
 800245e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002462:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002466:	4620      	mov	r0, r4
 8002468:	f000 f80c 	bl	8002484 <HAL_UARTEx_WakeupCallback>
    return;
 800246c:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fed5 	bl	800221e <UART_Transmit_IT>
    return;
 8002474:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff ff08 	bl	800228c <UART_EndTransmit_IT>
    return;
 800247c:	e7ea      	b.n	8002454 <HAL_UART_IRQHandler+0x12c>
 800247e:	bf00      	nop
 8002480:	08001d81 	.word	0x08001d81

08002484 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002484:	4770      	bx	lr
	...

08002488 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <MX_GPIO_Init+0x11c>)
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002494:	615a      	str	r2, [r3, #20]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800249c:	9201      	str	r2, [sp, #4]
 800249e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024ae:	9202      	str	r2, [sp, #8]
 80024b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024b8:	615a      	str	r2, [r3, #20]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024c0:	9203      	str	r2, [sp, #12]
 80024c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	9304      	str	r3, [sp, #16]
 80024d4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f7fe feb0 	bl	8001244 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80024e4:	4e30      	ldr	r6, [pc, #192]	; (80025a8 <MX_GPIO_Init+0x120>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80024ec:	4630      	mov	r0, r6
 80024ee:	f7fe fea9 	bl	8001244 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80024f2:	4d2e      	ldr	r5, [pc, #184]	; (80025ac <MX_GPIO_Init+0x124>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7fe fea3 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <MX_GPIO_Init+0x128>)
 8002506:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2400      	movs	r4, #0
 800250a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800250c:	a905      	add	r1, sp, #20
 800250e:	4628      	mov	r0, r5
 8002510:	f7fe fdce 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002514:	2703      	movs	r7, #3
 8002516:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002518:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	a905      	add	r1, sp, #20
 800251e:	4628      	mov	r0, r5
 8002520:	f7fe fdc6 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002524:	2313      	movs	r3, #19
 8002526:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002528:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	a905      	add	r1, sp, #20
 800252e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002532:	f7fe fdbd 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002536:	230c      	movs	r3, #12
 8002538:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002540:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002542:	2307      	movs	r3, #7
 8002544:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	a905      	add	r1, sp, #20
 8002548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254c:	f7fe fdb0 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002550:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002554:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2701      	movs	r7, #1
 8002558:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	a905      	add	r1, sp, #20
 8002560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002564:	f7fe fda4 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002568:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800256c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	a905      	add	r1, sp, #20
 8002576:	4630      	mov	r0, r6
 8002578:	f7fe fd9a 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	a905      	add	r1, sp, #20
 8002588:	4628      	mov	r0, r5
 800258a:	f7fe fd91 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800258e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002592:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002594:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	a905      	add	r1, sp, #20
 800259a:	4630      	mov	r0, r6
 800259c:	f7fe fd88 	bl	80010b0 <HAL_GPIO_Init>

}
 80025a0:	b00b      	add	sp, #44	; 0x2c
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	10210000 	.word	0x10210000

080025b4 <MX_USART1_UART_Init>:
{
 80025b4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <MX_USART1_UART_Init+0x28>)
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_USART1_UART_Init+0x2c>)
 80025ba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80025bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025c0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	2300      	movs	r3, #0
 80025c4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025c8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ca:	220c      	movs	r2, #12
 80025cc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d6:	f7ff fdee 	bl	80021b6 <HAL_UART_Init>
 80025da:	bd08      	pop	{r3, pc}
 80025dc:	20000118 	.word	0x20000118
 80025e0:	40013800 	.word	0x40013800

080025e4 <MX_ADC1_Init>:
{
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e6:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 80025e8:	4c19      	ldr	r4, [pc, #100]	; (8002650 <MX_ADC1_Init+0x6c>)
 80025ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025ee:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025f0:	2500      	movs	r5, #0
 80025f2:	6065      	str	r5, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025f4:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025f6:	2601      	movs	r6, #1
 80025f8:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025fa:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025fc:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025fe:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002600:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002602:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002604:	2702      	movs	r7, #2
 8002606:	6227      	str	r7, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002608:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800260a:	2304      	movs	r3, #4
 800260c:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800260e:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002610:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002612:	4620      	mov	r0, r4
 8002614:	f7fd ff02 	bl	800041c <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002618:	a90a      	add	r1, sp, #40	; 0x28
 800261a:	f841 5d0c 	str.w	r5, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800261e:	4620      	mov	r0, r4
 8002620:	f7fe fc08 	bl	8000e34 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8002624:	2308      	movs	r3, #8
 8002626:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
 8002628:	9602      	str	r6, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800262a:	9504      	str	r5, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800262c:	2307      	movs	r3, #7
 800262e:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002630:	9505      	str	r5, [sp, #20]
  sConfig.Offset = 0;
 8002632:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002634:	a901      	add	r1, sp, #4
 8002636:	4620      	mov	r0, r4
 8002638:	f7fe fa3a 	bl	8000ab0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 800263c:	2309      	movs	r3, #9
 800263e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 2;
 8002640:	9702      	str	r7, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002642:	a901      	add	r1, sp, #4
 8002644:	4620      	mov	r0, r4
 8002646:	f7fe fa33 	bl	8000ab0 <HAL_ADC_ConfigChannel>
}
 800264a:	b00b      	add	sp, #44	; 0x2c
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264e:	bf00      	nop
 8002650:	200000c4 	.word	0x200000c4

08002654 <SystemClock_Config>:
{
 8002654:	b530      	push	{r4, r5, lr}
 8002656:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002658:	2502      	movs	r5, #2
 800265a:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800265c:	2301      	movs	r3, #1
 800265e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002660:	2310      	movs	r3, #16
 8002662:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002664:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002666:	2400      	movs	r4, #0
 8002668:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800266a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800266e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002670:	a80c      	add	r0, sp, #48	; 0x30
 8002672:	f7fe fded 	bl	8001250 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002676:	230f      	movs	r3, #15
 8002678:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800267a:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002684:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002686:	4629      	mov	r1, r5
 8002688:	a807      	add	r0, sp, #28
 800268a:	f7ff f91f 	bl	80018cc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800268e:	2381      	movs	r3, #129	; 0x81
 8002690:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002692:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 8002694:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002698:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269a:	4668      	mov	r0, sp
 800269c:	f7ff fa32 	bl	8001b04 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026a0:	f7ff f9fe 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <SystemClock_Config+0x74>)
 80026a6:	fba3 3000 	umull	r3, r0, r3, r0
 80026aa:	0980      	lsrs	r0, r0, #6
 80026ac:	f7fe fcb0 	bl	8001010 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026b0:	2004      	movs	r0, #4
 80026b2:	f7fe fcc3 	bl	800103c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026b6:	4622      	mov	r2, r4
 80026b8:	4621      	mov	r1, r4
 80026ba:	f04f 30ff 	mov.w	r0, #4294967295
 80026be:	f7fe fc69 	bl	8000f94 <HAL_NVIC_SetPriority>
}
 80026c2:	b017      	add	sp, #92	; 0x5c
 80026c4:	bd30      	pop	{r4, r5, pc}
 80026c6:	bf00      	nop
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <Disable_Digits>:
	}
	}
}

void Disable_Digits(void)
{
 80026cc:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET); //1
 80026ce:	4c0b      	ldr	r4, [pc, #44]	; (80026fc <Disable_Digits+0x30>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7fe fdb4 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET); //2
 80026dc:	2201      	movs	r2, #1
 80026de:	2110      	movs	r1, #16
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe fdaf 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET); //3
 80026e6:	2201      	movs	r2, #1
 80026e8:	2120      	movs	r1, #32
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7fe fdaa 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET); //4
 80026f0:	2201      	movs	r2, #1
 80026f2:	2108      	movs	r1, #8
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7fe fda5 	bl	8001244 <HAL_GPIO_WritePin>
 80026fa:	bd10      	pop	{r4, pc}
 80026fc:	48000400 	.word	0x48000400

08002700 <set_all>:
}

void set_all(void)
{
 8002700:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 8002702:	2201      	movs	r2, #1
 8002704:	2120      	movs	r1, #32
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7fe fd9b 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 800270e:	2201      	movs	r2, #1
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002716:	f7fe fd95 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 800271a:	2201      	movs	r2, #1
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002722:	f7fe fd8f 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8002726:	2201      	movs	r2, #1
 8002728:	2140      	movs	r1, #64	; 0x40
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <set_all+0x58>)
 800272c:	f7fe fd8a 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002730:	2201      	movs	r2, #1
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <set_all+0x5c>)
 8002736:	f7fe fd85 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f7fe fd7e 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f7fe fd77 	bl	8001244 <HAL_GPIO_WritePin>
 8002756:	bd08      	pop	{r3, pc}
 8002758:	48000400 	.word	0x48000400
 800275c:	48000800 	.word	0x48000800

08002760 <reset_all>:
}

void reset_all(void)
{
 8002760:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 8002762:	2200      	movs	r2, #0
 8002764:	2120      	movs	r1, #32
 8002766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276a:	f7fe fd6b 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 800276e:	2200      	movs	r2, #0
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f7fe fd65 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 800277a:	2200      	movs	r2, #0
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f7fe fd5f 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET); //4
 8002786:	2200      	movs	r2, #0
 8002788:	2140      	movs	r1, #64	; 0x40
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <reset_all+0x58>)
 800278c:	f7fe fd5a 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET); //5
 8002790:	2200      	movs	r2, #0
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <reset_all+0x5c>)
 8002796:	f7fe fd55 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET); //6
 800279a:	2200      	movs	r2, #0
 800279c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f7fe fd4e 	bl	8001244 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); //7
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f7fe fd47 	bl	8001244 <HAL_GPIO_WritePin>
 80027b6:	bd08      	pop	{r3, pc}
 80027b8:	48000400 	.word	0x48000400
 80027bc:	48000800 	.word	0x48000800

080027c0 <Digit_Maker>:
{
 80027c0:	b508      	push	{r3, lr}
	switch (digit)
 80027c2:	2809      	cmp	r0, #9
 80027c4:	d814      	bhi.n	80027f0 <Digit_Maker+0x30>
 80027c6:	e8df f000 	tbb	[pc, r0]
 80027ca:	057e      	.short	0x057e
 80027cc:	47342515 	.word	0x47342515
 80027d0:	76735e55 	.word	0x76735e55
		set_all();
 80027d4:	f7ff ff94 	bl	8002700 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 80027d8:	2200      	movs	r2, #0
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e0:	f7fe fd30 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ec:	f7fe fd2a 	bl	8001244 <HAL_GPIO_WritePin>
}
 80027f0:	2001      	movs	r0, #1
 80027f2:	bd08      	pop	{r3, pc}
		reset_all();
 80027f4:	f7ff ffb4 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET); //3
 80027f8:	2201      	movs	r2, #1
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002800:	f7fe fd20 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f7fe fd19 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 8002812:	e7ed      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 8002814:	f7ff ffa4 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002818:	2201      	movs	r2, #1
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	482f      	ldr	r0, [pc, #188]	; (80028dc <Digit_Maker+0x11c>)
 800281e:	f7fe fd11 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //7
 8002822:	2201      	movs	r2, #1
 8002824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282c:	f7fe fd0a 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 8002830:	e7de      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 8002832:	f7ff ff95 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //1
 8002836:	2201      	movs	r2, #1
 8002838:	2120      	movs	r1, #32
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f7fe fd01 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET); //4
 8002842:	2201      	movs	r2, #1
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	4826      	ldr	r0, [pc, #152]	; (80028e0 <Digit_Maker+0x120>)
 8002848:	f7fe fcfc 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 800284c:	2201      	movs	r2, #1
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	4822      	ldr	r0, [pc, #136]	; (80028dc <Digit_Maker+0x11c>)
 8002852:	f7fe fcf7 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 8002856:	e7cb      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 8002858:	f7ff ff82 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 800285c:	2201      	movs	r2, #1
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002864:	f7fe fcee 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 8002868:	2201      	movs	r2, #1
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	481b      	ldr	r0, [pc, #108]	; (80028dc <Digit_Maker+0x11c>)
 800286e:	f7fe fce9 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 8002872:	e7bd      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 8002874:	f7ff ff74 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); //2
 8002878:	2201      	movs	r2, #1
 800287a:	2140      	movs	r1, #64	; 0x40
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f7fe fce0 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 8002884:	e7b4      	b.n	80027f0 <Digit_Maker+0x30>
		set_all();
 8002886:	f7ff ff3b 	bl	8002700 <set_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET); //1
 800288a:	2200      	movs	r2, #0
 800288c:	2120      	movs	r1, #32
 800288e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002892:	f7fe fcd7 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET); //2
 8002896:	2200      	movs	r2, #0
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f7fe fcd1 	bl	8001244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET); //3
 80028a2:	2200      	movs	r2, #0
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f7fe fccb 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 80028ae:	e79f      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 80028b0:	f7ff ff56 	bl	8002760 <reset_all>
		break;
 80028b4:	e79c      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 80028b6:	f7ff ff53 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); //5
 80028ba:	2201      	movs	r2, #1
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	4807      	ldr	r0, [pc, #28]	; (80028dc <Digit_Maker+0x11c>)
 80028c0:	f7fe fcc0 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 80028c4:	e794      	b.n	80027f0 <Digit_Maker+0x30>
		reset_all();
 80028c6:	f7ff ff4b 	bl	8002760 <reset_all>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //6
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f7fe fcb6 	bl	8001244 <HAL_GPIO_WritePin>
		break;
 80028d8:	e78a      	b.n	80027f0 <Digit_Maker+0x30>
 80028da:	bf00      	nop
 80028dc:	48000800 	.word	0x48000800
 80028e0:	48000400 	.word	0x48000400

080028e4 <Number_Display>:
{
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	b083      	sub	sp, #12
 80028ea:	4607      	mov	r7, r0
 80028ec:	468a      	mov	sl, r1
 80028ee:	4693      	mov	fp, r2
 80028f0:	9301      	str	r3, [sp, #4]
	int d4cplt = 0;
 80028f2:	2400      	movs	r4, #0
	int d3cplt = 0;
 80028f4:	46a1      	mov	r9, r4
	int d2cplt = 0;
 80028f6:	46a0      	mov	r8, r4
	int d1cplt = 0;
 80028f8:	4626      	mov	r6, r4
	int process = 1;
 80028fa:	2501      	movs	r5, #1
	while (process)
 80028fc:	e077      	b.n	80029ee <Number_Display+0x10a>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 80028fe:	2201      	movs	r2, #1
 8002900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002904:	484e      	ldr	r0, [pc, #312]	; (8002a40 <Number_Display+0x15c>)
 8002906:	f7fe fc9d 	bl	8001244 <HAL_GPIO_WritePin>
			if(d2==0)
 800290a:	f1ba 0f00 	cmp.w	sl, #0
 800290e:	d001      	beq.n	8002914 <Number_Display+0x30>
			d1cplt = 1;
 8002910:	462e      	mov	r6, r5
 8002912:	e06f      	b.n	80029f4 <Number_Display+0x110>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8002914:	2201      	movs	r2, #1
 8002916:	2110      	movs	r1, #16
 8002918:	4849      	ldr	r0, [pc, #292]	; (8002a40 <Number_Display+0x15c>)
 800291a:	f7fe fc93 	bl	8001244 <HAL_GPIO_WritePin>
				if(d3==0)
 800291e:	f1bb 0f00 	cmp.w	fp, #0
 8002922:	d002      	beq.n	800292a <Number_Display+0x46>
				d2cplt = 1;
 8002924:	46a8      	mov	r8, r5
			d1cplt = 1;
 8002926:	462e      	mov	r6, r5
 8002928:	e064      	b.n	80029f4 <Number_Display+0x110>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800292a:	2201      	movs	r2, #1
 800292c:	2120      	movs	r1, #32
 800292e:	4844      	ldr	r0, [pc, #272]	; (8002a40 <Number_Display+0x15c>)
 8002930:	f7fe fc88 	bl	8001244 <HAL_GPIO_WritePin>
					d3cplt = 1;
 8002934:	46a9      	mov	r9, r5
				d2cplt = 1;
 8002936:	46a8      	mov	r8, r5
			d1cplt = 1;
 8002938:	462e      	mov	r6, r5
 800293a:	e05b      	b.n	80029f4 <Number_Display+0x110>
	if (LEDmsecFlag==1 && d1cplt==0)
 800293c:	2e00      	cmp	r6, #0
 800293e:	d15e      	bne.n	80029fe <Number_Display+0x11a>
		LEDmsecFlag = 0;
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <Number_Display+0x160>)
 8002942:	701e      	strb	r6, [r3, #0]
		Disable_Digits();
 8002944:	f7ff fec2 	bl	80026cc <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8002948:	4632      	mov	r2, r6
 800294a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800294e:	483c      	ldr	r0, [pc, #240]	; (8002a40 <Number_Display+0x15c>)
 8002950:	f7fe fc78 	bl	8001244 <HAL_GPIO_WritePin>
				Digit_Maker(d1);
 8002954:	4638      	mov	r0, r7
 8002956:	f7ff ff33 	bl	80027c0 <Digit_Maker>
		d1cplt=1;
 800295a:	462e      	mov	r6, r5
 800295c:	e04f      	b.n	80029fe <Number_Display+0x11a>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 800295e:	2e01      	cmp	r6, #1
 8002960:	d152      	bne.n	8002a08 <Number_Display+0x124>
 8002962:	f1b8 0f00 	cmp.w	r8, #0
 8002966:	d14f      	bne.n	8002a08 <Number_Display+0x124>
		LEDmsecFlag = 0;
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <Number_Display+0x160>)
 800296a:	f883 8000 	strb.w	r8, [r3]
		Disable_Digits();
 800296e:	f7ff fead 	bl	80026cc <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8002972:	4642      	mov	r2, r8
 8002974:	2110      	movs	r1, #16
 8002976:	4832      	ldr	r0, [pc, #200]	; (8002a40 <Number_Display+0x15c>)
 8002978:	f7fe fc64 	bl	8001244 <HAL_GPIO_WritePin>
				Digit_Maker(d2);
 800297c:	4650      	mov	r0, sl
 800297e:	f7ff ff1f 	bl	80027c0 <Digit_Maker>
		d2cplt=1;
 8002982:	46b0      	mov	r8, r6
 8002984:	e040      	b.n	8002a08 <Number_Display+0x124>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002986:	2e01      	cmp	r6, #1
 8002988:	d143      	bne.n	8002a12 <Number_Display+0x12e>
 800298a:	f1b8 0f01 	cmp.w	r8, #1
 800298e:	d140      	bne.n	8002a12 <Number_Display+0x12e>
 8002990:	f1b9 0f00 	cmp.w	r9, #0
 8002994:	d13d      	bne.n	8002a12 <Number_Display+0x12e>
		LEDmsecFlag = 0;
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <Number_Display+0x160>)
 8002998:	f883 9000 	strb.w	r9, [r3]
		Disable_Digits();
 800299c:	f7ff fe96 	bl	80026cc <Disable_Digits>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80029a0:	464a      	mov	r2, r9
 80029a2:	2120      	movs	r1, #32
 80029a4:	4826      	ldr	r0, [pc, #152]	; (8002a40 <Number_Display+0x15c>)
 80029a6:	f7fe fc4d 	bl	8001244 <HAL_GPIO_WritePin>
				Digit_Maker(d3);
 80029aa:	4658      	mov	r0, fp
 80029ac:	f7ff ff08 	bl	80027c0 <Digit_Maker>
		d3cplt=1;
 80029b0:	46c1      	mov	r9, r8
 80029b2:	e02e      	b.n	8002a12 <Number_Display+0x12e>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 80029b4:	2e01      	cmp	r6, #1
 80029b6:	d131      	bne.n	8002a1c <Number_Display+0x138>
 80029b8:	f1b8 0f01 	cmp.w	r8, #1
 80029bc:	d12e      	bne.n	8002a1c <Number_Display+0x138>
 80029be:	f1b9 0f01 	cmp.w	r9, #1
 80029c2:	d12b      	bne.n	8002a1c <Number_Display+0x138>
 80029c4:	bb54      	cbnz	r4, 8002a1c <Number_Display+0x138>
		LEDmsecFlag = 0;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <Number_Display+0x160>)
 80029c8:	701c      	strb	r4, [r3, #0]
		Disable_Digits();
 80029ca:	f7ff fe7f 	bl	80026cc <Disable_Digits>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80029ce:	4622      	mov	r2, r4
 80029d0:	2108      	movs	r1, #8
 80029d2:	481b      	ldr	r0, [pc, #108]	; (8002a40 <Number_Display+0x15c>)
 80029d4:	f7fe fc36 	bl	8001244 <HAL_GPIO_WritePin>
		Digit_Maker(d4);
 80029d8:	9801      	ldr	r0, [sp, #4]
 80029da:	f7ff fef1 	bl	80027c0 <Digit_Maker>
		d4cplt=1;
 80029de:	464c      	mov	r4, r9
 80029e0:	e01c      	b.n	8002a1c <Number_Display+0x138>
		d4cplt = 0;
 80029e2:	2400      	movs	r4, #0
		d3cplt = 0;
 80029e4:	46a1      	mov	r9, r4
		d2cplt = 0;
 80029e6:	46a0      	mov	r8, r4
		d1cplt = 0;
 80029e8:	4626      	mov	r6, r4
 80029ea:	e019      	b.n	8002a20 <Number_Display+0x13c>
		process = 0;
 80029ec:	2500      	movs	r5, #0
	while (process)
 80029ee:	b31d      	cbz	r5, 8002a38 <Number_Display+0x154>
		if(d1==0)
 80029f0:	2f00      	cmp	r7, #0
 80029f2:	d084      	beq.n	80028fe <Number_Display+0x1a>
	if (LEDmsecFlag==1 && d1cplt==0)
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <Number_Display+0x160>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d09e      	beq.n	800293c <Number_Display+0x58>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==0)
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <Number_Display+0x160>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d0aa      	beq.n	800295e <Number_Display+0x7a>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==0)
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <Number_Display+0x160>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d0b9      	beq.n	8002986 <Number_Display+0xa2>
	if (LEDmsecFlag==1 && d1cplt==1 && d2cplt==1 && d3cplt==1 && d4cplt==0)
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <Number_Display+0x160>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d0cb      	beq.n	80029b4 <Number_Display+0xd0>
	if (d4cplt == 1)
 8002a1c:	2c01      	cmp	r4, #1
 8002a1e:	d0e0      	beq.n	80029e2 <Number_Display+0xfe>
	if (ReceiveFlag == 1 || ADCmsecFlag == 1)
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <Number_Display+0x164>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d0e0      	beq.n	80029ec <Number_Display+0x108>
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <Number_Display+0x168>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d1dc      	bne.n	80029ee <Number_Display+0x10a>
		process = 0;
 8002a34:	2500      	movs	r5, #0
 8002a36:	e7da      	b.n	80029ee <Number_Display+0x10a>
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	48000400 	.word	0x48000400
 8002a44:	2000005b 	.word	0x2000005b
 8002a48:	20000296 	.word	0x20000296
 8002a4c:	20000059 	.word	0x20000059

08002a50 <Number_Maker>:
{
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (number < 0)
 8002a52:	2800      	cmp	r0, #0
 8002a54:	db39      	blt.n	8002aca <Number_Maker+0x7a>
	digit4 = number % 10;
 8002a56:	4d1e      	ldr	r5, [pc, #120]	; (8002ad0 <Number_Maker+0x80>)
 8002a58:	fb85 3200 	smull	r3, r2, r5, r0
 8002a5c:	17c4      	asrs	r4, r0, #31
 8002a5e:	ebc4 02a2 	rsb	r2, r4, r2, asr #2
 8002a62:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a66:	004b      	lsls	r3, r1, #1
 8002a68:	1ac3      	subs	r3, r0, r3
	number = number/10;
 8002a6a:	b212      	sxth	r2, r2
	digit3 = number % 10;
 8002a6c:	fb85 1602 	smull	r1, r6, r5, r2
 8002a70:	17d1      	asrs	r1, r2, #31
 8002a72:	ebc1 01a6 	rsb	r1, r1, r6, asr #2
 8002a76:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002a7a:	004e      	lsls	r6, r1, #1
 8002a7c:	1b92      	subs	r2, r2, r6
	number = number/10;
 8002a7e:	4915      	ldr	r1, [pc, #84]	; (8002ad4 <Number_Maker+0x84>)
 8002a80:	fb81 6100 	smull	r6, r1, r1, r0
 8002a84:	ebc4 1161 	rsb	r1, r4, r1, asr #5
 8002a88:	b209      	sxth	r1, r1
	digit2 = number % 10;
 8002a8a:	fb85 6701 	smull	r6, r7, r5, r1
 8002a8e:	17ce      	asrs	r6, r1, #31
 8002a90:	ebc6 06a7 	rsb	r6, r6, r7, asr #2
 8002a94:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002a98:	0077      	lsls	r7, r6, #1
 8002a9a:	1bc9      	subs	r1, r1, r7
	number = number/10;
 8002a9c:	4e0e      	ldr	r6, [pc, #56]	; (8002ad8 <Number_Maker+0x88>)
 8002a9e:	fb86 6000 	smull	r6, r0, r6, r0
 8002aa2:	ebc4 10a0 	rsb	r0, r4, r0, asr #6
 8002aa6:	b200      	sxth	r0, r0
	digit1 = number % 10;
 8002aa8:	fb85 5400 	smull	r5, r4, r5, r0
 8002aac:	17c5      	asrs	r5, r0, #31
 8002aae:	ebc5 05a4 	rsb	r5, r5, r4, asr #2
 8002ab2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002ab6:	006c      	lsls	r4, r5, #1
 8002ab8:	1b00      	subs	r0, r0, r4
	Number_Display(digit1, digit2, digit3, digit4);
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	b252      	sxtb	r2, r2
 8002abe:	b249      	sxtb	r1, r1
 8002ac0:	b240      	sxtb	r0, r0
 8002ac2:	f7ff ff0f 	bl	80028e4 <Number_Display>
}
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		number = number * minus;
 8002aca:	4240      	negs	r0, r0
 8002acc:	b200      	sxth	r0, r0
 8002ace:	e7c2      	b.n	8002a56 <Number_Maker+0x6>
 8002ad0:	66666667 	.word	0x66666667
 8002ad4:	51eb851f 	.word	0x51eb851f
 8002ad8:	10624dd3 	.word	0x10624dd3

08002adc <convertfromstring>:

uint8_t convertfromstring (char* string, int16_t* value)
{
	int16_t minus = 1;
	int16_t sum = 0;
	if (*string == '\0')
 8002adc:	7803      	ldrb	r3, [r0, #0]
 8002ade:	b1eb      	cbz	r3, 8002b1c <convertfromstring+0x40>
{
 8002ae0:	b430      	push	{r4, r5}
	{
		return 0;
	}
	if (*string == '-')
 8002ae2:	2b2d      	cmp	r3, #45	; 0x2d
 8002ae4:	d002      	beq.n	8002aec <convertfromstring+0x10>
	int16_t minus = 1;
 8002ae6:	2501      	movs	r5, #1
 8002ae8:	2200      	movs	r2, #0
 8002aea:	e00b      	b.n	8002b04 <convertfromstring+0x28>
	{
		minus = -1;
		string++;
 8002aec:	3001      	adds	r0, #1
		minus = -1;
 8002aee:	f04f 35ff 	mov.w	r5, #4294967295
 8002af2:	e7f9      	b.n	8002ae8 <convertfromstring+0xc>
	}
	while ((*string >= '0') &&(*string <= '9'))
	{
		sum = 10 * sum;
 8002af4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002af8:	0054      	lsls	r4, r2, #1
 8002afa:	b2a4      	uxth	r4, r4
		sum = sum + (*string - 0x30);
 8002afc:	4423      	add	r3, r4
 8002afe:	3b30      	subs	r3, #48	; 0x30
 8002b00:	b21a      	sxth	r2, r3
		string++;
 8002b02:	3001      	adds	r0, #1
	while ((*string >= '0') &&(*string <= '9'))
 8002b04:	7803      	ldrb	r3, [r0, #0]
 8002b06:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8002b0a:	b2e4      	uxtb	r4, r4
 8002b0c:	2c09      	cmp	r4, #9
 8002b0e:	d9f1      	bls.n	8002af4 <convertfromstring+0x18>
	}

	*value = minus * sum;
 8002b10:	fb15 f302 	smulbb	r3, r5, r2
 8002b14:	800b      	strh	r3, [r1, #0]
	return 1;
 8002b16:	2001      	movs	r0, #1
}
 8002b18:	bc30      	pop	{r4, r5}
 8002b1a:	4770      	bx	lr
		return 0;
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	4770      	bx	lr

08002b20 <main>:
{
 8002b20:	b508      	push	{r3, lr}
  HAL_Init();
 8002b22:	f7fd fb67 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 8002b26:	f7ff fd95 	bl	8002654 <SystemClock_Config>
  MX_GPIO_Init();
 8002b2a:	f7ff fcad 	bl	8002488 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002b2e:	f7ff fd41 	bl	80025b4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002b32:	f7ff fd57 	bl	80025e4 <MX_ADC1_Init>
  HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 8002b36:	2201      	movs	r2, #1
 8002b38:	494f      	ldr	r1, [pc, #316]	; (8002c78 <main+0x158>)
 8002b3a:	4850      	ldr	r0, [pc, #320]	; (8002c7c <main+0x15c>)
 8002b3c:	f7ff f8c6 	bl	8001ccc <HAL_UART_Receive_IT>
 8002b40:	e008      	b.n	8002b54 <main+0x34>
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferA,sizeof(TransmitBufferA)-1,5);
 8002b42:	2305      	movs	r3, #5
 8002b44:	220d      	movs	r2, #13
 8002b46:	494e      	ldr	r1, [pc, #312]	; (8002c80 <main+0x160>)
 8002b48:	484c      	ldr	r0, [pc, #304]	; (8002c7c <main+0x15c>)
 8002b4a:	f7ff fa94 	bl	8002076 <HAL_UART_Transmit>
	  		count = 0;
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <main+0x164>)
 8002b52:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 8002b54:	484c      	ldr	r0, [pc, #304]	; (8002c88 <main+0x168>)
 8002b56:	f7fd fd6f 	bl	8000638 <HAL_ADC_Start_IT>
	  if (ReceiveFlag)
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <main+0x16c>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f8      	beq.n	8002b54 <main+0x34>
	  	ReceiveFlag = 0;
 8002b62:	2200      	movs	r2, #0
 8002b64:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <main+0x16c>)
 8002b66:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_IT(&huart1, ReceiveBuffer,1);
 8002b68:	4c43      	ldr	r4, [pc, #268]	; (8002c78 <main+0x158>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4843      	ldr	r0, [pc, #268]	; (8002c7c <main+0x15c>)
 8002b70:	f7ff f8ac 	bl	8001ccc <HAL_UART_Receive_IT>
	  	HoldBuffer[count++]= ReceiveBuffer[0];
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <main+0x164>)
 8002b76:	7811      	ldrb	r1, [r2, #0]
 8002b78:	1c4b      	adds	r3, r1, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	7013      	strb	r3, [r2, #0]
 8002b7e:	7822      	ldrb	r2, [r4, #0]
 8002b80:	4843      	ldr	r0, [pc, #268]	; (8002c90 <main+0x170>)
 8002b82:	5442      	strb	r2, [r0, r1]
	  	if (ReceiveBuffer[0] == '\n')
 8002b84:	2a0a      	cmp	r2, #10
 8002b86:	d1e5      	bne.n	8002b54 <main+0x34>
	  		HoldBuffer[count] = '\0';
 8002b88:	4604      	mov	r4, r0
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	54e0      	strb	r0, [r4, r3]
	  		Digit_Maker(0);
 8002b8e:	f7ff fe17 	bl	80027c0 <Digit_Maker>
	  		convertfromstring(HoldBuffer, &SignedInteger);
 8002b92:	4d40      	ldr	r5, [pc, #256]	; (8002c94 <main+0x174>)
 8002b94:	4629      	mov	r1, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff ffa0 	bl	8002adc <convertfromstring>
	  		Number_Maker(SignedInteger);
 8002b9c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002ba0:	f7ff ff56 	bl	8002a50 <Number_Maker>
	  		if (HoldBuffer[0] == '$')
 8002ba4:	7823      	ldrb	r3, [r4, #0]
 8002ba6:	2b24      	cmp	r3, #36	; 0x24
 8002ba8:	d1d1      	bne.n	8002b4e <main+0x2e>
	  			switch(HoldBuffer[1])
 8002baa:	7863      	ldrb	r3, [r4, #1]
 8002bac:	2b46      	cmp	r3, #70	; 0x46
 8002bae:	d004      	beq.n	8002bba <main+0x9a>
 8002bb0:	2b47      	cmp	r3, #71	; 0x47
 8002bb2:	d019      	beq.n	8002be8 <main+0xc8>
 8002bb4:	2b41      	cmp	r3, #65	; 0x41
 8002bb6:	d1ca      	bne.n	8002b4e <main+0x2e>
 8002bb8:	e7c3      	b.n	8002b42 <main+0x22>
	    				       	TempBuffer[0] = HoldBuffer[3];
 8002bba:	4835      	ldr	r0, [pc, #212]	; (8002c90 <main+0x170>)
 8002bbc:	78c2      	ldrb	r2, [r0, #3]
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <main+0x178>)
 8002bc0:	701a      	strb	r2, [r3, #0]
	    				    	TempBuffer[1] = HoldBuffer[4];
 8002bc2:	7902      	ldrb	r2, [r0, #4]
 8002bc4:	705a      	strb	r2, [r3, #1]
	    				    	TempBuffer[2] = HoldBuffer[5];
 8002bc6:	7942      	ldrb	r2, [r0, #5]
 8002bc8:	709a      	strb	r2, [r3, #2]
	    				    	TempBuffer[3] = HoldBuffer[6];
 8002bca:	7982      	ldrb	r2, [r0, #6]
 8002bcc:	70da      	strb	r2, [r3, #3]
	    				    	TempBuffer[4] = HoldBuffer[7];
 8002bce:	79c2      	ldrb	r2, [r0, #7]
 8002bd0:	711a      	strb	r2, [r3, #4]
	    				    	convertfromstring(HoldBuffer+3, &TempInteger);
 8002bd2:	4932      	ldr	r1, [pc, #200]	; (8002c9c <main+0x17c>)
 8002bd4:	3003      	adds	r0, #3
 8002bd6:	f7ff ff81 	bl	8002adc <convertfromstring>
	    				    	HAL_UART_Transmit(&huart1, TransmitBufferF,sizeof(TransmitBufferF)-1,5);
 8002bda:	2305      	movs	r3, #5
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4930      	ldr	r1, [pc, #192]	; (8002ca0 <main+0x180>)
 8002be0:	4826      	ldr	r0, [pc, #152]	; (8002c7c <main+0x15c>)
 8002be2:	f7ff fa48 	bl	8002076 <HAL_UART_Transmit>
	    				    	break;
 8002be6:	e7b2      	b.n	8002b4e <main+0x2e>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <main+0x178>)
 8002bea:	785b      	ldrb	r3, [r3, #1]
 8002bec:	2b0d      	cmp	r3, #13
 8002bee:	d01d      	beq.n	8002c2c <main+0x10c>
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <main+0x178>)
 8002bf2:	789b      	ldrb	r3, [r3, #2]
 8002bf4:	2b0d      	cmp	r3, #13
 8002bf6:	d02b      	beq.n	8002c50 <main+0x130>
	    				    	if(TempBuffer[3] == '\r' && TempBuffer[4] == '\n')
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <main+0x178>)
 8002bfa:	78db      	ldrb	r3, [r3, #3]
 8002bfc:	2b0d      	cmp	r3, #13
 8002bfe:	d1a6      	bne.n	8002b4e <main+0x2e>
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <main+0x178>)
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	2b0a      	cmp	r3, #10
 8002c06:	d1a2      	bne.n	8002b4e <main+0x2e>
	    							TransmitBufferGH[3] = TempBuffer[0];
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <main+0x178>)
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	4925      	ldr	r1, [pc, #148]	; (8002ca4 <main+0x184>)
 8002c0e:	70ca      	strb	r2, [r1, #3]
	    							TransmitBufferGH[4] = TempBuffer[1];
 8002c10:	785a      	ldrb	r2, [r3, #1]
 8002c12:	710a      	strb	r2, [r1, #4]
	    							TransmitBufferGH[5] = TempBuffer[2];
 8002c14:	789b      	ldrb	r3, [r3, #2]
 8002c16:	714b      	strb	r3, [r1, #5]
	    							TransmitBufferGH[6] = '\r';
 8002c18:	230d      	movs	r3, #13
 8002c1a:	718b      	strb	r3, [r1, #6]
	    							TransmitBufferGH[7] = '\n';
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	71cb      	strb	r3, [r1, #7]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGH,8,5);
 8002c20:	2305      	movs	r3, #5
 8002c22:	2208      	movs	r2, #8
 8002c24:	4815      	ldr	r0, [pc, #84]	; (8002c7c <main+0x15c>)
 8002c26:	f7ff fa26 	bl	8002076 <HAL_UART_Transmit>
 8002c2a:	e790      	b.n	8002b4e <main+0x2e>
	    				    	if(TempBuffer[1] == '\r' && TempBuffer[2] == '\n')
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <main+0x178>)
 8002c2e:	789b      	ldrb	r3, [r3, #2]
 8002c30:	2b0a      	cmp	r3, #10
 8002c32:	d1dd      	bne.n	8002bf0 <main+0xd0>
	    				    		TransmitBufferG[3] = TempBuffer[0];
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <main+0x178>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	491b      	ldr	r1, [pc, #108]	; (8002ca8 <main+0x188>)
 8002c3a:	70cb      	strb	r3, [r1, #3]
	    				    		TransmitBufferG[4] = '\r';
 8002c3c:	230d      	movs	r3, #13
 8002c3e:	710b      	strb	r3, [r1, #4]
	    				    		TransmitBufferG[5] = '\n';
 8002c40:	230a      	movs	r3, #10
 8002c42:	714b      	strb	r3, [r1, #5]
	    				    		HAL_UART_Transmit(&huart1, TransmitBufferG,6,5);
 8002c44:	2305      	movs	r3, #5
 8002c46:	2206      	movs	r2, #6
 8002c48:	480c      	ldr	r0, [pc, #48]	; (8002c7c <main+0x15c>)
 8002c4a:	f7ff fa14 	bl	8002076 <HAL_UART_Transmit>
 8002c4e:	e7cf      	b.n	8002bf0 <main+0xd0>
	    				    	if(TempBuffer[2] == '\r' && TempBuffer[3] == '\n')
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <main+0x178>)
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	2b0a      	cmp	r3, #10
 8002c56:	d1cf      	bne.n	8002bf8 <main+0xd8>
	    							TransmitBufferGT[3] = TempBuffer[0];
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <main+0x178>)
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	4913      	ldr	r1, [pc, #76]	; (8002cac <main+0x18c>)
 8002c5e:	70ca      	strb	r2, [r1, #3]
	    							TransmitBufferGT[4] = TempBuffer[1];
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	710b      	strb	r3, [r1, #4]
	    							TransmitBufferGT[5] = '\r';
 8002c64:	230d      	movs	r3, #13
 8002c66:	714b      	strb	r3, [r1, #5]
	    							TransmitBufferGT[6] = '\n';
 8002c68:	230a      	movs	r3, #10
 8002c6a:	718b      	strb	r3, [r1, #6]
	    							HAL_UART_Transmit(&huart1, TransmitBufferGT,7,5);
 8002c6c:	2305      	movs	r3, #5
 8002c6e:	2207      	movs	r2, #7
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <main+0x15c>)
 8002c72:	f7ff fa00 	bl	8002076 <HAL_UART_Transmit>
 8002c76:	e7bf      	b.n	8002bf8 <main+0xd8>
 8002c78:	20000240 	.word	0x20000240
 8002c7c:	20000118 	.word	0x20000118
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000060 	.word	0x20000060
 8002c88:	200000c4 	.word	0x200000c4
 8002c8c:	20000296 	.word	0x20000296
 8002c90:	20000234 	.word	0x20000234
 8002c94:	20000294 	.word	0x20000294
 8002c98:	200001d8 	.word	0x200001d8
 8002c9c:	20000298 	.word	0x20000298
 8002ca0:	20000010 	.word	0x20000010
 8002ca4:	20000020 	.word	0x20000020
 8002ca8:	20000018 	.word	0x20000018
 8002cac:	2000002c 	.word	0x2000002c

08002cb0 <HAL_SYSTICK_Callback>:
//	return 1;
//}

void HAL_SYSTICK_Callback(void)
{
	LEDmsecCntr++; // New millisecond timer for LED
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <HAL_SYSTICK_Callback+0x30>)
 8002cb2:	7813      	ldrb	r3, [r2, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	7013      	strb	r3, [r2, #0]
	ADCmsecCntr++;
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_SYSTICK_Callback+0x34>)
 8002cbc:	780b      	ldrb	r3, [r1, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	700b      	strb	r3, [r1, #0]
	     if (LEDmsecCntr>3)
 8002cc4:	7813      	ldrb	r3, [r2, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d905      	bls.n	8002cd8 <HAL_SYSTICK_Callback+0x28>
	     {
	    	 LEDmsecCntr=0;
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_SYSTICK_Callback+0x30>)
 8002cd0:	701a      	strb	r2, [r3, #0]
	    	 LEDmsecFlag = 1; // Flag to indicate 1000ms event
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_SYSTICK_Callback+0x38>)
 8002cd6:	701a      	strb	r2, [r3, #0]
	     }
	     if (ADCmsecCntr>2000)
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <HAL_SYSTICK_Callback+0x34>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	2000005a 	.word	0x2000005a
 8002ce4:	20000058 	.word	0x20000058
 8002ce8:	2000005b 	.word	0x2000005b

08002cec <vconvert>:

}

uint8_t vconvert(int16_t* v_convarray)
{
	int vcount = 0;
 8002cec:	2100      	movs	r1, #0

	while (vcount<41)
 8002cee:	e01b      	b.n	8002d28 <vconvert+0x3c>
	{
	*v_convarray = *v_convarray << 8;
 8002cf0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	8003      	strh	r3, [r0, #0]
	vnew[vcount] = *v_convarray * Vdd;
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <vconvert+0x44>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	fb13 f302 	smulbb	r3, r3, r2
 8002d04:	b21b      	sxth	r3, r3
	vnew[vcount] /= bits;
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <vconvert+0x48>)
 8002d08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d10:	b21b      	sxth	r3, r3
	vnew[vcount] = vnew[vcount] << 8;
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <vconvert+0x4c>)
 8002d16:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	*v_convarray = vnew[count];
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <vconvert+0x50>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d22:	f820 3b02 	strh.w	r3, [r0], #2
	v_convarray++;
	vcount++;
 8002d26:	3101      	adds	r1, #1
	while (vcount<41)
 8002d28:	2928      	cmp	r1, #40	; 0x28
 8002d2a:	dde1      	ble.n	8002cf0 <vconvert+0x4>
	}
	return 1;
}
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	4770      	bx	lr
 8002d30:	20000034 	.word	0x20000034
 8002d34:	20000036 	.word	0x20000036
 8002d38:	2000029c 	.word	0x2000029c
 8002d3c:	20000060 	.word	0x20000060

08002d40 <iconvert>:
{
	int icount = 0;
	int16_t inew = 0;
	while (icount<41)
	{
	inew = *i_convarray * Vdd;
 8002d40:	8802      	ldrh	r2, [r0, #0]
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <iconvert+0x1c>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	fb13 f302 	smulbb	r3, r3, r2
 8002d4a:	b21b      	sxth	r3, r3
	inew = inew/bits;
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <iconvert+0x20>)
 8002d4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d52:	fb93 f3f2 	sdiv	r3, r3, r2

	*i_convarray = inew;
 8002d56:	f820 3b02 	strh.w	r3, [r0], #2
 8002d5a:	e7f1      	b.n	8002d40 <iconvert>
 8002d5c:	20000034 	.word	0x20000034
 8002d60:	20000036 	.word	0x20000036

08002d64 <HAL_ADC_ConvCpltCallback>:
{
 8002d64:	b510      	push	{r4, lr}
	if(channel1==1)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_ADC_ConvCpltCallback+0x84>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d008      	beq.n	8002d82 <HAL_ADC_ConvCpltCallback+0x1e>
		if(v<81)
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_ADC_ConvCpltCallback+0x88>)
 8002d72:	681c      	ldr	r4, [r3, #0]
 8002d74:	2c50      	cmp	r4, #80	; 0x50
 8002d76:	dd16      	ble.n	8002da6 <HAL_ADC_ConvCpltCallback+0x42>
	if(c==39 && v==39)
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b27      	cmp	r3, #39	; 0x27
 8002d7e:	d020      	beq.n	8002dc2 <HAL_ADC_ConvCpltCallback+0x5e>
 8002d80:	bd10      	pop	{r4, pc}
		if(c<81)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002d84:	681c      	ldr	r4, [r3, #0]
 8002d86:	2c50      	cmp	r4, #80	; 0x50
 8002d88:	dcf6      	bgt.n	8002d78 <HAL_ADC_ConvCpltCallback+0x14>
	        	ADC_CurrentArray[c]=HAL_ADC_GetValue(&hadc1);
 8002d8a:	481a      	ldr	r0, [pc, #104]	; (8002df4 <HAL_ADC_ConvCpltCallback+0x90>)
 8002d8c:	f7fd fd1c 	bl	80007c8 <HAL_ADC_GetValue>
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002d92:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	        	c++;
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002d98:	6813      	ldr	r3, [r2, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
	        	channel1 = 0;
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_ADC_ConvCpltCallback+0x84>)
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e7e8      	b.n	8002d78 <HAL_ADC_ConvCpltCallback+0x14>
		        ADC_VoltageArray[v]=HAL_ADC_GetValue(&hadc1);
 8002da6:	4813      	ldr	r0, [pc, #76]	; (8002df4 <HAL_ADC_ConvCpltCallback+0x90>)
 8002da8:	f7fd fd0e 	bl	80007c8 <HAL_ADC_GetValue>
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x98>)
 8002dae:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	        	v++;
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_ADC_ConvCpltCallback+0x88>)
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
		        channel1 = 1;
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_ADC_ConvCpltCallback+0x84>)
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e7da      	b.n	8002d78 <HAL_ADC_ConvCpltCallback+0x14>
	if(c==39 && v==39)
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_ADC_ConvCpltCallback+0x88>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b27      	cmp	r3, #39	; 0x27
 8002dc8:	d1da      	bne.n	8002d80 <HAL_ADC_ConvCpltCallback+0x1c>
		c=0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002dce:	6013      	str	r3, [r2, #0]
		v=0;
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_ADC_ConvCpltCallback+0x88>)
 8002dd2:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop_IT(&hadc1);
 8002dd4:	4807      	ldr	r0, [pc, #28]	; (8002df4 <HAL_ADC_ConvCpltCallback+0x90>)
 8002dd6:	f7fd fccd 	bl	8000774 <HAL_ADC_Stop_IT>
		vconvert(ADC_VoltageArray);
 8002dda:	4808      	ldr	r0, [pc, #32]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x98>)
 8002ddc:	f7ff ff86 	bl	8002cec <vconvert>
		iconvert(ADC_CurrentArray);
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002de2:	f7ff ffad 	bl	8002d40 <iconvert>
 8002de6:	bf00      	nop
 8002de8:	2000006e 	.word	0x2000006e
 8002dec:	20000064 	.word	0x20000064
 8002df0:	2000005c 	.word	0x2000005c
 8002df4:	200000c4 	.word	0x200000c4
 8002df8:	20000244 	.word	0x20000244
 8002dfc:	20000188 	.word	0x20000188

08002e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e00:	b500      	push	{lr}
 8002e02:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_MspInit+0x78>)
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e18:	2007      	movs	r0, #7
 8002e1a:	f7fe f8a9 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4611      	mov	r1, r2
 8002e22:	f06f 000b 	mvn.w	r0, #11
 8002e26:	f7fe f8b5 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	f06f 000a 	mvn.w	r0, #10
 8002e32:	f7fe f8af 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	4611      	mov	r1, r2
 8002e3a:	f06f 0009 	mvn.w	r0, #9
 8002e3e:	f7fe f8a9 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	4611      	mov	r1, r2
 8002e46:	f06f 0004 	mvn.w	r0, #4
 8002e4a:	f7fe f8a3 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4611      	mov	r1, r2
 8002e52:	f06f 0003 	mvn.w	r0, #3
 8002e56:	f7fe f89d 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	f06f 0001 	mvn.w	r0, #1
 8002e62:	f7fe f897 	bl	8000f94 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	4611      	mov	r1, r2
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	f7fe f891 	bl	8000f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e72:	b003      	add	sp, #12
 8002e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002e7c:	6803      	ldr	r3, [r0, #0]
 8002e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e82:	d000      	beq.n	8002e86 <HAL_ADC_MspInit+0xa>
 8002e84:	4770      	bx	lr
{
 8002e86:	b510      	push	{r4, lr}
 8002e88:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e8a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002e8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e98:	615a      	str	r2, [r3, #20]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2400      	movs	r4, #0
 8002eae:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb0:	a901      	add	r1, sp, #4
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <HAL_ADC_MspInit+0x50>)
 8002eb4:	f7fe f8fc 	bl	80010b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002eb8:	4622      	mov	r2, r4
 8002eba:	4621      	mov	r1, r4
 8002ebc:	2012      	movs	r0, #18
 8002ebe:	f7fe f869 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ec2:	2012      	movs	r0, #18
 8002ec4:	f7fe f898 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ec8:	b006      	add	sp, #24
 8002eca:	bd10      	pop	{r4, pc}
 8002ecc:	48000800 	.word	0x48000800

08002ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002ed0:	6802      	ldr	r2, [r0, #0]
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_UART_MspInit+0x58>)
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d000      	beq.n	8002eda <HAL_UART_MspInit+0xa>
 8002ed8:	4770      	bx	lr
{
 8002eda:	b500      	push	{lr}
 8002edc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ede:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee8:	619a      	str	r2, [r3, #24]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ef4:	2330      	movs	r3, #48	; 0x30
 8002ef6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f04:	2307      	movs	r3, #7
 8002f06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	a901      	add	r1, sp, #4
 8002f0a:	4808      	ldr	r0, [pc, #32]	; (8002f2c <HAL_UART_MspInit+0x5c>)
 8002f0c:	f7fe f8d0 	bl	80010b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	4611      	mov	r1, r2
 8002f14:	2025      	movs	r0, #37	; 0x25
 8002f16:	f7fe f83d 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f1a:	2025      	movs	r0, #37	; 0x25
 8002f1c:	f7fe f86c 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f20:	b007      	add	sp, #28
 8002f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f26:	bf00      	nop
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	48000800 	.word	0x48000800

08002f30 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002f30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f32:	f7fd f971 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002f36:	f7fe f891 	bl	800105c <HAL_SYSTICK_IRQHandler>
 8002f3a:	bd08      	pop	{r3, pc}

08002f3c <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 8002f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f3e:	4802      	ldr	r0, [pc, #8]	; (8002f48 <ADC1_2_IRQHandler+0xc>)
 8002f40:	f7fd fc4a 	bl	80007d8 <HAL_ADC_IRQHandler>
 8002f44:	bd08      	pop	{r3, pc}
 8002f46:	bf00      	nop
 8002f48:	200000c4 	.word	0x200000c4

08002f4c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8002f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f4e:	4803      	ldr	r0, [pc, #12]	; (8002f5c <USART1_IRQHandler+0x10>)
 8002f50:	f7ff f9ea 	bl	8002328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  ReceiveFlag = 1;
 8002f54:	2201      	movs	r2, #1
 8002f56:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <USART1_IRQHandler+0x14>)
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	bd08      	pop	{r3, pc}
 8002f5c:	20000118 	.word	0x20000118
 8002f60:	20000296 	.word	0x20000296

08002f64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f64:	4915      	ldr	r1, [pc, #84]	; (8002fbc <SystemInit+0x58>)
 8002f66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <SystemInit+0x5c>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002f7c:	6858      	ldr	r0, [r3, #4]
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <SystemInit+0x60>)
 8002f80:	4002      	ands	r2, r0
 8002f82:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f96:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	f022 020f 	bic.w	r2, r2, #15
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002fa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <SystemInit+0x64>)
 8002fac:	4002      	ands	r2, r0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fb8:	608b      	str	r3, [r1, #8]
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	f87fc00c 	.word	0xf87fc00c
 8002fc8:	ff00fccc 	.word	0xff00fccc

08002fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fd2:	e003      	b.n	8002fdc <LoopCopyDataInit>

08002fd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fda:	3104      	adds	r1, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fdc:	480b      	ldr	r0, [pc, #44]	; (800300c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fe0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fe2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fe4:	d3f6      	bcc.n	8002fd4 <CopyDataInit>
	ldr	r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fe8:	e002      	b.n	8002ff0 <LoopFillZerobss>

08002fea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fec:	f842 3b04 	str.w	r3, [r2], #4

08002ff0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <LoopForever+0x16>)
	cmp	r2, r3
 8002ff2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ff4:	d3f9      	bcc.n	8002fea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ff6:	f7ff ffb5 	bl	8002f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f000 f811 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ffe:	f7ff fd8f 	bl	8002b20 <main>

08003002 <LoopForever>:

LoopForever:
    b LoopForever
 8003002:	e7fe      	b.n	8003002 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003004:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003008:	080030c0 	.word	0x080030c0
	ldr	r0, =_sdata
 800300c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003010:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8003014:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8003018:	200002ec 	.word	0x200002ec

0800301c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800301c:	e7fe      	b.n	800301c <BusFault_Handler>
	...

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0d      	ldr	r6, [pc, #52]	; (8003058 <__libc_init_array+0x38>)
 8003024:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003026:	1ba4      	subs	r4, r4, r6
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	2500      	movs	r5, #0
 800302c:	42a5      	cmp	r5, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	4e0b      	ldr	r6, [pc, #44]	; (8003060 <__libc_init_array+0x40>)
 8003032:	4c0c      	ldr	r4, [pc, #48]	; (8003064 <__libc_init_array+0x44>)
 8003034:	f000 f818 	bl	8003068 <_init>
 8003038:	1ba4      	subs	r4, r4, r6
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	2500      	movs	r5, #0
 800303e:	42a5      	cmp	r5, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003048:	4798      	blx	r3
 800304a:	3501      	adds	r5, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003052:	4798      	blx	r3
 8003054:	3501      	adds	r5, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080030b8 	.word	0x080030b8
 800305c:	080030b8 	.word	0x080030b8
 8003060:	080030b8 	.word	0x080030b8
 8003064:	080030bc 	.word	0x080030bc

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
